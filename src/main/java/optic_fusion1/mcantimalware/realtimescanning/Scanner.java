package optic_fusion1.mcantimalware.realtimescanning;

import co.aikar.taskchain.TaskChain;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.translations.TranslationFile;
import optic_fusion1.mcantimalware.utils.Utils;
import optic_fusion1.mcantimalware.utils.ZipUtils;
import optic_fusion1.mcantimalware.utils.taskchain.AntiMalwareChainFactory;
import org.apache.commons.codec.digest.DigestUtils;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipFile;
import org.apache.commons.io.FileUtils;

public class Scanner {

    private Main main;
    private CustomLogger logger;
    private FileConfiguration checksumDatabase;
    private CheckManager checkManager;
    private List<File> maliciousFiles = new ArrayList<>();
    private boolean shouldZipMaliciousPlugins = false;
    private boolean maliciousPluginsFound = false;
    private boolean printOnlyIfInfected = false;
    private File scanDirectory = new File("plugins");
    private File malPluginsFolder = new File("possiblemaliciousplugins");
    private final TranslationFile translations;
    private AntiMalwareChainFactory chainFactory;

    public Scanner(Main main) {
        this.main = main;
        OptionSet options = main.getOptions();
        if (options.has("zipMalPlugins")) {
            shouldZipMaliciousPlugins = (boolean) options.valueOf("zipMalPlugins");
        }
        if (options.has("printOnlyIfInfected")) {
            printOnlyIfInfected = (Boolean) options.valueOf("printOnlyIfInfected");
        }
        this.logger = main.getLogger();
        checkManager = main.getCheckManager();
        checksumDatabase = main.getChecksumDatabase();
        translations = main.getTranslations();
        chainFactory = main.getChainFactory();
    }

    private boolean isBlacklistedFile(File file) {
        if (file.isDirectory()) {
            return true;
        }
        String fileName = file.getName();
        if (fileName.endsWith(".jar") || fileName.endsWith(".zip")) {
            return false;
        }
        return true;
    }

    public void scanFile(File file) throws IOException {
        if (file.getName().endsWith(".zip")) {
            File tempDir = ZipUtils.unzipFileToTempDir(file.toString());
            logger.info("Unzipped " + file.toString() + " to " + tempDir.toString());
            scanTempDirectory(tempDir);
        }
        if (isBlacklistedFile(file)) {
            return;
        }
        ChecksumCheckResult checksumCheckResult = isInChecksumDatabase(file);
        if (checksumCheckResult == ChecksumCheckResult.NO_PLUGIN_YML
                || checksumCheckResult == ChecksumCheckResult.INVALID_PLUGIN_YML
                || checksumCheckResult == ChecksumCheckResult.IN_CHECKSUM) {
            return;
        }
        String fileName = file.getName();
        logger.info(translations.getMessage("not_in_database", fileName));
        try (ZipFile zipFile = new ZipFile(file)) {
            for (BaseCheck check : checkManager.getChecks()) {
                TaskChain<?> chain = chainFactory.newSharedChain(check.getName());
                try {
                    chain.async(() -> chain.setTaskData("infected", check.process(fileName, zipFile)))
                            .sync(() -> {
                                boolean infected = chain.getTaskData("infected");
                                logger.info("Chance: " + check.getChanceOfBeingMalware()
                                        + " Threshold: " + check.getThreshold());
                                if (!(check.getChanceOfBeingMalware() > check.getThreshold())) {
                                    if (!printOnlyIfInfected) {
                                        logger.info(translations.getMessage("might_not_be_infected",
                                                fileName, check.getLogName(), check.getCheckType()));
                                    }
                                } else {
                                    logger.malicious(translations.getMessage("might_be_infected", fileName,
                                            check.getLogName(), check.getCheckType(), check.getClassNodePath(),
                                            (check.getLine() > -1 ? check.getLine() : "none"),
                                            (!check.getSourceFilePath().isEmpty() ? check.getSourceFilePath() : "none")));
                                }
                                if (!maliciousPluginsFound) {
                                    maliciousPluginsFound = true;
                                }
                                if (shouldZipMaliciousPlugins) {
                                    maliciousFiles.add(file);
                                }
                                if (main.notifyOnWindowsWhenMalicious) {
                                    showTrayPopup(fileName, check);
                                }
                            }).execute();
                } catch (Exception e) {
                    if (main.shouldLogDebugMessages()) {
                        logger.exception(e);
                    }
                }
            }
        } catch (Exception e) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(e);
            }
        }
    }

    public void setScanDirectory(File file) {
        scanDirectory = file;
    }

    public void scanTempDirectory(File directory) {
        if (!directory.isDirectory()) {
            return;
        }
        scanDirectory(directory);
    }

    public boolean scanDirectory(File directory) {
        if (!directory.isDirectory()) {
            System.out.println("not a directory");
            return false;
        }
        System.out.println("directory");
        main.setIsCurrentlyScanning(true);
        File[] files = directory.listFiles();
        for (File file : files) {
            System.out.println("File: " + file.getName());
            try {
                scanFile(file);
            } catch (IOException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
        main.setIsCurrentlyScanning(false);
        return true;
    }

    public void scanFiles() {
        main.setIsCurrentlyScanning(true);
        for (File file : scanDirectory.listFiles()) {
            try {
                scanFile(file);
            } catch (IOException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
        main.setIsCurrentlyScanning(false);
        logger.info(translations.getMessage("scanning_finished"));
    }

    public void zipMaliciousPlugins() {
        logger.info(translations.getMessage("plugin_zipping_start"));
        if (!shouldZipMaliciousPlugins) {
            return;
        }
        if (!malPluginsFolder.exists()) {
            malPluginsFolder.mkdirs();
        }
        for (Iterator<File> iter = maliciousFiles.iterator(); maliciousFiles.iterator().hasNext();) {
            File element = iter.next();
            Utils.moveFile(element.getPath(), malPluginsFolder + File.separator + element.getName());
            iter.remove();
        }
        try {
            ZipUtils.zipDir(malPluginsFolder.toPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        logger.info(translations.getMessage("plugin_zipping_end"));
    }

    public ChecksumCheckResult isInChecksumDatabase(File file) {
        try {
            try (JarFile jarFile = new JarFile(file)) {
                JarEntry jarEntry = jarFile.getJarEntry("plugin.yml");
                if (jarEntry == null) {
                    logger.info(translations.getMessage("has_no_plugin_yml", file.getName()));
                    return ChecksumCheckResult.NO_PLUGIN_YML;
                }
                InputStream inputStream;
                try {
                    inputStream = jarFile.getInputStream(jarEntry);
                } catch (IOException ex) {
                    logger.info(translations.getMessage("has_no_plugin_yml", file.getName()));
                    jarFile.close();
                    if (main.shouldLogDebugMessages()) {
                        logger.exception(ex);
                    }
                    return ChecksumCheckResult.NO_PLUGIN_YML;
                }
                if (inputStream == null) {
                    jarFile.close();
                    return ChecksumCheckResult.NO_PLUGIN_YML;
                }
                FileConfiguration config = null;
                try {
                    config = YamlConfiguration.loadConfiguration(inputStream);
                } catch (Exception e) {
                    if (main.shouldLogDebugMessages()) {
                        logger.exception(e);
                    }
                    return ChecksumCheckResult.INVALID_PLUGIN_YML;
                }
                if (!config.isSet("author") && !config.isSet("name")) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug(translations.getMessage("no_author_and_name"));
                    }
                    inputStream.close();
                    jarFile.close();
                    return ChecksumCheckResult.INVALID_PLUGIN_YML;
                }
                String author = config.getString("author");
                String name = config.getString("name");
                if (author != null) {
                    author = author.replaceAll(" ", "-").replaceAll("\\.", "-");
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("Author: " + author);
                    }
                }
                if (name != null) {
                    name = name.replaceAll(" ", "-").replaceAll("\\.", "-");
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("Plugin Name: " + name);
                    }
                }
                if (name == null) {
                    inputStream.close();
                    jarFile.close();
                    return ChecksumCheckResult.INVALID_PLUGIN_YML;
                }
                String fileChecksum = DigestUtils.sha1Hex(Files.newInputStream(file.toPath()));
                if (author != null && !author.isEmpty()) {
                    if (!checksumDatabase.isSet(author + "." + name)) {
                        if (main.shouldLogDebugMessages()) {
                            logger.debug(author + "." + name + " is not set");
                        }
                        inputStream.close();
                        jarFile.close();
                        return ChecksumCheckResult.NOT_IN_CHECKSUM;
                    }
                    List<String> checksums = checksumDatabase.getStringList(author + "." + name);
                    for (String checksum : checksums) {
                        if (main.shouldLogDebugMessages()) {
                            logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                        }
                        if (fileChecksum.equalsIgnoreCase(checksum)) {
                            inputStream.close();
                            jarFile.close();
                            logger.info(translations.getMessage("probably_safe", file.getName()));
                            return ChecksumCheckResult.IN_CHECKSUM;
                        }
                    }
                    inputStream.close();
                    jarFile.close();
                    return ChecksumCheckResult.NOT_IN_CHECKSUM;
                }
                if (main.shouldLogDebugMessages()) {
                    if (checksumDatabase != null) {
                        logger.debug(checksumDatabase.saveToString());
                    } else {
                        logger.debug("Checksum database is null");
                    }
                }
                if (!checksumDatabase.isSet(name)) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug(name + " is not set");
                    }
                    inputStream.close();
                    jarFile.close();
                    return ChecksumCheckResult.NOT_IN_CHECKSUM;
                }
                List<String> checksums = checksumDatabase.getStringList(name);
                for (String checksum : checksums) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                    }
                    if (fileChecksum.equalsIgnoreCase(checksum)) {
                        logger.info(translations.getMessage("probably_safe", file.getName()));
                        inputStream.close();
                        jarFile.close();
                        return ChecksumCheckResult.IN_CHECKSUM;
                    }
                }
                inputStream.close();
            }
            return ChecksumCheckResult.NOT_IN_CHECKSUM;
        } catch (IOException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(ex);
            }

        }
        return ChecksumCheckResult.NOT_IN_CHECKSUM;
    }

    public void reloadChecksumDatabase() {
        logger.info(translations.getMessage("updating_local_checksum_database"));
        checksumDatabase = main.getChecksumDatabase();
        logger.info(translations.getMessage("updated_local_checksum_database"));
    }

    private void showTrayPopup(String fullFileName, BaseCheck check) {
        String os = System.getProperty("os.name").toLowerCase();
        if (SystemTray.isSupported() && os.contains("win")) {
            SystemTray tray = SystemTray.getSystemTray();
            Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
            TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
            trayIcon.setImageAutoSize(true);
            trayIcon.setToolTip(translations.getMessage("might_be_infected_tool_tip", fullFileName));
            try {
                tray.add(trayIcon);
                trayIcon.displayMessage(translations.getMessage("malware_detected_tool_tip_title"),
                        translations.getMessage("might_be_infected_tool_tip_text",
                                fullFileName, check.getName(), check.getCheckType(),
                                check.getClassNodePath()),
                        TrayIcon.MessageType.WARNING);
            } catch (AWTException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
            ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
            executor.schedule(() -> tray.remove(trayIcon), 4, TimeUnit.MINUTES);
        }
    }

    public enum ChecksumCheckResult {
        NO_PLUGIN_YML,
        INVALID_PLUGIN_YML,
        NOT_IN_CHECKSUM,
        IN_CHECKSUM
    }
}
