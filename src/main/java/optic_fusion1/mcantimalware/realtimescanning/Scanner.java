package optic_fusion1.mcantimalware.realtimescanning;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipFile;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.Utils;
import optic_fusion1.mcantimalware.utils.ZipUtils;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.SystemUtils;

public class Scanner {

    private Main main;
    private CustomLogger logger;
    private FileConfiguration checksumDatabase;
    private CheckManager checkManager;
    private List<File> maliciousFiles = new ArrayList<>();
    private boolean shouldZipMaliciousPlugins = false;
    private boolean maliciousPluginsFound = false;
    private boolean printOnlyIfInfected = false;
    private File scanDirectory = new File("plugins");
    private File malPluginsFolder = new File("maliciousplugins.zip");

    public Scanner(Main main) {
        this.main = main;
        OptionSet options = main.getOptions();
        if (options != null) {
            if (options.has("zipMalPlugins")) {
                shouldZipMaliciousPlugins = (boolean) options.valueOf("zipMalPlugins");
            }
            if (options.has("printOnlyIfInfected")) {
                printOnlyIfInfected = (Boolean) options.valueOf("printOnlyIfInfected");
            }
        }
        this.logger = main.getLogger();
        checkManager = main.getCheckManager();
        checksumDatabase = main.getChecksumDatabase();
    }

    private boolean blacklistedFileName(String fileName) {
        if (fileName.equals("MCAntiMalware.jar")
                || fileName.equals("malplugins.zip")
                || fileName.equals("AntiMalwareToolKit.jar")
                || fileName.equals("MCAntiMalware-Rewrite.jar")
                || !fileName.endsWith(".jar")) {
            return true;
        }
        return false;
    }

    public ScanResult scanFile(File file) throws IOException {
        if (blacklistedFileName(file.getName())) {
            return ScanResult.IS_SAFE;
        }
        if (isInChecksumDatabase(file)) {
            return ScanResult.IS_SAFE;
        }
        String fileName = file.getName();
        logger.info(fileName + " wasn't in the checksum database, so it will be scanned for malicious code");
        for (BaseCheck check : checkManager.getChecks()) {
            logger.info("Checking if " + file.getName() + " is infected with " + check.getLogName() + "(" + check.getCheckType() + ")");
            String fullCheckName = check.getFileName().isEmpty() ? "" : " (" + check.getFileName() + ")";
            String fullFileName = fileName + fullCheckName;
            ZipFile zipFile = new ZipFile(file);
            if (!check.process(file.getPath(), zipFile)) {
                if (!printOnlyIfInfected) {
                    logger.info(fullFileName + " MIGHT not be infected with " + check.getLogName() + "(" + check.getCheckType() + ")");
                }
            } else {
                logger.malicious(fullFileName + " MIGHT be infected with " + check.getLogName() + "(" + check.getCheckType() + ") Class Path: " + check.getClassNodePath());
                if (!maliciousPluginsFound) {
                    maliciousPluginsFound = true;
                }
                if (shouldZipMaliciousPlugins && maliciousPluginsFound) {
                    maliciousFiles.add(file);
                }
                showTrayPopup(fullFileName, check);
            }
            zipFile.close();
        }
        return maliciousPluginsFound ? ScanResult.IS_MALICIOUS : ScanResult.IS_SAFE;
    }

    public void setScanDirectory(File file) {
        scanDirectory = file;
    }

    public void scanFiles() {
        for (File file : scanDirectory.listFiles()) {
            if (!file.getName().endsWith(".jar") && file.getName().equals("MCAntiMalware.jar")) {
                return;
            }
            try {
                scanFile(file);
            } catch (IOException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
        if (shouldZipMaliciousPlugins && maliciousPluginsFound) {
            if (!maliciousFiles.isEmpty()) {
                zipMaliciousPlugins();
            }
        }
    }

    public void zipMaliciousPlugins() {
        if (!shouldZipMaliciousPlugins) {
            return;
        }
        if (!malPluginsFolder.exists()) {
            malPluginsFolder.mkdirs();
        }
        for (Iterator<File> iter = maliciousFiles.iterator(); maliciousFiles.iterator().hasNext();) {
            File element = iter.next();
            Utils.moveFile(element.getPath(), malPluginsFolder + File.separator + element.getName());
            iter.remove();
        }
        try {
            ZipUtils.zipDir(malPluginsFolder.toPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean isInChecksumDatabase(File file) {
        try {
            try (JarFile jarFile = new JarFile(file)) {
                JarEntry jarEntry = jarFile.getJarEntry("plugin.yml");
                if (jarEntry == null) {
                    logger.info(file.getName() + " doesn't contain a plugin.yml so it's most likely not in the database");
                    return false;
                }
                InputStream inputStream = null;
                try {
                    inputStream = jarFile.getInputStream(jarEntry);
                } catch (IOException ex) {
                    logger.info(file.getName() + " doesn't contain a plugin.yml so it's most likely not in the database");
                    jarFile.close();
                    if (main.shouldLogDebugMessages()) {
                        logger.exception(ex);
                    }
                    return false;
                }
                if (inputStream == null) {
                    jarFile.close();
                    return false;
                }
                FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
                if (!config.isSet("author") && !config.isSet("name")) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("author & name config sections AREN'T set");
                    }
                    inputStream.close();
                    jarFile.close();
                    return false;
                }
                String author = config.getString("author");
                String name = config.getString("name");
                if (author != null) {
                    author = author.replaceAll(" ", "-").replaceAll("\\.", "-");
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("Author: " + author);
                    }
                }
                if (name != null) {
                    name = name.replaceAll(" ", "-").replaceAll("\\.", "-");
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("Plugin Name: " + name);
                    }
                }
                if (name == null) {
                    inputStream.close();
                    jarFile.close();
                    return false;
                }
                String fileChecksum = DigestUtils.sha1Hex(Files.newInputStream(file.toPath()));
                if (author != null && !author.isEmpty()) {
                    if (!checksumDatabase.isSet(author + "." + name)) {
                        if (main.shouldLogDebugMessages()) {
                            logger.debug(author + "." + name + " is not set");
                        }
                        inputStream.close();
                        jarFile.close();
                        return false;
                    }
                    List<String> checksums = checksumDatabase.getStringList(author + "." + name);
                    for (String checksum : checksums) {
                        if (main.shouldLogDebugMessages()) {
                            logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                        }
                        if (fileChecksum.equalsIgnoreCase(checksum)) {
                            inputStream.close();
                            jarFile.close();
                            logger.info(file.getName() + " is probably safe due to it being in the checksum database");
                            return true;
                        }
                    }
                    inputStream.close();
                    jarFile.close();
                    return false;
                }
                if (main.shouldLogDebugMessages()) {
                    if (checksumDatabase != null) {
                        logger.debug(checksumDatabase.saveToString());
                    } else {
                        logger.debug("Checksum database is null");
                    }
                }
                if (!checksumDatabase.isSet(name)) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug(name + " is not set");
                    }
                    inputStream.close();
                    jarFile.close();
                    return false;
                }
                List<String> checksums = checksumDatabase.getStringList(name);
                for (String checksum : checksums) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                    }
                    if (fileChecksum.equalsIgnoreCase(checksum)) {
                        logger.info(file.getName() + " is probably safe due to it being in the checksum database");
                        inputStream.close();
                        jarFile.close();
                        return true;
                    }
                }
                inputStream.close();
                jarFile.close();
            }
            return false;
        } catch (IOException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(ex);
            }

        }
        return false;
    }

    public void reloadChecksumDatabase() {
        logger.info("Updating local Checksum database");
        checksumDatabase = main.getChecksumDatabase();
        logger.info("Finished updating local Checksum database");
    }

    private void showTrayPopup(String fullFileName, BaseCheck check) {
        if (SystemTray.isSupported() && SystemUtils.IS_OS_WINDOWS) {
            SystemTray tray = SystemTray.getSystemTray();
            Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
            TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
            trayIcon.setImageAutoSize(true);
            trayIcon.setToolTip(fullFileName + " MIGHT be infected");
            try {
                tray.add(trayIcon);
                trayIcon.displayMessage("Malware Detected", fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getCheckType() + ") Class Path: " + check.getClassNodePath(), TrayIcon.MessageType.WARNING);

            } catch (AWTException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
    }

    public boolean shouldZipMaliciousPlugins() {
        return shouldZipMaliciousPlugins;
    }

    public void setShouldZipMaliciousPlugins(boolean shouldZipMaliciousPlugins) {
        this.shouldZipMaliciousPlugins = shouldZipMaliciousPlugins;
    }

    public File getScanDirectory() {
        return scanDirectory;
    }

    public List<File> getMaliciousFiles() {
        return maliciousFiles;
    }
}
