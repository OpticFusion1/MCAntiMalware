package optic_fusion1.mcantimalware.realtimescanning;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public class RealTimeScanner {

    private CustomLogger logger = AntiMalware.getLogger();
    private CheckManager checkManager = AntiMalware.getMain().getCheckManager();
    private Main main;
    private Scanner scanner;
    private File scanDirectory = new File("plugins");

    public RealTimeScanner(Main main) {
        this.main = main;
        scanner = new Scanner(main);
        if (!main.scanSingleFile()) {
            OptionSet options = main.getOptions();
            if (options.has("scandirectory")) {
                scanDirectory = new File((String) options.valueOf("scandirectory"));
                scanner.setScanDirectory(scanDirectory);
            }
            if (!scanDirectory.exists()) {
                logger.alert("The scan directory '" + scanDirectory.getName() + "' doesn't exist");
                System.exit(0);
            }
        }
    }

    public void setupDirectoryWatcher() {
        DirectoryWatcher directoryWatcher = new DirectoryWatcher.Builder()
                .executorService(main.getExecutor())
                .addDirectories(scanDirectory.toPath())
                .setPreExistingAsCreated(true)
                .build((DirectoryWatcher.Event event, Path path) -> {
                    switch (event) {
                        case ENTRY_CREATE:
                            if (main.shouldLogDebugMessages()) {
                                logger.debug("The file '" + path + "' was created");
                            }
                            try {
                                scanner.scanFile(path.toFile());
                            } catch (IOException ex) {
                                if (main.shouldLogDebugMessages()) {
                                    logger.exception(ex);
                                }
                            }
                            break;

                        case ENTRY_MODIFY:
                            if (main.shouldLogDebugMessages()) {
                                logger.debug("The file '" + path + "' was modified");
                            }
                            try {
                                scanner.scanFile(path.toFile());
                            } catch (IOException ex) {
                                if (main.shouldLogDebugMessages()) {
                                    logger.exception(ex);
                                }
                            }
                            break;
                        case ENTRY_DELETE:
                            if (main.shouldLogDebugMessages()) {
                                logger.debug("The file '" + path + "' was deleted");
                            }
                            break;
                    }
                });
        directoryWatcher.start();
    }

    public File getScanDirectory() {
        return scanDirectory;
    }

    public Scanner getScanner() {
        return scanner;
    }

}
