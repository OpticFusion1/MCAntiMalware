package optic_fusion1.mcantimalware.gui.controllers;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.*;
import optic_fusion1.mcantimalware.check.CheckResult;
import optic_fusion1.mcantimalware.gui.GuiLauncher;
import optic_fusion1.mcantimalware.utils.FxGuiUtil;

import java.awt.*;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static optic_fusion1.mcantimalware.AntiMalware.getMain;

public class Dashboard implements Initializable {
    private int processedFileCounter;
    private final Map<File, CheckResult> files = new HashMap<>();
    @FXML
    private ListView<String> fileView;
    @FXML
    private ProgressBar progress;
    @FXML
    private Button settingBtn;
    @FXML
    private Button startBtn;
    @FXML
    private Button removeFileBtn;
    @FXML
    private Button reloadBtn;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        fileView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        reload();
    }

    public void reload(){
        progress.setProgress(0);
        files.clear();
        fileView.getItems().clear();

        File dir = getMain().getScanDirectory();
        File[] listFiles;
        if(!dir.exists() || (listFiles = dir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".jar") &&
                        !name.equalsIgnoreCase("MCAntiMalware.jar") &&
                        !name.equalsIgnoreCase("malplugins.zip") &&
                        !name.equalsIgnoreCase("AntiMalwareToolKit.jar");
            }
        })) == null) return;
        for(File f : listFiles){
            files.put(f, null);
            fileView.getItems().add(f.getName());
        }

        fileView.setCellFactory(stringListView -> new ListCell<String>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                    setText(null);
                    return;
                }
                setStyle("-fx-background-color: #fff;");
                setStyle("-fx-text-fill: black;");
                setStyle("-fx-highlight-text-fill: black;");
                setText(item);
            }
        });
    }

    private void disableButtons(boolean disable){
        settingBtn.setDisable(disable);
        startBtn.setDisable(disable);
        removeFileBtn.setDisable(disable);
        reloadBtn.setDisable(disable);
    }

    private void onScanFinished(File dir) {
        disableButtons(false);
        progress.setProgress(0);

        if (getMain().shouldZipMaliciousPlugins() && getMain().foundMaliciousPlugins()) {
            getMain().zipMaliciousPlugins();
            List<File> fileToRemove = files.entrySet().stream()
                    .filter(e -> Objects.equals(e.getValue(), CheckResult.IS_MALICIOUS))
                    .map(Map.Entry::getKey)
                    .collect(Collectors.toList());
            files.keySet().removeAll(fileToRemove);
            fileView.getItems().removeAll(fileToRemove.stream()
                    .map(File::getName)
                    .collect(Collectors.toList()));
        }

        fileView.setCellFactory(stringListView -> new ListCell<String>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                    setText(null);
                    setStyle(null);
                    return;
                }

                File file = new File(dir, item);
                CheckResult result = files.get(file);
                if(result == null) return;
                boolean selected = fileView.getSelectionModel().getSelectedItems().contains(item);
                switch (result){
                    case IS_SAFE:
                        if(selected) setStyle("-fx-background-color: #168c6e;-fx-text-fill: #fff;");
                        else setStyle("-fx-background-color: #1eb28d;-fx-text-fill: #fff;");
                        break;
                    case IS_MALICIOUS:
                        if(selected) setStyle("-fx-background-color: #ff4c4c;-fx-text-fill: #fff;");
                        else setStyle("-fx-background-color: #ff6666;-fx-text-fill: #fff;");
                        break;
                    case GOT_ERROR:
                        if(selected) setStyle("-fx-background-color: #9b9414;-fx-text-fill: #fff;");
                        else setStyle("-fx-background-color: #bab21d;-fx-text-fill: #fff;");
                        break;
                }
                setText(item);
            }
        });
    }

    @FXML
    public void start(){
        if(startBtn.isDisable()) return;
        File dir = getMain().getScanDirectory();
        if(!dir.exists()) return;

        progress.setProgress(0);
        disableButtons(true);

        fileView.setCellFactory(stringListView -> new ListCell<String>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                    setText(null);
                    return;
                }
                setStyle("-fx-background-color: #fff;");
                setStyle("-fx-text-fill: black;");
                setStyle("-fx-highlight-text-fill: black;");
                setText(item);
            }
        });

        processedFileCounter = 0;
        new Thread(() -> {
            files.entrySet().forEach(entry -> {
                File file = entry.getKey();
                CheckResult result = getMain().getCheckManager().process(file);
                entry.setValue(result);
                FxGuiUtil.runSync(() -> {
                    progress.setProgress(1d/files.size()*(++processedFileCounter));
                    if(result == CheckResult.GOT_ERROR) FxGuiUtil.err("Got error while checking "+file.getName());
                });
            });
            FxGuiUtil.runSync(() -> onScanFinished(dir));
        }).start();
    }

    @FXML
    public void openSettings(){
        if(startBtn.isDisable()) return;
        GuiLauncher.openSettings();
    }

    @FXML
    public void openDir(){
        File dir = getMain().getScanDirectory();
        if(!dir.exists()) return;
        try {
            Desktop.getDesktop().open(dir);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    public void removeFiles(){
        if(startBtn.isDisable()) return;
        FxGuiUtil.ask("Are you sure?", accept -> {
            if(!accept) return;
            File dir = getMain().getScanDirectory();
            if(!dir.exists()) return;
            fileView.getSelectionModel().getSelectedItems().forEach(s -> {
                if(new File(dir, s).delete()) fileView.getItems().remove(s);
                else FxGuiUtil.err("Unable to remove "+s);
            });
        });
    }
}
