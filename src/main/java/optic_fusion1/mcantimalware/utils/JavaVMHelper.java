/*
 * Copyright 2017 Sam Sun <github-contact@samczsun.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package optic_fusion1.mcantimalware.utils;

import com.javadeobfuscator.javavm.VirtualMachine;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;

public class JavaVMHelper implements Opcodes {
    private static List<byte[]> loadBytes(File input) {
        List<byte[]> result = new ArrayList<>();

        if (input.getName().endsWith(".jar")) {
            try (ZipFile zipIn = new ZipFile(input)) {
                Enumeration<? extends ZipEntry> e = zipIn.entries();
                while (e.hasMoreElements()) {
                    ZipEntry next = e.nextElement();
                    if (next.getName().endsWith(".class")) {
                        try (InputStream in = zipIn.getInputStream(next)) {
                            result.add(IOUtils.toByteArray(in));
                        } catch (IllegalArgumentException x) {
                            System.out.println("Could not parse " + next.getName() + " (is it a class?)");
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace(System.out);
            }
        } else if (input.getName().endsWith(".class")) {
            try (InputStream in = new FileInputStream(input)) {
                result.add(IOUtils.toByteArray(in));
            } catch (Throwable x) {
                System.out.println("Could not parse " + input.getName() + " (is it a class?)");
            }
        }

        return result;
    }

    private static File javaLib(String name) {
        return new File(System.getProperty("java.home") + File.separator + "lib" + File.separator + name);
    }

    private static File javaLibExt(String name) {
        return new File(System.getProperty("java.home") + File.separator + "lib" + File.separator + "ext"
                + File.separator + name);
    }

    private static File javaLibSecurity(String name) {
        return new File(System.getProperty("java.home") + File.separator + "lib" + File.separator + "security"
                + File.separator + name);
    }

    public static VirtualMachine newVirtualMachine(File input, Collection<ClassNode> classes,
                                                   Map<ClassNode, ClassReader> readers) {
        List<byte[]> jvmFiles = new ArrayList<>();
        jvmFiles.addAll(loadBytes(javaLib("rt.jar")));
        jvmFiles.addAll(loadBytes(javaLib("jce.jar")));
        jvmFiles.addAll(loadBytes(javaLib("jsse.jar")));
        jvmFiles.addAll(loadBytes(javaLibExt("sunjce_provider.jar")));
        jvmFiles.addAll(loadBytes(javaLibExt("sunec.jar")));
        jvmFiles.addAll(loadBytes(javaLibExt("sunmscapi.jar")));

        VirtualMachine vm = new VirtualMachine(jvmFiles);
        vm.fullInitialization();
        vm.getFilesystem().map(new File("\\C:\\java_home_dir\\lib\\security\\java.security"),
                javaLibSecurity("java.security"));
        vm.getFilesystem().map(new File("\\C:\\java_home_dir\\lib\\jce.jar"), javaLib("jce.jar"));
        vm.getFilesystem().map(new File("\\C:\\java_home_dir\\lib\\security\\US_export_policy.jar"),
                javaLibSecurity("US_export_policy.jar"));
        vm.getFilesystem().map(new File("\\C:\\java_home_dir\\lib\\security\\local_policy.jar"),
                javaLibSecurity("local_policy.jar"));
        vm.getFilesystem().map(new File("\\currentjar.zip"), input);
        vm.classpath(classes);
        readers.forEach((k, v) -> vm.registerClass(v, k));

        return vm;
    }
}
