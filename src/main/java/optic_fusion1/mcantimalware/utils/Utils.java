package optic_fusion1.mcantimalware.utils;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public final class Utils {

    private static Main main = AntiMalware.getMain();
    private static CustomLogger logger = main.getLogger();

    private Utils() {
    }

    public static InputStream getResource(String filename) {
        if (filename == null) {
            throw new IllegalArgumentException("filename cannot be null");
        }
        InputStream input = Main.class.getClassLoader().getResourceAsStream(filename);
        if (input == null) {
            if (main.shouldLogExceptions()) {
                logger.warn("Couldn't get resource " + filename);
            }
            return null;
        }
        return input;
    }

    public static void notNull(Object o, String message) {
        if (o == null) {
            throw new NullPointerException(message);
        }
    }

    public static void notEmpty(String s, String errorMessage) {
        if (s.isEmpty()) {
            throw new IllegalArgumentException(errorMessage);
        }
    }

    public static void isTrue(boolean expression, String errorMessage) {
        if (!expression) {
            throw new IllegalArgumentException(errorMessage);
        }
    }

    public static boolean moveFile(String sourcePath, String targetPath) {
        boolean fileMoved = true;
        try {
            Files.move(Paths.get(sourcePath), Paths.get(targetPath), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            fileMoved = false;
        }
        return fileMoved;
    }

    public static synchronized void loadLibrary(java.io.File jar) {
        try {
            /*We are using reflection here to circumvent encapsulation; addURL is not public*/
            java.net.URLClassLoader loader = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
            java.net.URL url = jar.toURI().toURL();
            /*Disallow if already loaded*/
            for (URL it : Arrays.asList(loader.getURLs())) {
                if (it.equals(url)) {
                    return;
                }
            }
            Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
            method.setAccessible(true);
            /*promote the method to public access*/
            method.invoke(loader, new Object[]{url});
        } catch (NoSuchMethodException | IllegalAccessException | MalformedURLException | InvocationTargetException e) {
            if (main.shouldLogExceptions()) {
                logger.exception(e);
            }
        }
    }

}
