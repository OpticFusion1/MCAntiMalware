package optic_fusion1.mcantimalware.utils;

import co.aikar.taskchain.TaskChain;
import optic_fusion1.mcantimalware.utils.taskchain.AntiMalwareChainFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.CompletableFuture;

/**
 * Just a simple update checker for the anti malware
 *
 * @author MrIvanPlays
 * @since 4.15
 */
public class UpdateChecker {

    private String currentVersion = "4.15";
    private int resourceId = 64982;

    private String fetchSpigotVersion() throws IOException {
        URL requestUrl = new URL("https://api.spigotmc.org/legacy/update.php?resource=" + resourceId);
        HttpURLConnection connection = (HttpURLConnection) requestUrl.openConnection();
        connection.setRequestMethod("GET");
        connection.addRequestProperty("User-Agent", "MCAntiMalware " + currentVersion + " update checker");

        return new BufferedReader(new InputStreamReader(connection.getInputStream())).readLine();
    }

    public int getResourceId() {
        return resourceId;
    }

    public CompletableFuture<FetchResult> request(AntiMalwareChainFactory chainFactory) {
        CompletableFuture<FetchResult> future = new CompletableFuture<>();
        TaskChain<FetchResult> chain = chainFactory.newSharedChain("Update request");
        chain.async(() -> {
            try {
                chain.setTaskData("spigot-version", fetchSpigotVersion());
            } catch (IOException e) {
                chain.setTaskData("exception", e);
            }
        }).sync(() -> {
            if (chain.getTaskData("exception") != null) {
                future.completeExceptionally(chain.getTaskData("exception"));
                return;
            }
            double uploaded = Double.parseDouble(chain.getTaskData("spigot-version"));
            double current = Double.parseDouble(currentVersion);
            if (uploaded > current) {
                future.complete(FetchResult.UPDATE_NEEDED);
            } else if (current > uploaded) {
                future.complete(FetchResult.RUNNING_DEV_BUILD);
            } else if (current == uploaded) {
                future.complete(FetchResult.UP_TO_DATE);
            }
        }).execute();
        return future;
    }

    public enum FetchResult {
        UPDATE_NEEDED,
        RUNNING_DEV_BUILD,
        UP_TO_DATE
    }
}
