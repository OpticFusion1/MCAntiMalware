package optic_fusion1.mcantimalware.utils;

import optic_fusion1.mcantimalware.Main;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.SystemUtils;

import java.io.*;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class ZipUtils {

    private static Path buildPath(final Path root, final Path child) {
        if (root == null) {
            return child;
        } else {
            return Paths.get(root.toString(), child.toString());
        }
    }

    private static void addZipDir(final ZipOutputStream out, final Path root, final Path dir) throws IOException {
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
            for (Path child : stream) {
                Path entry = buildPath(root, child.getFileName());
                if (Files.isDirectory(child)) {
                    addZipDir(out, entry, child);
                } else {
                    out.putNextEntry(new ZipEntry(entry.toString()));
                    Files.copy(child, out);
                    out.closeEntry();
                }
            }
        }
    }

    public static void zipDir(final Path path) throws IOException {
        if (!Files.isDirectory(path)) {
            throw new IllegalArgumentException("Path must be a directory.");
        }

        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(path.toString() + ".zip"));

        try (ZipOutputStream out = new ZipOutputStream(bos)) {
            addZipDir(out, path.getFileName(), path);
        }
    }

    public static void unzip(final File zipFile, final File dir, int skipEntryPath) throws IOException {
        dir.mkdirs();

        Path dirPath = dir.toPath();
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(zipFile));
        ZipInputStream in = new ZipInputStream(bis);
        ZipEntry zipEntry;
        while((zipEntry = in.getNextEntry()) != null){
            Path entryPath = Paths.get(zipEntry.getName());
            if(entryPath.getNameCount() <= skipEntryPath) continue;

            entryPath = entryPath.subpath(skipEntryPath, entryPath.getNameCount());
            Path filePath = buildPath(dirPath, entryPath);
            File file = filePath.toFile();
            if(zipEntry.isDirectory()) file.mkdirs();
            else if(!file.exists()) Files.copy(in, filePath);
        }
        in.closeEntry();
        in.close();
    }
}
