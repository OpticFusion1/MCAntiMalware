package optic_fusion1.mcantimalware.runtimeprotect.plugin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public final class PluginIndexer {

    private static Main main = AntiMalware.getMain();
    private static CustomLogger logger = main.getLogger();

    private PluginIndexer() {
    }

    public static List<IndexedPlugin> indexPlugins(File pluginsFolder) {
        List<IndexedPlugin> indexedPlugins = new ArrayList<>();
        File[] files = pluginsFolder.listFiles();
        for (File file : files) {
            if (file.isDirectory() || !file.getName().endsWith(".jar")) {
                continue;
            }
            try {
                ZipFile zipFile = new ZipFile(file);
                ZipEntry zipEntry = zipFile.getEntry("plugin.yml");
                if (zipEntry == null) {
                    logger.info("Couldn't index " + file.getName() + " is it a valid plugin?");
                    continue;
                }
                FileConfiguration pluginYml = YamlConfiguration.loadConfiguration(zipFile.getInputStream(zipEntry));
                if (!pluginYml.isSet("name")) {
                    logger.info(file.getName() + " is missing the \"name\" part of the config, is it a valid plugin?");
                    continue;
                }
                if (!pluginYml.isSet("main")) {
                    logger.info(file.getName() + " is missing the \"main\" part of the config, is it a valid plugin?");
                    continue;
                }
                indexedPlugins.add(new IndexedPlugin(pluginYml, file));
                logger.info("Indexed " + file.getName());
            } catch (IOException ex) {
                if (main.shouldLogExceptions()) {
                    logger.exception(ex);
                }
            }
        }
        logger.info(indexedPlugins.size() + " plugins have been indexed");
        return indexedPlugins;
    }

}
