package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.io.FileDescriptor;
import java.net.InetAddress;
import java.security.Permission;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.RuntimeUtils;

public class AntiMalwareSecurityManager extends DomainAccessController {

    private static final CustomLogger LOGGER = AntiMalware.getLogger();
    private static final boolean SHOULDLOGDEBUGMESSAGES = AntiMalware.shouldLogDebugMessages();

    @Override
    public void checkSecurityAccess(String target) {
    }

    @Override
    public void checkRead(String file, Object context) {
    }

    @Override
    public void checkRead(FileDescriptor fd) {
    }

    @Override
    public void checkRead(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (SHOULDLOGDEBUGMESSAGES && callerInfo != null) {
            LOGGER.info(callerInfo.getPlugin().getJar() + " tried reading " + file);
        }
    }

    @Override
    public void checkPropertyAccess(String key) {
    }

    @Override
    public void checkPermission(Permission perm) {
    }

    @Override
    public void checkPermission(Permission perm, Object context) {
    }

    @Override
    public void checkPackageDefinition(String pkg) {
    }

    @Override
    public void checkPackageAccess(String pkg) {
    }

    @Override
    public void checkMulticast(InetAddress maddr) {
    }

    @Override
    public void checkListen(int port) {
    }

    @Override
    public void checkLink(String lib) {
    }

    @Override
    public void checkExec(String cmd) {
    }

    @Override
    public void checkWrite(FileDescriptor fd) {
    }

    @Override
    public void checkWrite(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (file.contains("MCAntiMalware.jar")) {
                throw new SecurityException(pluginJar + " tried writing to the AntiMalware jar " + pluginJar + " is most likely malicious");
            }
            if (AntiMalware.canUseSpigotMethods() && file.contains(AntiMalware.getMain().getServerJar().toString())) {
                throw new SecurityException(pluginJar + " tried writing to the Server jar " + pluginJar + " is most likely malicious");
            }
            if (file.contains("PluginMetrics.jar")) {
                throw new SecurityException(pluginJar + " tried writing to the PluginMetrics.jar " + pluginJar + " is most likely malicious");
            }
            if (file.contains("RIP UR FILES")) {
                throw new SecurityException(pluginJar + " tried using a known malicious spamming method " + pluginJar + " is most likely malicious");
            }
            if (SHOULDLOGDEBUGMESSAGES) {
                LOGGER.info(pluginJar + " tried writing to " + file);
            }
        }
    }

    @Override
    public void checkExit(int status) {
    }

    @Override
    public void checkDelete(String file) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (file.contains("MCAntiMalware.jar")) {
                throw new SecurityException(pluginJar + " tried deleting the AntiMalware jar");
            }
            if (SHOULDLOGDEBUGMESSAGES) {
                LOGGER.info(pluginJar + " deleted the file " + file);
            }
        }
    }

    @Override
    public void checkConnect(String host, int port, Object context) {
    }

    @Override
    public void checkConnect(String host, int port) {
        CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
        if (callerInfo != null) {
            File pluginJar = callerInfo.getPlugin().getJar();
            if (host.contains("https://2no.co/2Z2NR5")
                    || host.contains("http://www.blackflagtv.de")
                    || host.contains("http://tommyw.cc")
                    || host.contains("https://en1r3se8fpe26.x.pipedream.net/")
                    || host.contains("https://pastebin.com/raw/Him8uqdd")
                    || host.contains("https://thesieutoc.net/")
                    || host.contains("update4life.xyz")
                    || host.contains("https://guckenyt13.wixsite.com/")
                    || host.contains("https://goo.gl/O6WDUX")
                    || host.contains("https://pastebin.com/raw/W9Xj6737")
                    || host.contains("http://tommyw.cc")) {
                throw new SecurityException(pluginJar + " tried connecting to Host: " + host
                        + "Port: " + port + " " + pluginJar + " is most likely malicious");
            }
            if (SHOULDLOGDEBUGMESSAGES) {
                LOGGER.info(pluginJar + " connected to Host: " + host + " Port: " + port);
            }
        }
    }

    @Override
    public void checkAccess(ThreadGroup g) {
    }

    @Override
    public void checkAccess(Thread t) {
    }

    @Override
    public void checkAccept(String host, int port) {
    }

}
