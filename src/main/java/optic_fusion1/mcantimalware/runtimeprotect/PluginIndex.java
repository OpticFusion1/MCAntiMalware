package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public class PluginIndex {

    private final List<IndexedPlugin> plugins = new ArrayList<>();
    private static final CustomLogger LOGGER = AntiMalware.getLogger();
    private static final boolean SHOULDLOGEXCEPTIONS = AntiMalware.shouldLogExceptions();

    public IndexedPlugin getClassOwner(String className) {
        return plugins.stream().filter(plugin
                -> plugin.getClasses().contains(className)).findFirst().orElse(null);
    }

    public IndexedPlugin getPlugin(String name) {
        return plugins.stream().filter(plugin
                -> plugin.getName().equalsIgnoreCase(name)).findFirst().orElse(null);
    }

    public void indexPlugins(File pluginsFolder) {
        if (!pluginsFolder.exists()) {
            throw new RuntimeException(pluginsFolder + " doesn't exist");
        }
        LOGGER.info("Indexing plugins...");
        File[] files = pluginsFolder.listFiles();
        if (files == null) {
            return;
        }
        for (File file : files) {
            if (file.isDirectory() || !file.getName().endsWith(".jar")) {
                continue;
            }
            try {
                ZipFile zipFile = new ZipFile(file);
                Enumeration<? extends ZipEntry> entries = zipFile.entries();
                List<String> pluginClasses = new ArrayList<>();
                String pluginName = null;
                String pluginMainClass = null;
                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();
                    String entryName = entry.getName();
                    if (!entryName.equals("plugin.yml") || !entryName.endsWith(".class")) {
                        continue;
                    }
                    if (entryName.equals("plugin.yml")) {
                        try {
                            FileConfiguration config = YamlConfiguration.loadConfiguration(zipFile.getInputStream(entry));
                            if (!config.isSet("name")) {
                                LOGGER.warn("Invalid plugin " + file.getName()
                                        + " missing 'name' in plugin.yml (or no plugin.yml)");
                                continue;
                            }
                            pluginName = config.getString("name");
                            if (!config.isSet("main")) {
                                LOGGER.warn("Invalid plugin " + file.getName()
                                        + " missing 'main' in plugin.yml (or no plugin.yml)");
                                continue;
                            }
                            pluginMainClass = config.getString("main");
                        } catch (IOException e) {
                            LOGGER.warn("Invalid plugin.yml in " + file.getName());
                        }
                    } else if (entryName.endsWith(".class")) {
                        String className = entryName.replace(".class", "").replace("/", ".");
                        if (className.contains("$")) {
                            className = className.split(Pattern.quote("$"))[0];
                            className = className.split(Pattern.quote("$"))[0];
                        }
                        if (!pluginClasses.contains(className)) {
                            pluginClasses.add(className);
                        }
                    }
                }
                zipFile.close();
                if (pluginClasses.stream().noneMatch(pluginMainClass::equals)) {
                    LOGGER.warn("Invalid plugin " + file.getName() + " class " + pluginMainClass
                            + " is declared as main in plugin.yml but is missing in the JAR");
                    continue;
                }
                plugins.add(new IndexedPlugin(file, pluginClasses, pluginName, pluginMainClass));
                LOGGER.warn("Indexed plugin " + file.getName() + " with name " + pluginName
                        + "Classes: " + pluginClasses.size() + " Main Class: " + pluginMainClass);
            } catch (IOException ex) {
                if (SHOULDLOGEXCEPTIONS) {
                    LOGGER.warn("Failed to index plugin " + file.getName() + ", is it valid?");
                    LOGGER.exception(ex);
                }
            }
            LOGGER.info(plugins.size() + " plugins have been indexed successfully.");
        }
    }
}
