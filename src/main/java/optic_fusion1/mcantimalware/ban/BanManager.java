package optic_fusion1.mcantimalware.ban;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.configuration.ConfigurationSection;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.IOUtils;
import optic_fusion1.mcantimalware.utils.Utils;

public class BanManager {

    private List<PlayerBanEntry> playerBanEntries = new ArrayList<>();
    private List<IpBanEntry> ipBanEntries = new ArrayList<>();
    private static final boolean SHOULDLOGEXCEPTIONS = AntiMalware.shouldLogExceptions();
    private static final CustomLogger LOGGER = AntiMalware.getLogger();

    public void loadBans() {
        File playerBans = new File("banned-players.json");
        try {
            String jsonString = IOUtils.toString(new FileInputStream(playerBans), "UTF-8");
            if (!jsonString.isEmpty()) {
                JsonArray playerBanEntryArray = new JsonParser()
                        .parse(jsonString).getAsJsonArray();
                if (playerBanEntryArray.size() != 0) {
                    for (JsonElement playerBan : playerBanEntryArray) {
                        parse(playerBan.getAsJsonObject(), false);
                    }
                    LOGGER.info("Loaded " + playerBanEntryArray.size() + " player bans");
                }
            }
        } catch (FileNotFoundException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        } catch (IOException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        }
        File ipBans = new File("banned-ips.json");
        try {
            String jsonString = IOUtils.toString(new FileInputStream(ipBans), "UTF-8");
            if (!jsonString.isEmpty()) {
                JsonArray ipBanEntryArray = new JsonParser()
                        .parse(jsonString).getAsJsonArray();
                if (ipBanEntryArray.size() != 0) {
                    for (JsonElement ipBan : ipBanEntryArray) {
                        parse(ipBan.getAsJsonObject(), true);
                    }
                    LOGGER.info("Loaded " + ipBanEntryArray.size() + " ip bans");
                }
            }
        } catch (FileNotFoundException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        } catch (IOException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        }
    }

    public void saveBans() {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonArray playerBans = new JsonArray();
        JsonArray ipBans = new JsonArray();
        playerBanEntries.forEach((entry) -> {
            playerBans.add(entry.asJsonObject());
        });
        ipBanEntries.forEach((entry) -> {
            ipBans.add(entry.asJsonObject());
        });
        try (Writer writer = new FileWriter("banned-players.json")) {
            gson.toJson(playerBans, writer);
        } catch (IOException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        }
        try (Writer writer = new FileWriter("banned-ips.json")) {
            gson.toJson(ipBans, writer);
        } catch (IOException ex) {
            if (SHOULDLOGEXCEPTIONS) {
                LOGGER.exception(ex);
            }
        }
    }

    public void addPlayerBan(PlayerBanEntry entry) {
        playerBanEntries.add(entry);
    }

    public void addIpBan(IpBanEntry entry) {
        ipBanEntries.add(entry);
    }

    public boolean isPlayerBanned(String playerName, String playerUUID) {
        return playerBanEntries.stream().anyMatch((entry) -> (entry.getName().equals(playerName) && entry.getUUID().equals(playerUUID)));
    }

    public boolean isUUIDBanned(String playerUUID) {
        return playerBanEntries.stream().anyMatch((entry) -> (entry.getUUID().equals(playerUUID)));
    }

    public boolean isNameBanned(String playerName) {
        return playerBanEntries.stream().anyMatch((entry) -> (entry.getName().equals(playerName)));
    }

    public boolean isIpBanned(String playerIP) {
        return ipBanEntries.stream().anyMatch((entry) -> (entry.getIP().equals(playerIP)));
    }

    public void autoBan() {
        FileConfiguration config = YamlConfiguration.loadConfiguration(Utils.getResource("banned-players.yml"));
        config.getKeys(false).forEach((key) -> {
            ConfigurationSection section = config.getConfigurationSection(key);
            List<String> uuids = new ArrayList<>();
            if (section.isList("uuid")) {
                uuids = section.getStringList("uuid");
            } else {
                uuids.add(section.getString("uuid"));
            }
            List<String> previousNames = new ArrayList<>();
            if (section.isSet("previous-names")) {
                if (section.isList("previous-names")) {
                    previousNames = section.getStringList("previous-names");
                } else {
                    previousNames.add(section.getString("previous-names"));
                }
            }
            for (String uuid : uuids) {
                if (!isPlayerBanned(key, uuid)) {
                    playerBanEntries.add(new PlayerBanEntry(key, uuid));
                    LOGGER.info("Banned " + key + "(" + uuid + ")");
                }
                if (!previousNames.isEmpty()) {
                    for (String previousName : previousNames) {
                        if (!isPlayerBanned(previousName, uuid)) {
                            playerBanEntries.add(new PlayerBanEntry(previousName, uuid));
                            LOGGER.info("Banned " + key + "(" + uuid + ")");
                        }
                    }
                }
            }
        });
    }

    private void parse(JsonObject object, boolean isIpBan) {
        if (object == null) {
            return;
        }
        String created = object.get("created").getAsString();
        String source = object.get("source").getAsString();
        String expires = object.get("expires").getAsString();
        String reason = object.get("reason").getAsString();
        if (!isIpBan) {
            String uuid = "00000000-0000-0000-0000-000000000000";
            if (object.has("uuid")) {
                uuid = object.get("uuid").getAsString();
            }
            String name = "none";
            if (object.has("name")) {
                name = object.get("name").getAsString();
            }
            if (!name.equals("none") && !uuid.equals("00000000-0000-0000-0000-000000000000")) {
                PlayerBanEntry playerBanEntry = new PlayerBanEntry(name, uuid, created, source, expires, reason);
                if (!playerBanEntries.contains(playerBanEntry)) {
                    playerBanEntries.add(playerBanEntry);
                }
            }
            return;
        }
        String ip = object.get("ip").getAsString();
        IpBanEntry ipBanEntry = new IpBanEntry(ip, created, source, expires, reason);
        if (!ipBanEntries.contains(ipBanEntry)) {
            ipBanEntries.add(ipBanEntry);
        }
    }

}
