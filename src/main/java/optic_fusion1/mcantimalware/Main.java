package optic_fusion1.mcantimalware;

import static java.util.Arrays.asList;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import jline.console.ConsoleReader;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.ConsoleLogManager;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.logging.LoggerOutputStream;
import optic_fusion1.mcantimalware.utils.SpigotUpdater;
import optic_fusion1.mcantimalware.utils.ZipUtils;
import org.apache.commons.io.IOUtils;

public class Main implements Runnable {

    private String version = "3.49.0";
    private SpigotUpdater updater = new SpigotUpdater(64982, version);
    private File scriptsFile = new File("scripts"), malPluginsFolder = new File("malplugins"),
            scanDirectory = new File("plugins");
    private CheckManager checkManager;
    private Path path = Paths.get("");
    private DirectoryWatcherService watcher;
    private boolean zipMaliciousPlugins, showDebugMessages, maliciousPluginsFound, falsePositivesGalore;
    private List<File> maliciousPlugins = new ArrayList<>();
    private String[] args;
    private static CustomLogger logger = CustomLogger.getLogger(Main.class);
    private ConsoleReader reader;
    private FileConfiguration checksumDatabase;
    private boolean scanSingleFile;
    private OptionSet options;

    private void init() {
        AntiMalware.setMain(this);
        logger.getLogger().setLevel(Level.ALL);
        File file = new File("AntiMalware");
        if (!file.exists()) {
            file.mkdirs();
        }
        try {
            this.reader = new ConsoleReader();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConsoleLogManager.init(this);
        try {
            System.setOut(new PrintStream(new LoggerOutputStream(logger.getLogger(), Level.INFO), true, "UTF8"));
            System.setErr(new PrintStream(new LoggerOutputStream(logger.getLogger(), Level.SEVERE), true, "UTF8"));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (scriptsFile.exists()) {
            try {
                ZipUtils.zipDir(scriptsFile.toPath());
            } catch (IOException ex) {
                logger.exception(ex.toString());
            }
        }
        OptionParser parser = new OptionParser() {
            {
                acceptsAll(asList("zipMalPlugins"), "Whether to put every malicious plugin in a .zip file or not")
                        .withRequiredArg().ofType(Boolean.class).defaultsTo(false);
                acceptsAll(asList("debug"), "Whether or not to log debug messages").withRequiredArg()
                        .ofType(Boolean.class).defaultsTo(false)
                        .describedAs("All your debug messages are belong to us");
                acceptsAll(asList("scandirectory"), "Which folder to scan").withRequiredArg()
                        .ofType(String.class).defaultsTo("plugins");
                acceptsAll(asList("scanfile"), "Scan a single file").withRequiredArg()
                        .ofType(String.class);
                acceptsAll(asList("falsepositivesgalore"), "Register a check that 100% false positives")
                        .withRequiredArg().ofType(Boolean.class);
                acceptsAll(asList("help"), "Show the help");
            }
        };
        options = null;
        try {
            options = parser.parse(args);
        } catch (joptsimple.OptionException ex) {
            logger.exception(ex.toString());
        }
        if (options != null) {
            if(options.has("help")){
                try {
                    parser.printHelpOn(System.out);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.exit(0);
            }
            if (options.has("scandirectory")) {
                String scanDirectoryOption = (String) options.valueOf("scandirectory");
                scanDirectory = new File(scanDirectoryOption.equalsIgnoreCase(".") ? "" : scanDirectoryOption);
            }
            if (options.has("zipMalPlugins")) {
                zipMaliciousPlugins = (Boolean) options.valueOf("zipMalPlugins");
            }
            if (options.has("debug")) {
                showDebugMessages = (Boolean) options.valueOf("debug");
            }
            if (options.has("scanfile")) {
                scanSingleFile = true;
            }
            if (options.has("falsepositivesgalore")) {
                falsePositivesGalore = (Boolean) options.valueOf("falsepositivesgalore");
            }
        }
        downloadChecksumDatabase(false);
        checkManager = new CheckManager(this);
        new CheckRegistery(this).registerChecks();
        if (!scanSingleFile) {
            ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
            executor.scheduleWithFixedDelay(() -> {
                downloadChecksumDatabase(true);
            }, 1, 4, TimeUnit.HOURS);
            try {
                watcher = new DirectoryWatcherService(this, scanDirectory.toPath(), true);
            } catch (IOException ex) {
                logger.exception(ex.toString());
            }
        }

        try {
        	if (updater.checkForUpdates())
            		logger.info("You are not running the latest version, checks can be outdated! You are running "+ version +", new version: " + updater.getLatestVersion() + ". You can download the updated version here: " + updater.getResourceURL());
    	} catch (Exception ex) {
            logger.severe("Could not check for updates! Are you connected to the internet?");
    	}
    }

    @Override
    public void run() {
        init();
        if (scanSingleFile) {
            File f = new File((String) options.valueOf("scanfile"));
            if(!f.exists()){
                logger.info((String) options.valueOf("scanfile") + " doesn't exist");
                return;
            }
            checkManager.process(f);
            return;
        }
        if (showDebugMessages) {
            logger.debug("Should zip malicious plugins: " + zipMaliciousPlugins);
            logger.debug("Should print debug messages: " + showDebugMessages);
            logger.debug("Scan Directory: " + scanDirectory.toString());
            logger.debug("Show debug messages: " + showDebugMessages);
        }
        watcher.start();
        watcher.firstRun();
    }

    public File getMalPluginsFolder() {
        return malPluginsFolder;
    }

    public CheckManager getCheckManager() {
        return checkManager;
    }

    public boolean shouldZipMaliciousPlugins() {
        return zipMaliciousPlugins;
    }

    public boolean moveFile(String sourcePath, String targetPath) {
        boolean fileMoved = true;
        try {
            Files.move(Paths.get(sourcePath), Paths.get(targetPath), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            fileMoved = false;
        }
        return fileMoved;
    }

    public void addMaliciousPlugin(File file) {
        maliciousPlugins.add(file);
    }

    public void zipMaliciousPlugins() {
        if (!shouldZipMaliciousPlugins()) {
            return;
        }
        if (!malPluginsFolder.exists()) {
            malPluginsFolder.mkdirs();
        }
        for (Iterator<File> iter = maliciousPlugins.iterator(); maliciousPlugins.iterator().hasNext();) {
            File element = iter.next();
            moveFile(element.getPath(), malPluginsFolder + File.separator + element.getName());
            iter.remove();
        }
        try {
            ZipUtils.zipDir(malPluginsFolder.toPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setMaliciousPluginsFound(boolean foundMaliciousPlugins) {
        maliciousPluginsFound = foundMaliciousPlugins;
    }

    public boolean shouldLogDebugMessages() {
        return showDebugMessages;
    }

    public boolean foundMaliciousPlugins() {
        return maliciousPluginsFound;
    }

    public ConsoleReader getConsoleReader() {
        return reader;
    }

    public CustomLogger getLogger() {
        return logger;
    }

    public File getScanDirectory() {
        return scanDirectory;
    }

    public FileConfiguration getChecksumDatabase() {
        return checksumDatabase;
    }

    public static void main(String[] args) {
        Main main = new Main();
        main.args = args;
        new Thread(main).start();
    }

    private void downloadChecksumDatabase(boolean updateCheckManager) {
        try {
            if (shouldLogDebugMessages()) {
                logger.debug("DATABASE");
                logger.debug(IOUtils.toString(new URL("https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareChecksumList/master/checksums.yml"), "UTF-8"));
            }
            logger.info("Gathering checksum database" + (updateCheckManager ? "(AUTO-UPDATE)" : ""));
            checksumDatabase = YamlConfiguration.loadConfiguration(IOUtils.toInputStream(IOUtils.toString(new URL("https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareChecksumList/master/checksums.yml"), "UTF-8"), "UTF-8"));
            logger.info("Finished gathering checksum database" + (updateCheckManager ? "(AUTO-UPDATE)" : ""));
            if (updateCheckManager) {
                checkManager.reloadChecksumDatabase();
                logger.info("Rescanning due to updated database");
                watcher.scanFiles();
                logger.info("Finished rescanning");
            }
        } catch (MalformedURLException ex) {
            if (shouldLogDebugMessages()) {
                logger.exception(ex);
            }
        } catch (IOException ex) {
            if (shouldLogDebugMessages()) {
                logger.exception(ex);
            }
        }
    }

    public boolean falsePositivesGalore() {
        return falsePositivesGalore;
    }

}
