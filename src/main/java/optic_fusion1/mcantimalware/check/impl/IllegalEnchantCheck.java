package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.utils.EnchantmentMaxLevel;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.IntInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class IllegalEnchantCheck extends BaseCheck {

    public IllegalEnchantCheck(Main main, String name) {
        super(main, name);
    }

    @Override
    public boolean process(String filePath, ZipFile zipFile) {
        try {
            if (isFileBlacklisted(filePath)) {
                return true;
            }
        } catch (IOException ex) {
            if (main.shouldLogExceptions()) {
                logger.exception(ex);
            }
        }
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            String currentName = entry.getName();
            try {
                inputStream = zipFile.getInputStream(entry);
            } catch (IOException ex) {
                if (main.shouldLogExceptions()) {
                    logger.exception(ex);
                }
            }
            if (validClassPath(currentName)) {
                try {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    List<MethodNode> nodes = classNode.methods;
                    for (MethodNode node : nodes) {
                        for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
                            if (abstractInsnNode instanceof MethodInsnNode) {
                                MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
                                if (methodInsnNode.owner.equals("org/bukkit/inventory/ItemStack")) {
                                    if (methodInsnNode.name.equals("addUnsafeEnchantment") && methodInsnNode.desc.equals("(Lorg/bukkit/enchantments/Enchantment;I)V")) {
                                        AbstractInsnNode previousAbstractInsnNode = methodInsnNode.getPrevious();
                                        int enchantmentLevel = 0;
                                        if (previousAbstractInsnNode instanceof IntInsnNode) {
                                            IntInsnNode intInsnNode = (IntInsnNode) previousAbstractInsnNode;
                                            enchantmentLevel = intInsnNode.operand;
                                        } else if (abstractInsnNode.getType() == Opcodes.ICONST_5) {
                                            enchantmentLevel = 5;
                                        }
                                        FieldInsnNode enchantmentField = (FieldInsnNode) previousAbstractInsnNode.getPrevious();
                                        int maxEnchantmentLevel = EnchantmentMaxLevel.valueOf(enchantmentField.name).getMaxLevel();
                                        if (enchantmentLevel > maxEnchantmentLevel) {
                                            addOneToScore();
                                        }
                                    }
                                }
                            } else if (abstractInsnNode instanceof LineNumberNode) {
                                setLine(((LineNumberNode) abstractInsnNode).line);
                            }
                        }
                    }
                } catch (IOException ex) {
                    if (main.shouldLogExceptions()) {
                        logger.exception(ex);
                    }
                }
            }
        }
        return false;
    }

}
