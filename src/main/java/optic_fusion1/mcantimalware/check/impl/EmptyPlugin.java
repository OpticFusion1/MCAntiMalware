package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

public class EmptyPlugin extends BaseCheck {

    public EmptyPlugin(String name) {
        super(name);
    }

    @Override
    public boolean process(String filePath, ZipFile zipFile) {
        if (isPlugin(zipFile)) {
            return handlePlugin(filePath, zipFile);
        }
        return false;
    }

    private boolean handlePlugin(String filePath, ZipFile zipFile) {
        boolean onEnableEmpty = false;
        try {
            String path = filePath;
            if (isFileBlacklisted(path)) {
                return true;
            }
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream = null;
            while (entries.hasMoreElements()) {
                ZipEntry current = entries.nextElement();
                String currentName = current.getName();
                inputStream = zipFile.getInputStream(current);
                if (validClassPath(currentName)) {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    if (classNode.methods.isEmpty()) {
                        return true;
                    }
                    for (MethodNode methodNode : classNode.methods) {
                        if (methodNode.instructions.size() == 4) {
                            if (methodNode.name.equals("onEnable")) {
                                onEnableEmpty = true;
                            }
                            if (methodNode.name.equals("onDisable") && onEnableEmpty) {
                                setClassNodePath(classNode.name);
                                setSourceFilePath(classNode.sourceFile);
                                addToScore(1000);
                                return true;
                            }
                        }
                    }
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException ex) {
                    if (MAIN.shouldLogExceptions()) {
                        LOGGER.exception(ex);
                    }
                }
            }
        } catch (IOException ex) {
            if (MAIN.shouldLogExceptions()) {
                LOGGER.exception(ex);
            }
        }
        return false;
    }

}
