package optic_fusion1.mcantimalware.check.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class Check extends BaseCheck {

    private boolean isPluginYml = false;

    public Check(String name) {
        super(name);
    }

    @Override
    public boolean process(String filePath, ZipFile zipFile) {
        if (isForgeMod(zipFile)) {
            return handleForgeMod(filePath, zipFile);
        }
        if (isPlugin(zipFile)) {
            LOGGER.info(zipFile.getName() + " is a valid plugin");
            return handlePlugin(filePath, zipFile);
        }
        return false;
    }

    private boolean handleForgeMod(String filePath, ZipFile zipFile) {
        String path = MAIN.scanSingleFile() ? filePath : MAIN.getRealTimeScanner().getScanDirectory() + "/" + filePath;
        try {
            if (isFileBlacklisted(path)) {
                return true;
            }
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream = null;
            while (entries.hasMoreElements()) {
                ZipEntry zipEntry = entries.nextElement();
                if (zipEntry.getName().equals("mcmod.info")) {
                    //TODO: Add forge support
                }
            }
        } catch (IOException ex) {
            if (MAIN.shouldLogExceptions()) {
                LOGGER.exception(ex);
            }
        }
        return false;
    }

    private boolean handlePlugin(String filePath, ZipFile zipFile) {
        boolean isMalware = false;
        try {
            String path = filePath;
            if (isFileBlacklisted(path)) {
                return true;
            }
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream = null;
            while (entries.hasMoreElements()) {
                ZipEntry current = entries.nextElement();
                String currentName = current.getName();
                inputStream = zipFile.getInputStream(current);
                if (!blacklistedPluginNames.isEmpty()) {
                    if (isPluginYmlFile(currentName) || isBungeeYmlFile(currentName)) {
                        FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
                        if (config.isSet("name")) {
                            String pluginName = config.getString("name");
                            for (String blacklistedPluginName : blacklistedPluginNames) {
                                if (blacklistedPluginName.equals(pluginName)) {
                                    inputStream.close();
                                    isPluginYml = true;
                                    setClassNodePath(currentName);
                                    isMalware = true;
                                    addOneToScore();
                                    if (shouldDisableMaliciousPlugins) {
                                        if (MAIN.canUseSpigotMethods()) {
                                            Plugin plugin = Bukkit.getPluginManager().getPlugin(pluginName);
                                            if (plugin != null && plugin.isEnabled()) {
                                                plugin.getPluginLoader().disablePlugin(plugin);
                                            }
                                        }
                                        File file = new File(path);
                                        if (!file.renameTo(new File(path, ".disabled"))) {
                                            LOGGER.info("Couldn't completely disable " + pluginName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (!blacklistedAuthors.isEmpty()) {
                    if (isPluginYmlFile(currentName) || isBungeeYmlFile(currentName)) {
                        FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
                        if (config.isSet("author")) {
                            String author = config.getString("author");
                            if (author == null) {
                                return false;
                            }
                            if (blacklistedAuthors.stream().anyMatch((blacklistedAuthor) -> (author.equalsIgnoreCase(blacklistedAuthor)))) {
                                inputStream.close();
                                isPluginYml = true;
                                setClassNodePath(current.getName());
                                isMalware = true;
                                addOneToScore();
                            }
                        }
                        if (config.isSet("authors")) {
                            List<String> authors = config.getStringList("authors");
                            if (authors.equals(blacklistedAuthors)) {
                                inputStream.close();
                                isPluginYml = true;
                                setClassNodePath(currentName);
                                isMalware = true;
                                addToScore(1000);
                            }
                            if (blacklistedAuthors.stream().anyMatch((blacklistedAuthor) -> (authors.contains(blacklistedAuthor)))) {
                                inputStream.close();
                                isPluginYml = true;
                                setClassNodePath(currentName);
                                isMalware = true;
                                addToScore(1000);
                            }
                        }
                    }
                }
                if (validClassPath(currentName)) {
                    LOGGER.info(currentName + " is a valid class");
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    for (String blacklistedClassNode : blacklistedClassPaths) {
                        if (classNode.name.contains(blacklistedClassNode)) {
                            LOGGER.info("Blacklisted Class Node: " + blacklistedClassNode);
                            inputStream.close();
                            setClassNodePath(classNode.name);
                            setSourceFilePath(classNode.sourceFile);
                            isMalware = true;
                            addToScore(1000);
                        }
                    }
                    if (classNodeContainsBlacklistedWord(classNode, blacklistedStrings)) {
                        inputStream.close();
                        setClassNodePath(classNode.name);
                        setSourceFilePath(classNode.sourceFile);
                        isMalware = true;
                        addOneToScore();
                    }
                    List<MethodNode> nodes = classNode.methods;
                    MethodInsnNode method;
                    for (MethodNode methodNode : nodes) {
                        for (AbstractInsnNode insnNode : methodNode.instructions.toArray()) {
                            if (insnNode instanceof MethodInsnNode) {
                                method = (MethodInsnNode) insnNode;
                                for (String blacklistedClassNode : blacklistedClassPaths) {
                                    if (classNode.name.contains(blacklistedClassNode)) {
                                        for (String blacklistedMethodName : blacklistedMethodNames) {
                                            if (method.name.equals(blacklistedMethodName)) {
                                                inputStream.close();
                                                setClassNodePath(classNode.name);
                                                setSourceFilePath(classNode.sourceFile);
                                                isMalware = true;
                                                addToScore(1000);
                                            }
                                        }
                                    }
                                }
                            } else if (insnNode instanceof LineNumberNode) {
                                setLine(((LineNumberNode) insnNode).line);
                            }
                        }
                    }
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException ex) {
                    if (MAIN.shouldLogExceptions()) {
                        LOGGER.exception(ex);
                    }
                }
            }
        } catch (IOException ex) {
            if (MAIN.shouldLogExceptions()) {
                LOGGER.exception(ex);
            }
        }
        if (isPluginYml) {
            setLine(-1);
            setSourceFilePath("");
        }
        return isMalware;
    }

}
