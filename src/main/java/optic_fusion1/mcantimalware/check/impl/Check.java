package optic_fusion1.mcantimalware.check.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.utils.ZipUtils;
import org.apache.commons.codec.digest.DigestUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class Check extends BaseCheck {

    public Check(Main main, String name) {
        super(main, name);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        if (isZipFile(fileName)) {
            handleZipFile(fileName);
            return true;
        }
        if (isMCModInfoFile(fileName)) {
            return handleForgeMod(fileName, zipFile);
        }
        if (isBungeeYmlFile(fileName) || isPluginYmlFile(fileName)) {
            return handlePlugin(fileName, zipFile);
        }
        return false;
    }

    private boolean isFileBlacklisted(String path) throws FileNotFoundException, IOException {
        if (checksumIsBlacklisted(DigestUtils.sha1Hex(new FileInputStream(new File(path))))) {
            logger.malicious(currentSessionTranslations.getMessage("checksum_blacklisted", path));
            return true;
        }
        return false;
    }

    private void handleZipFile(String fileName) {
        File unzipDir = new File("AntiMalware", "unzipped");
        if (!unzipDir.exists()) {
            unzipDir.mkdirs();
        }
        File tempDir = new File(unzipDir, UUID.randomUUID().toString());
        if (!tempDir.exists()) {
            tempDir.mkdir();
        }
        try {
            //TODO: Auto-Delete temp dir after scanning
            ZipUtils.unZipFile(fileName, tempDir.getAbsolutePath());
            AntiMalware.getMain().getRealTimeScanner().getScanner().scanDirectory(tempDir);
        } catch (ZipException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.debug(ex);
            }
        }
    }

    private boolean handleForgeMod(String fileName, ZipFile zipFile) {
        String path = main.scanSingleFile() ? fileName : main.getRealTimeScanner().getScanDirectory() + "/" + fileName;
        try {
            if (isFileBlacklisted(path)) {
                return true;
            }
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream = null;
            while (entries.hasMoreElements()) {
                ZipEntry zipEntry = entries.nextElement();
                if (zipEntry.getName().equals("mcmod.info")) {
                    //nothing yet
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Check.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private boolean handlePlugin(String fileName, ZipFile zipFile) {
        boolean isMalware = false;
        try {
            String path = main.scanSingleFile() ? fileName : main.getRealTimeScanner().getScanDirectory() + "/" + fileName;
            if (isFileBlacklisted(path)) {
                return true;
            }
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream = null;
            while (entries.hasMoreElements()) {
                ZipEntry current = entries.nextElement();
                inputStream = zipFile.getInputStream(current);
                if (!blacklistedAuthors.isEmpty()) {
                    if (isPluginYmlFile(current.getName()) || isBungeeYmlFile(current.getName())) {
                        FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
                        if (config.isSet("author")) {
                            String author = config.getString("author");
                            if (blacklistedAuthors.stream().anyMatch((blacklistedAuthor) -> (author.equalsIgnoreCase(blacklistedAuthor)))) {
                                inputStream.close();
                                setClassNodePath(current.getName());
                                isMalware = true;
                                addOneToChanceOfBeingMalware();
                            }
                        }
                        if (config.isSet("authors")) {
                            List<String> authors = config.getStringList("authors");
                            if (authors.equals(blacklistedAuthors)) {
                                inputStream.close();
                                setClassNodePath(current.getName());
                                isMalware = true;
                                addToChanceOfBeingMalware(1000);
                            }
                            if (blacklistedAuthors.stream().anyMatch((blacklistedAuthor) -> (authors.contains(blacklistedAuthor)))) {
                                inputStream.close();
                                setClassNodePath(current.getName());
                                isMalware = true;
                                addToChanceOfBeingMalware(1000);
                            }
                        }
                    }
                }
                if (validClassPath(current.getName())) {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    for (String blacklistedClassNode : blacklistedClassPaths) {
                        if (classNode.name.equals(blacklistedClassNode)) {
                            inputStream.close();
                            setClassNodePath(classNode.name);
                            setSourceFilePath(classNode.sourceFile);
                            isMalware = true;
                            addToChanceOfBeingMalware(1000);
                        }
                    }
                    if (classNodeContainsBlacklistedWord(classNode, blacklistedStrings)) {
                        inputStream.close();
                        setClassNodePath(classNode.name);
                        setSourceFilePath(classNode.sourceFile);
                        isMalware = true;
                        addOneToChanceOfBeingMalware();
                    }
                    List<MethodNode> nodes = classNode.methods;
                    MethodInsnNode method;
                    for (MethodNode methodNode : nodes) {
                        for (AbstractInsnNode insnNode : methodNode.instructions.toArray()) {
                            if (insnNode instanceof MethodInsnNode) {
                                method = (MethodInsnNode) insnNode;
                                for (String blacklistedClassNode : blacklistedClassPaths) {
                                    if (classNode.superName.contains(blacklistedClassNode)) {
                                        for (String blacklistedMethodName : blacklistedMethodNames) {
                                            if (method.name.equals(blacklistedMethodName)) {
                                                inputStream.close();
                                                setClassNodePath(classNode.name);
                                                setSourceFilePath(classNode.sourceFile);
                                                isMalware = true;
                                                addToChanceOfBeingMalware(1000);
                                            }
                                        }
                                    }
                                }
                            } else if (insnNode instanceof LineNumberNode) {
                                setLine(((LineNumberNode) insnNode).line);
                            }
                        }
                    }
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException ex) {
                    logger.exception(ex);
                }
            }
        } catch (IOException ex) {
            logger.exception(ex);
        }
        return isMalware;
    }

}
