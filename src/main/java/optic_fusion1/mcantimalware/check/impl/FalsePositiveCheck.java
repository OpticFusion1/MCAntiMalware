package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InvokeDynamicInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

// TODO: have it properly set setClassNodePath if something possibly malicious was found
public class FalsePositiveCheck extends BaseCheck {

    private boolean foundSuspiciousCode;

    public FalsePositiveCheck(Main main, String name) {
        super(main, name);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            ZipEntry current = entries.nextElement();
            try {
                inputStream = zipFile.getInputStream(current);
                if (validClassPath(current.getName())) {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    List<MethodNode> nodes = classNode.methods;
                    MethodInsnNode method;
                    for (MethodNode methodNode : nodes) {
                        for (AbstractInsnNode insnNode : methodNode.instructions.toArray()) {
                            if (insnNode instanceof InvokeDynamicInsnNode) {
                                processInvokeDynamics(insnNode);
                            } else if (insnNode instanceof MethodInsnNode) {
                                method = (MethodInsnNode) insnNode;
                                if (method.owner.equals("java/net/URL") || method.owner.equals("java/net/Socket")) {
                                    processInternetStuff(method);
                                }
                                if (method.owner.equals("java/io/File")) {
                                    processFileStuff(method);
                                } else if (method.owner.equals("java/lang/reflect/Method")) {
                                    processReflectionStuff(method);
                                }
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                if (main.shouldLogDebugMessages()) {
                    logger.exception(ex);
                }
            }
        }
        return foundSuspiciousCode;
    }

    private void processInternetStuff(MethodInsnNode method) {
        if (method.name.equals("openConnection") && method.desc.equals("()Ljava/net/URLConnection;")) {
            foundSuspiciousCode = true;
        }
        if (method.name.equals("openConnection") && method.desc.equals("(Ljava/net/Proxy;)Ljava/net/URLConnection;")) {
            foundSuspiciousCode = true;
        }
        if (method.name.equals("openStream") && method.desc.equals("()Ljava/io/InputStream;")) {
            foundSuspiciousCode = true;
        }
        if (method.name.equals("getOutputStream") && method.desc.equals("()Ljava/io/OutputStream;")) {
            foundSuspiciousCode = true;
        }
    }

    private void processInvokeDynamics(AbstractInsnNode insn) {
        if (!((InvokeDynamicInsnNode) insn).bsm.getOwner().equals("java/lang/invoke/LambdaMetafactory;")) {
            foundSuspiciousCode = true;
        }
    }

    private void processFileStuff(MethodInsnNode method) {
        if (method.name.equals("createNewFile") && method.desc.equals("()Z")) {
            foundSuspiciousCode = true;
        } else if (method.name.equals("renameTo") && method.desc.equals("(Ljava/io/File;)Z")) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("delete") && method.desc.equals("()Z")) || (method.name.equals("deleteOnExit") && method.desc.equals("()V"))) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("mkdir") || method.name.equals("mkdirs")) && method.desc.equals("()Z")) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("list") && (method.desc.equals("()[Ljava/lang/String;") || method.desc.equals("(Ljava/io/FilenameFilter;)[Ljava/lang/String;"))) || (method.name.equals("listFiles") && (method.desc.equals("()[Ljava/io/File;") || method.desc.equals("(Ljava/io/FileFilter;)[Ljava/io/File;") || method.desc.equals("(Ljava/io/FilenameFilter;)[Ljava/io/File;"))) || (method.name.equals("listRoots") && method.desc.equals("()[Ljava/io/File;"))) {
            foundSuspiciousCode = true;
        }
    }

    private void processReflectionStuff(MethodInsnNode method) {
        if (method.name.equals("invoke") && method.desc.equals("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;")) {
            foundSuspiciousCode = true;
        }
    }

}
