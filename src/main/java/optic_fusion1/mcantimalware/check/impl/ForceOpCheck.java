package optic_fusion1.mcantimalware.check.impl;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.utils.ByteCodeUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.*;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class ForceOpCheck extends BaseCheck {

    public ForceOpCheck(Main main, String name) {
        super(main, name);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            ZipEntry current = entries.nextElement();
            try {
                inputStream = zipFile.getInputStream(current);
                if (validClassPath(current.getName())) {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    List<MethodNode> nodes = classNode.methods;
                    for (MethodNode node : nodes) {
                        for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
                            if (abstractInsnNode instanceof MethodInsnNode) {
                                MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
                                if (methodInsnNode.owner.equals("org/bukkit/entity/Player") || methodInsnNode.owner.equals("org/bukkit/OfflinePlayer") || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")) {
                                    if (methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
                                        AbstractInsnNode previous = methodInsnNode.getPrevious();
                                        if (ByteCodeUtils.matches(previous, 1)) {
                                            setClassNodePath(classNode.name);
                                            setSourceFilePath(classNode.sourceFile);
                                            inputStream.close();
                                            return true;
                                        }
                                    }
                                }
                            } else if (abstractInsnNode instanceof LineNumberNode) {
                                setLine(((LineNumberNode) abstractInsnNode).line);
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(DirectLeaksCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(BaseCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

}
