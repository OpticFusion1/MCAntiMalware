package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodNode;

public class RegexCheck extends BaseCheck {

    private Pattern pattern;

    public RegexCheck(Main main, String name) {
        super(main, name);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            ZipEntry current = entries.nextElement();
            try {
                inputStream = zipFile.getInputStream(current);
                if (validClassPath(current.getName())) {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode classNode = new ClassNode();
                    reader.accept(classNode, 0);
                    List<MethodNode> nodes = classNode.methods;
                    for (MethodNode node : nodes) {
                        for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                            if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
                                String string = ((LdcInsnNode) insnNode).cst.toString();
                                Matcher matcher = pattern.matcher(string);
                                if (matcher.find()) {
                                    inputStream.close();
                                    setClassNodePath(classNode.name);
                                    setSourceFilePath(classNode.sourceFile);
                                    return true;
                                }
                            } else if (insnNode instanceof LineNumberNode) {
                                setLine(((LineNumberNode) insnNode).line);
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                logger.exception(ex);
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                logger.exception(ex);
            }
        }
        return false;
    }

    public void setPattern(Pattern pattern) {
        this.pattern = pattern;
    }

    public Pattern getPattern() {
        return pattern;
    }

}
