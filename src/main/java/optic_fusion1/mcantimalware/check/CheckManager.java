package optic_fusion1.mcantimalware.check;

import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public class CheckManager {

    private List<Check> checks = new ArrayList<>();
    private Main main;
    private CustomLogger logger;

    public CheckManager(Main main) {
        this.main = main;
        this.logger = main.getLogger();
    }

    public List<Check> getChecks() {
        return checks;
    }

    public boolean checkExists(String string) {
        return checks.stream().anyMatch((check) -> (check.getName().equalsIgnoreCase(string)));
    }

    public Check getCheck(String string) {
        for (Check check : checks) {
            if (check.getName().equalsIgnoreCase(string)) {
                return check;
            }
        }
        return null;
    }

    public void addCheck(Check check) {
        checks.add(check);
    }

    public boolean processWithCheck(String checkName, String name, File file) {
        Check check = getCheck(checkName);
        if (check == null)
            return false;

        return process(name, file, Collections.singleton(check));
    }

    public boolean process(String name, File file) {
        return process(name, file, checks);
    }

    private boolean process(String name, File file, Collection<Check> checksToProcess){
        logger.info("Checking to see if " + name + " is infected");
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(file);
        } catch (IOException ex) {
            logger.exception(ex.getMessage());
            return false;
        }
        if (zipFile == null) {
            return false;
        }
        for (Check check : checksToProcess)
            process(name, file, zipFile, check);

        try {
            zipFile.close();
        } catch (IOException ex) {
            logger.exception(ex.toString());
        }
        return false;
    }

    private boolean process(String name, File file, ZipFile zipFile, Check check){

        logger.info("Checking if " + name + " is infected with " + check.getName() + "(" + check.getType() + ")");
        if (check.process(name, zipFile)) {
            String fullCheckName = check.getFileName().isEmpty() ? "" : " (" + check.getFileName() + ")";
            String fullFileName = name + fullCheckName;
            logger.malicious(fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ") Class Path: " + check.getClassNodePath());
            if (SystemTray.isSupported()) {
                SystemTray tray = SystemTray.getSystemTray();
                Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
                TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
                trayIcon.setImageAutoSize(true);
                trayIcon.setToolTip(fullFileName + " MIGHT be infected");
                try {
                    tray.add(trayIcon);
                    trayIcon.displayMessage("Malware Detected", fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ") Class Path: " + check.getClassNodePath(), MessageType.WARNING);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            if (main.shouldZipMaliciousPlugins()) {
                if (!main.foundMaliciousPlugins()) {
                    main.setMaliciousPluginsFound(true);
                }
                main.addMaliciousPlugin(file);
            }
        } else {
            String fullCheckName = check.getFileName().isEmpty() ? "" : " (" + check.getFileName() + ")";
            String fullFileName = name + fullCheckName;
            logger.info(
                    fullFileName + " MIGHT not be infected with " + check.getName() + "(" + check.getType() + ")");
        }

        return false;
    }

}
