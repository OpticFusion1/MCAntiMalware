package optic_fusion1.mcantimalware.check;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.impl.CashPloitCheck;
import optic_fusion1.mcantimalware.check.impl.Check;
import optic_fusion1.mcantimalware.check.impl.DirectLeaksCheck;
import optic_fusion1.mcantimalware.check.impl.ForceOpCheck;
import optic_fusion1.mcantimalware.check.impl.NightVisionPlusCheck;
import optic_fusion1.mcantimalware.check.impl.RegexCheck;
import optic_fusion1.mcantimalware.configuration.ConfigurationSection;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.Utils;

public class CheckRegistery {

    private CheckManager checkManager;
    private Main main;
    private CustomLogger logger;
    private FileConfiguration checkDatabase;

    public CheckRegistery(Main main) {
        this.main = main;
        this.logger = main.getLogger();
        this.checkManager = main.getCheckManager();
        checkDatabase = main.getCheckDatabase();
    }

    public void reloadCheckDatabase() {
        logger.info("Updating local Check database");

        checkDatabase = main.getCheckDatabase();
        logger.info("Finished updating local Check database");
    }

    public void registerChecks() {
        logger.info("Registering checks");
        if (checkDatabase == null) {
            checkDatabase = main.getCheckDatabase();
            if (checkDatabase == null) {
                InputStream databaseInputStream = Utils.getResource("database.yml");
                checkDatabase = YamlConfiguration.loadConfiguration(databaseInputStream);
            }
        }
        for (String key : checkDatabase.getKeys(false)) {
            if (main.shouldLogDebugMessages()) {
                logger.debug("Registering check " + key);
            }
            ConfigurationSection section = checkDatabase.getConfigurationSection(key);
            BaseCheck check = null;
            String type = "normal";
            if (section.isSet("type")) {
                type = section.getString("type");
                if (type.equals("cashploit")) {
                    check = new CashPloitCheck(main, key);
                }
                if (type.equals("directleaks")) {
                    check = new DirectLeaksCheck(main, key);
                }
                if (type.equals("forceop")) {
                    check = new ForceOpCheck(main, key);
                }
                if (type.equals("nightvisionplugin")) {
                    check = new NightVisionPlusCheck(main, key);
                }
                if (type.equals("regex")) {
                    check = new RegexCheck(main, key);
                }
            }
            if (check == null) {
                check = new Check(main, key);
            }
            if (section.isSet("blacklisted-plugin-names")) {
                if (section.isList("blacklisted-plugin-names")) {
                    check.setBlacklistedPluginNames(section.getStringList("blacklisted-plugin-names"));
                } else {
                    List<String> blacklistedPluginNames = new ArrayList<>();
                    blacklistedPluginNames.add(section.getString("blacklisted-plugin-names"));
                    check.setBlacklistedPluginNames(blacklistedPluginNames);
                }
            }
            if (section.isSet("blacklisted-classnodes")) {
                if (section.isList("blacklisted-classnodes")) {
                    check.setBlacklistedClassNodes(section.getStringList("blacklisted-classnodes"));
                } else {
                    List<String> blacklistedClassNodes = new ArrayList<>();
                    blacklistedClassNodes.add(section.getString("blacklisted-classnodes"));
                    check.setBlacklistedClassNodes(blacklistedClassNodes);
                }
            }
            if (section.isSet("blacklisted-strings")) {
                if (section.isList("blacklisted-strings")) {
                    check.setBlacklistedStrings(section.getStringList("blacklisted-strings"));
                } else {
                    List<String> blacklistedStrings = new ArrayList<>();
                    blacklistedStrings.add(section.getString("blacklisted-strings"));
                    check.setBlacklistedStrings(blacklistedStrings);
                }
            }
            if (section.isSet("blacklisted-checksums")) {
                if (section.isList("blacklisted-checksums")) {
                    check.setBlacklistedChecksums(section.getStringList("blacklisted-checksums"));
                } else {
                    List<String> blacklistedChecksums = new ArrayList<>();
                    blacklistedChecksums.add(section.getString("blacklisted-checksums"));
                    check.setBlacklistedChecksums(blacklistedChecksums);
                }
            }
            if (section.isSet("blacklisted-authors")) {
                if (section.isList("blacklisted-authors")) {
                    check.setBlacklistedAuthors(section.getStringList("blacklisted-authors"));
                } else {
                    List<String> blacklistedAuthors = new ArrayList<>();
                    blacklistedAuthors.add(section.getString("blacklisted-authors"));
                    check.setBlacklistedAuthors(blacklistedAuthors);
                }
            }
            if (section.isSet("log-name")) {
                check.setLogName(section.getString("log-name"));
            }
            if (section.isSet("checkType")) {
                check.setCheckType(section.getString("checkType"));
            }
            if (type.equals("regex")) {
                if (section.isSet("pattern")) {
                    ((RegexCheck) check).setPattern(Pattern.compile(section.getString("pattern"), Pattern.MULTILINE));
                }
            }
            if (section.isSet("blacklisted-method-names")) {
                if (section.isList("blacklisted-method-names")) {
                    check.setBlacklistedAuthors(section.getStringList("blacklisted-method-names"));
                } else {
                    List<String> blacklistedAuthors = new ArrayList<>();
                    blacklistedAuthors.add(section.getString("blacklisted-method-names"));
                    check.setBlacklistedAuthors(blacklistedAuthors);
                }
            }
            checkManager.addCheck(check);
        }
        logger.info("Registered " + checkManager.getChecks().size() + " checks");
    }

}
