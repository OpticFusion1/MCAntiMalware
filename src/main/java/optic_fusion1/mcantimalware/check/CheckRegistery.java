package optic_fusion1.mcantimalware.check;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.impl.CashPloitCheck;
import optic_fusion1.mcantimalware.check.impl.Check;
import optic_fusion1.mcantimalware.check.impl.DirectLeaksCheck;
import optic_fusion1.mcantimalware.check.impl.EmptyPlugin;
import optic_fusion1.mcantimalware.check.impl.ForceOpCheck;
import optic_fusion1.mcantimalware.check.impl.IllegalEnchantCheck;
import optic_fusion1.mcantimalware.check.impl.NightVisionPlusCheck;
import optic_fusion1.mcantimalware.configuration.ConfigurationSection;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.translations.TranslationFile;
import optic_fusion1.mcantimalware.utils.Utils;

public class CheckRegistery {

    private final CheckManager checkManager;
    private final Main main;
    private final CustomLogger logger;
    private FileConfiguration checkDatabase;
    private final TranslationFile currentSessionTranslations;

    public CheckRegistery(Main main) {
        this.main = main;
        this.logger = main.getLogger();
        this.checkManager = main.getCheckManager();
        checkDatabase = main.getCheckDatabase();
        currentSessionTranslations = main.getTranslations();
    }

    public void reloadCheckDatabase() {
        logger.info(currentSessionTranslations.getMessage("local_check_database_update"));
        checkDatabase = main.getCheckDatabase();
        logger.info(currentSessionTranslations.getMessage("local_check_database_updated"));
    }

    public void registerChecks() {
        logger.info(currentSessionTranslations.getMessage("registering_checks"));
        if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
            checkDatabase = main.getCheckDatabase();
            if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
                InputStream databaseInputStream = Utils.getResource("database.yml");
                checkDatabase = YamlConfiguration.loadConfiguration(databaseInputStream);
                if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
                    logger.info(currentSessionTranslations.getMessage("check_database_not_found"));
                    System.exit(0);
                }
            }
        }
        logger.info(checkDatabase.getKeys(false).size() + " keys");
        checkDatabase.getKeys(false).stream().map((key) -> {
            if (main.shouldLogDebugMessages()) {
                logger.debug(currentSessionTranslations.getMessage("registering_check", key));
            }
            return key;
        }).map((key) -> {
            ConfigurationSection section = checkDatabase.getConfigurationSection(key);
            BaseCheck check = null;
            if (section.isSet("type")) {
                String type = section.getString("type");
                if (type.equals("cashploit")) {
                    check = new CashPloitCheck(main, key);
                }
                if (type.equals("directleaks")) {
                    check = new DirectLeaksCheck(main, key);
                }
                if (type.equals("forceop")) {
                    check = new ForceOpCheck(main, key);
                }
                if (type.equals("nightvisionplugin")) {
                    check = new NightVisionPlusCheck(main, key);
                }
                if (type.equals("emptyplugin")) {
                    check = new EmptyPlugin(main, key);
                }
                if (type.equals("illegalenchant")) {
                    check = new IllegalEnchantCheck(main, key);
                }
            }
            if (check == null) {
                check = new Check(main, key);
            }
            if (section.isSet("blacklisted-classpaths")) {
                if (section.isList("blacklisted-classpaths")) {
                    check.setBlacklistedClassPaths(section.getStringList("blacklisted-classpaths"));
                } else {
                    List<String> blacklistedClassNodes = new ArrayList<>();
                    blacklistedClassNodes.add(section.getString("blacklisted-classpaths"));
                    check.setBlacklistedClassPaths(blacklistedClassNodes);
                }
            }
            if (section.isSet("blacklisted-strings")) {
                if (section.isList("blacklisted-strings")) {
                    check.setBlacklistedStrings(section.getStringList("blacklisted-strings"));
                } else {
                    List<String> blacklistedStrings = new ArrayList<>();
                    blacklistedStrings.add(section.getString("blacklisted-strings"));
                    check.setBlacklistedStrings(blacklistedStrings);
                }
            }
            if (section.isSet("blacklisted-checksums")) {
                if (section.isList("blacklisted-checksums")) {
                    check.setBlacklistedChecksums(section.getStringList("blacklisted-checksums"));
                } else {
                    List<String> blacklistedChecksums = new ArrayList<>();
                    blacklistedChecksums.add(section.getString("blacklisted-checksums"));
                    check.setBlacklistedChecksums(blacklistedChecksums);
                }
            }
            if (section.isSet("blacklisted-authors")) {
                if (section.isList("blacklisted-authors")) {
                    check.setBlacklistedAuthors(section.getStringList("blacklisted-authors"));
                } else {
                    List<String> blacklistedAuthors = new ArrayList<>();
                    blacklistedAuthors.add(section.getString("blacklisted-authors"));
                    check.setBlacklistedAuthors(blacklistedAuthors);
                }
            }
            if (section.isSet("log-name")) {
                check.setLogName(section.getString("log-name"));
            }
            if (section.isSet("checkType")) {
                check.setCheckType(section.getString("checkType"));
            }
            if (section.isSet("blacklisted-method-names")) {
                if (section.isList("blacklisted-method-names")) {
                    check.setBlacklistedAuthors(section.getStringList("blacklisted-method-names"));
                } else {
                    List<String> blacklistedAuthors = new ArrayList<>();
                    blacklistedAuthors.add(section.getString("blacklisted-method-names"));
                    check.setBlacklistedAuthors(blacklistedAuthors);
                }
            }
            return check;
        }).map((check) -> {
            check.setThreshold(10);
            return check;
        }).forEachOrdered((check) -> {
            checkManager.addCheck(check);
        });
        logger.info(currentSessionTranslations.getMessage("registered_checks", checkManager.getChecks().size()));
    }

}
