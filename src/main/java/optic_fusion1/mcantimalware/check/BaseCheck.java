package optic_fusion1.mcantimalware.check;

import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;

public abstract class BaseCheck {

    private String name = "";
    public Main main = null;
    public CustomLogger logger = null;
    private String classNodePath = "";
    private String logName = "";
    private String checkType = "";
    private String fileName = "";
    public List<String> blacklistedMethodNames = new ArrayList<>();
    public List<String> blacklistedAuthors = new ArrayList<>();
    public List<String> blacklistedChecksums = new ArrayList<>();
    public List<String> blacklistedClassNodes = new ArrayList<>();
    public List<String> blacklistedStrings = new ArrayList<>();
    public List<String> blacklistedPluginNames = new ArrayList<>();
    public List<String> blacklistedClassNames = new ArrayList<>();

    public BaseCheck(Main main, String name) {
        this.name = name;
        this.logger = main.getLogger();
        this.main = main;
    }

    public abstract boolean process(String fileName, ZipFile zipFile);

    public boolean checksumIsBlacklisted(String fileChecksum) {
        if (blacklistedChecksums.isEmpty()) {
            return false;
        }
        return blacklistedChecksums.stream().anyMatch((blacklistedChecksum) -> (fileChecksum.equals(blacklistedChecksum)));
    }

    public void setLogName(String logName) {
        this.logName = logName;
    }

    public String getLogName() {
        if(logName.isEmpty()){
            return name;
        }
        return logName;
    }

    public void setBlacklistedMethodNames(List<String> blacklistedMethodNames) {
        this.blacklistedMethodNames = blacklistedMethodNames;
    }

    public void setBlacklistedStrings(List<String> blacklistedStrings) {
        this.blacklistedStrings = blacklistedStrings;
    }

    public void setBlacklistedClassNodes(List<String> blacklistedClassNodes) {
        this.blacklistedClassNodes = blacklistedClassNodes;
    }

    public void setBlacklistedChecksums(List<String> blacklistedChecksums) {
        this.blacklistedChecksums = blacklistedChecksums;
    }

    public void setBlacklistedAuthors(List<String> blacklistedAuthors) {
        this.blacklistedAuthors = blacklistedAuthors;
    }

    public void setCheckType(String checkType) {
        this.checkType = checkType;
    }

    public String getCheckType() {
        return checkType;
    }

    public String getName() {
        return name;
    }

    public boolean classNodeContainsBlacklistedWord(ClassNode classNode, List<String> blacklistedStrings) {
        List<MethodNode> nodes = classNode.methods;
        for (MethodNode node : nodes) {
            for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
                    String string = ((LdcInsnNode) insnNode).cst.toString();
                    for(String blacklistedString : blacklistedStrings){
                        if(string.equals(blacklistedString)){
                            return true;
                        }
                        if(string.contains(blacklistedString)){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public boolean isBungeeYmlFile(String fileName) {
        return fileName.equals("bungee.yml");
    }

    public boolean isPluginYmlFile(String fileName) {
        return fileName.equals("plugin.yml");
    }

    public boolean isTextFile(String fileName) {
        return fileName.endsWith(".yml") || fileName.endsWith(".txt") || fileName.endsWith(".sk");
    }

    public void setClassNodePath(String string) {
        this.classNodePath = string;
    }

    public String getClassNodePath() {
        return classNodePath;
    }

    public boolean validClassPath(String classPath) {
        return classPath.endsWith(".class") && !classPath.contains("__MACOSX");
    }

    public String getFileName(){
        return fileName;
    }
    
    public void setBlacklistedPluginNames(List<String> blacklistedPluginNames){
        this.blacklistedPluginNames = blacklistedPluginNames;
    }
 
    public void setBlacklistedClassNames(List<String> blacklistedClassNames){
        this.blacklistedClassNames = blacklistedClassNames;
    }
    
}
