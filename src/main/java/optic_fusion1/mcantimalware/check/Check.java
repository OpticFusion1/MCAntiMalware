package optic_fusion1.mcantimalware.check;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipFile;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public abstract class Check {

    public Main main;
    private String name;
    private CheckType type;
    private String fileName = "";
    public CustomLogger logger;
    private String classNodePath = "";
    private List<String> checksums = new ArrayList<>();

    public Check(String name, Main main, CheckType type) {
        this.name = name;
        this.main = main;
        logger = main.getLogger();
        this.type = type;
    }
    
    public void addChecksum(String checksum){
        checksums.add(checksum);
    }
    
    public List<String> getChecksums(){
        return checksums;
    }

    public Main getMain() {
        return main;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getFileName() {
        return fileName;
    }

    public CheckType getType() {
        return type;
    }

    public String getName() {
        return name;
    }

    public abstract boolean process(String fileName, ZipFile zipFile);

    public abstract boolean detect(InputStream inputStream);

    public abstract boolean detect(ClassNode classNode);

    public boolean classNodeContainsBlacklistedWord(ClassNode classNode, String[] blacklistedStrings) {
        List<MethodNode> nodes = classNode.methods;
        for (MethodNode node : nodes) {
            for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
                    String string = ((LdcInsnNode) insnNode).cst.toString();
                    for (String word : blacklistedStrings) {
                        if (string.contains(word)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public boolean isBungeeYmlFile(String fileName) {
        return fileName.equals("bungee.yml");
    }

    public boolean isPluginYmlFile(String fileName) {
        return fileName.equals("plugin.yml");
    }

    public boolean isTextFile(String fileName) {
        return fileName.endsWith(".yml") || fileName.endsWith(".txt") || fileName.endsWith(".sk");
    }

    public boolean validClassPath(String classPath) {
        return classPath.endsWith(".class") && !classPath.contains("__MACOSX");
    }

    public void setClassNodePath(String string) {
        this.classNodePath = string;
    }

    public String getClassNodePath() {
        return classNodePath;
    }

    public boolean containsChecksum(String fileChecksum){
        if(checksums.isEmpty()){
            return false;
        }
        for(String checksum : checksums){
            if(checksum.equals(fileChecksum)){
                return true;
            }
        }
        return false;
    }
    
}
