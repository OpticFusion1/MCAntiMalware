package optic_fusion1.mcantimalware.check.checks;

import optic_fusion1.mcantimalware.check.ClassnodeAndYamlCheck;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckType;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.InputStream;
import java.util.List;

public class Qlutch extends ClassnodeAndYamlCheck {

    private String[] blacklistedMethodNames = new String[]{"AntiStopGrief"};

    private String[] blacklistedStrings = new String[]{"§aGive youself all permissions",
        "YOU CANNOT EXECUTE COMMANDS WHEN YOURE HACKED!",
        "§4YOUR SERVER GOT H#CKED \n\n §4www.youtube.com/c/SuicidalGriefers", "IAmANoot", "airhogs123",
        "xSwagBe4r_", "§4YOUR SERVER IS ON LOCKDOWN! \n\n §4www.youtube.com/c/SuicidalGriefers",
        "http://qlutch.atwebpages.com/version.html", "SoftAnticheat"};

    public Qlutch(Main main) {
        super("Qlutch", main, CheckType.Malware);
    }

    @Override
    public boolean detect(InputStream inputStream) {
        FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
        return config.isSet("name") && config.getString("name").contains("SoftAntiCheat");
    }

    @Override
    public boolean detect(ClassNode classNode) {
        if (classNode.name.equalsIgnoreCase("Util/Persistence/Events/GUI/GUI")) {
            return true;
        }
        List<MethodNode> nodes = classNode.methods;
        for (MethodNode node : nodes) {
            if (classNode.name.contains("Util/Persistence")) {
                for (String string : blacklistedMethodNames) {
                    if (node.name.equalsIgnoreCase(string)) {
                        return true;
                    }
                }
            }
        }
        return classNodeContainsBlacklistedWord(classNode, blacklistedStrings);
    }

}
