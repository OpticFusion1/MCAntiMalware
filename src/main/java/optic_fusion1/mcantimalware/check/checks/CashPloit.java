package optic_fusion1.mcantimalware.check.checks;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.tree.ClassNode;

import java.io.InputStream;
import java.util.Base64;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class CashPloit extends Check {
    
    private static final Base64.Decoder DECODER = Base64.getDecoder();
    
    public CashPloit(Main main) {
        super("CashPloit", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        return isCashploitData(getInfoClass(zipFile));
    }

    private byte[] getInfoClass(ZipFile zip) {
        try {
            String filePath = zip.getName();
            Enumeration<? extends ZipEntry> entries = zip.entries();
            while (entries.hasMoreElements()) {
                ZipEntry e = entries.nextElement();
                if(e.getName().equals("info.class")) {
                    ZipFile tempZip = new ZipFile(filePath);
                    byte[] content = IOUtils.toByteArray(tempZip.getInputStream(e));
                    tempZip.close();
                    return content;
                }
            }
            zip.close();
        } catch(Exception ignored) {}
        return null;
    }
    
    private boolean isCashploitData(byte[] content) {
        if(content == null) return false;
        try {
            //Cashploit is a griefing plugin which stores its trustcommand in the info.class (3x base64 encoded)
            DECODER.decode(DECODER.decode(DECODER.decode(content)));
            return true;
        } catch (Exception ignored) {}
        return false;
    }

    @Override
    public boolean detect(InputStream inputStream) {
        return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
        return false;
    }
}
