package optic_fusion1.mcantimalware.logging;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.OptionalInt;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class CustomLogger {

    private final File currentLogFile;
    private final File logDirectory;
    private final List<String> toLog;
    private final String dateFormatted;

    public CustomLogger() {
        dateFormatted = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        logDirectory = new File("AntiMalware", "logs");
        if (!logDirectory.exists()) {
            logDirectory.mkdirs();
        }
        currentLogFile = new File(logDirectory, "latest.log");
        if (currentLogFile.exists()) {
            zip(currentLogFile);
            currentLogFile.delete();
        }
        createNewFile();
        this.toLog = new ArrayList<>();
    }

    private void createNewFile() {
        if (!currentLogFile.exists()) {
            try {
                currentLogFile.createNewFile();
            } catch (IOException ignored) {
            }
        }
    }

    public void detected(String string) {
        log(string, CustomLevel.DETECTED);
    }

    public void exception(Throwable t) {
        logInFile(t);
        updateToLog();
        buildLogMessage("", CustomLevel.SEVERE, t);
    }

    public void severe(String string) {
        log(string, CustomLevel.SEVERE);
    }

    public void debug(String string) {
        log(string, CustomLevel.DEBUG);
    }

    public void debug(Object o) {
        debug(String.valueOf(o));
    }

    public void error(String string, Throwable thrwbl) {
        Exception duplicate = new Exception(string, thrwbl);
        logInFile(duplicate);
        updateToLog();
        buildLogMessage("", CustomLevel.SEVERE, duplicate);
    }

    public void alert(String string) {
        log(string, CustomLevel.ALERT);
    }

    public void info(String string) {
        log(string, CustomLevel.INFO);
    }

    public void warn(String string) {
        log(string, CustomLevel.WARNING);
    }

    public void log(String string, CustomLevel level) {
        String message = buildLogMessage(string, level, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message);
    }

    private String buildLogMessage(String message, CustomLevel level, Throwable exception) {
        if (exception != null) {
            exception.printStackTrace();
            return "";
        }
        LocalTime timeObject = LocalTime.now();
        String time = timeObject.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        return String.format("[%s] [%s]: %s", time, level.name(), message);
    }

    private void logInFile(Throwable exception) {
        StringBuilder toWrite = new StringBuilder();
        toWrite.append(exception.toString())
                .append('\n')
                .append(getStackTraceElement(exception));
        if (exception.getCause() != null) {
            toWrite.append("Caused by: ").append(exception.getCause().toString())
                    .append('\n')
                    .append(getStackTraceElement(exception.getCause()));
        }
        toLog.add(toWrite.toString());
    }

    private String getStackTraceElement(Throwable t) {
        StringBuilder toWrite = new StringBuilder();
        for (StackTraceElement element : t.getStackTrace()) {
            toWrite.append("     ").append("at")
                    .append(' ')
                    .append(element.toString())
                    .append('\n');
        }
        return toWrite.toString();
    }

    private void updateToLog() {
        try (FileWriter writer = new FileWriter(currentLogFile)) {
            for (String log : toLog) {
                writer.write(log);
                writer.append('\n');
            }
        } catch (IOException ignored) {
        }
    }

    private void zip(File file) {
        OptionalInt logNumberOptional = Arrays.stream(logDirectory.listFiles((a, name) -> name.endsWith(".zip")))
                .mapToInt(zipInDir -> {
                    if (!zipInDir.getName().contains(dateFormatted)) {
                        return 0;
                    }
                    return Integer.parseInt(zipInDir.getName().replace(dateFormatted + "-", "")
                            .replace(".zip", ""));
                })
                .max();
        int logNumber = 1;
        if (logNumberOptional.isPresent()) {
            int logNumberData = logNumberOptional.getAsInt();
            if (logNumberData > 0) {
                logNumber = logNumberData + 1;
            }
        }
        File zipFile = new File(logDirectory, dateFormatted + "-" + logNumber + ".zip");
        try {
            zipFile.createNewFile();
        } catch (IOException ignored) {
        }
        try (ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile))) {
            ZipEntry entry = new ZipEntry(file.getPath());
            out.putNextEntry(entry);
            out.write(Files.readAllBytes(file.toPath()));
        } catch (IOException exception) {

        }
    }

}
