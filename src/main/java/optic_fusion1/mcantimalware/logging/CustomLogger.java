package optic_fusion1.mcantimalware.logging;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class CustomLogger {

    private final File logFile;
    private List<String> toLog;

    public CustomLogger() {
        logFile = new File(new File(".", "AntiMalware"), "latest.log");
        if (logFile.exists()) {
            logFile.delete();
            createNewFile();
        } else {
            createNewFile();
        }
        this.toLog = new ArrayList<>();
    }

    private void createNewFile() {
        if (!logFile.exists()) {
            if (!logFile.getParentFile().exists()) {
                logFile.getParentFile().mkdirs();
            }
            try {
                logFile.createNewFile();
            } catch (IOException ignored) {
            }
        }
    }

    public void malicious(String string) {
        String message = buildLogMessage(string, CustomLevel.MALICIOUS, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message); // yes, thats what we will use!
    }

    public void exception(Throwable t) {
        logInFile(t);
        updateToLog();
        buildLogMessage("", CustomLevel.SEVERE, t);
    }

    public void severe(String string) {
        String message = buildLogMessage(string, CustomLevel.SEVERE, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message);
    }

    public void debug(String string) {
        toLog.add(string);
        updateToLog();
        System.out.println(string);
    }

    public void debug(Object o) {
        toLog.add(String.valueOf(o));
        updateToLog();
        System.out.println(o);
    }

    public void error(
            String string,
            Throwable thrwbl
    ) {
        Exception duplicate = new Exception(string, thrwbl);
        logInFile(duplicate);
        updateToLog();
        buildLogMessage("", CustomLevel.SEVERE, duplicate);
    }

    public void alert(String string) {
        String message = buildLogMessage(string, CustomLevel.ALERT, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message);
    }

    public void info(String string) {
        String message = buildLogMessage(string, CustomLevel.INFO, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message);
    }

    public void warn(String string) {
        String message = buildLogMessage(string, CustomLevel.WARN, null);
        toLog.add(message);
        updateToLog();
        System.out.println(message);
    }

    private String buildLogMessage(
            String message,
            CustomLevel level,
            Throwable exception
    ) {
        if (exception != null) {
            exception.printStackTrace();
            return "";
        }
        LocalTime timeObject = LocalTime.now();
        String time = timeObject.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        return String.format("[%s] [%s]: %s", time, level.name(), message);
    }

    private void logInFile(Throwable exception) {
        StringBuilder toWrite = new StringBuilder();
        for (StackTraceElement element : exception.getStackTrace()) {
            toWrite.append(element.toString()).append('\n');
        }
        toLog.add(toWrite.toString());
    }

    private void updateToLog() {
        try (FileWriter writer = new FileWriter(logFile)) {
            for (String log : toLog) {
                writer.write(log);
                writer.append('\n');
            }
        } catch (IOException ignored) {
        }
    }

}
