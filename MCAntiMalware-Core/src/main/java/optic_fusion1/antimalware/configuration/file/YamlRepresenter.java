/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration.file;

import optic_fusion1.antimalware.configuration.ConfigurationSection;
import optic_fusion1.antimalware.configuration.serialization.ConfigurationSerializable;
import optic_fusion1.antimalware.configuration.serialization.ConfigurationSerialization;
import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.nodes.Node;
import org.yaml.snakeyaml.representer.Representer;

import java.util.LinkedHashMap;
import java.util.Map;

public class YamlRepresenter extends Representer {

  public YamlRepresenter() {
    this.multiRepresenters.put(ConfigurationSection.class, new RepresentConfigurationSection());
    this.multiRepresenters.put(ConfigurationSerializable.class, new RepresentConfigurationSerializable());
  }

  private class RepresentConfigurationSection extends RepresentMap {

    @NotNull
    @Override
    public Node representData(@NotNull Object data) {
      return super.representData(((ConfigurationSection) data).getValues(false));
    }
  }

  private class RepresentConfigurationSerializable extends RepresentMap {

    @NotNull
    @Override
    public Node representData(@NotNull Object data) {
      ConfigurationSerializable serializable = (ConfigurationSerializable) data;
      Map<String, Object> values = new LinkedHashMap<>();
      values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
      values.putAll(serializable.serialize());

      return super.representData(values);
    }
  }
}
