/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration.file;

import optic_fusion1.antimalware.configuration.Configuration;
import optic_fusion1.antimalware.configuration.ConfigurationSection;
import optic_fusion1.antimalware.configuration.InvalidConfigurationException;
import optic_fusion1.antimalware.utils.Utils;
import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.error.YAMLException;
import org.yaml.snakeyaml.representer.Representer;

import java.io.*;
import java.util.Map;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

//TODO: Make all of these translatable
public class YamlConfiguration extends FileConfiguration {

  protected static final String COMMENT_PREFIX = "# ";
  protected static final String BLANK_CONFIG = "{}\n";
  private final DumperOptions yamlOptions = new DumperOptions();
  private final Representer yamlRepresenter = new YamlRepresenter();
  private final Yaml yaml = new Yaml(new YamlConstructor(), yamlRepresenter, yamlOptions);

  @NotNull
  @Override
  public String saveToString() {
    yamlOptions.setIndent(options().indent());
    yamlOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
    yamlRepresenter.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);

    String header = buildHeader();
    String dump = yaml.dump(getValues(false));

    if (dump.equals(BLANK_CONFIG)) {
      dump = "";
    }

    return header + dump;
  }

  @Override
  public void loadFromString(@NotNull String contents) throws InvalidConfigurationException {
    Utils.notNull(contents, "Contents cannot be null");

    Map<?, ?> input;
    try {
      input = yaml.load(contents);
    } catch (YAMLException e) {
      throw new InvalidConfigurationException(e);
    } catch (ClassCastException e) {
      throw new InvalidConfigurationException("Top level is not a Map.");
    }

    String header = parseHeader(contents);
    if (header.length() > 0) {
      options().header(header);
    }

    if (input != null) {
      convertMapsToSections(input, this);
    }
  }

  protected void convertMapsToSections(
          @NotNull Map<?, ?> input, @NotNull ConfigurationSection section) {
    input.forEach((key1, value) -> {
      String key = key1.toString();

      try {
        if (value instanceof Map) {
          convertMapsToSections((Map<?, ?>)value, section.createSection(key));
        }
        else {
          section.set(key, value);
        }
      } catch (Exception e) {
        LOGGER.severe("Failed to set config section Key: " + key + " Value: " + value);
      }
    });
  }

  @NotNull
  protected String parseHeader(@NotNull String input) {
    String[] lines = input.split("\r?\n", -1);
    StringBuilder result = new StringBuilder();
    boolean readingHeader = true;
    boolean foundHeader = false;

    for (int i = 0; (i < lines.length) && (readingHeader); i++) {
      String line = lines[i];

      if (line.startsWith(COMMENT_PREFIX)) {
        if (i > 0) {
          result.append("\n");
        }

        if (line.length() > COMMENT_PREFIX.length()) {
          result.append(line.substring(COMMENT_PREFIX.length()));
        }

        foundHeader = true;
      } else if ((foundHeader) && (line.length() == 0)) {
        result.append("\n");
      } else if (foundHeader) {
        readingHeader = false;
      }
    }

    return result.toString();
  }

  @NotNull
  @Override
  protected String buildHeader() {
    String header = options().header();

    if (options().copyHeader()) {
      Configuration def = getDefaults();

      if ((def instanceof FileConfiguration filedefaults)) {
        String defaultsHeader = filedefaults.buildHeader();

        if (defaultsHeader.length() > 0) {
          return defaultsHeader;
        }
      }
    }

    if (header == null) {
      return "";
    }

    StringBuilder builder = new StringBuilder();
    String[] lines = header.split("\r?\n", -1);
    boolean startedHeader = false;

    for (int i = lines.length - 1; i >= 0; i--) {
      builder.insert(0, "\n");

      if ((startedHeader) || (lines[i].length() != 0)) {
        builder.insert(0, lines[i]);
        builder.insert(0, COMMENT_PREFIX);
        startedHeader = true;
      }
    }

    return builder.toString();
  }

  @NotNull
  @Override
  public YamlConfigurationOptions options() {
    if (options == null) {
      options = new YamlConfigurationOptions(this);
    }

    return (YamlConfigurationOptions) options;
  }

  @NotNull
  public static YamlConfiguration loadConfiguration(@NotNull File file) {
    Utils.notNull(file, "File cannot be null");

    YamlConfiguration config = new YamlConfiguration();

    try {
      config.load(file);
    } catch (FileNotFoundException ignored) {
    } catch (IOException | InvalidConfigurationException ex) {
      LOGGER.error("Cannot load " + file, ex);
    }

    return config;
  }

  @NotNull
  public static YamlConfiguration loadConfiguration(@NotNull Reader reader) {
    Utils.notNull(reader, "Stream cannot be null");

    YamlConfiguration config = new YamlConfiguration();

    try {
      config.load(reader);
    } catch (IOException | InvalidConfigurationException ex) {
      LOGGER.error("Cannot load configuration from stream", ex);
    }

    return config;
  }

  public static YamlConfiguration loadConfiguration(InputStream stream) {
    if (stream == null) {
      throw new IllegalArgumentException("Stream cannot be null");
    }
    YamlConfiguration config = new YamlConfiguration();
    try {
      config.load(stream);
    } catch (IOException ignored) {
    } catch (InvalidConfigurationException ex2) {
      if (ex2.getCause() instanceof YAMLException) {
      } else if (ex2.getCause() == null || ex2.getCause() instanceof ClassCastException) {
      } else {
      }
    }
    return config;
  }
}
