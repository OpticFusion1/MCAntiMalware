/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration;

import optic_fusion1.antimalware.utils.Utils;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Map;

//TODO: Make all of these translatable
public class MemoryConfiguration extends MemorySection implements Configuration {

  protected Configuration defaults;
  protected MemoryConfigurationOptions options;

  public MemoryConfiguration() {
  }

  public MemoryConfiguration(@Nullable Configuration defaults) {
    this.defaults = defaults;
  }

  @Override
  public void addDefault(@NotNull String path, @Nullable Object value) {
    Utils.notNull(path, "Path may not be null");

    if (defaults == null) {
      defaults = new MemoryConfiguration();
    }

    defaults.set(path, value);
  }

  @Override
  public void addDefaults(@NotNull Map<String, Object> defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    defaults.forEach(this::addDefault);
  }

  @Override
  public void addDefaults(@NotNull Configuration defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    addDefaults(defaults.getValues(true));
  }

  @Override
  public void setDefaults(@NotNull Configuration defaults) {
    Utils.notNull(defaults, "Defaults may not be null");

    this.defaults = defaults;
  }

  @Nullable
  @Override
  public Configuration getDefaults() {
    return defaults;
  }

  @Nullable
  @Override
  public ConfigurationSection getParent() {
    return null;
  }

  @NotNull
  @Override
  public MemoryConfigurationOptions options() {
    if (options == null) {
      options = new MemoryConfigurationOptions(this);
    }

    return options;
  }
}
