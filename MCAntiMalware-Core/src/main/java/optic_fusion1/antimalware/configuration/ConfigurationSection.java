/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration;

import optic_fusion1.antimalware.configuration.serialization.ConfigurationSerializable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.Map;
import java.util.Set;

public interface ConfigurationSection {

  @NotNull Set<String> getKeys(boolean deep);

  @NotNull Map<String, Object> getValues(boolean deep);

  boolean contains(@NotNull String path);

  boolean contains(@NotNull String path, boolean ignoreDefault);

  boolean isSet(@NotNull String path);

  @Nullable String getCurrentPath();

  @NotNull String getName();

  @Nullable Configuration getRoot();

  @Nullable ConfigurationSection getParent();

  @Nullable Object get(@NotNull String path);

  @Nullable Object get(@NotNull String path, @Nullable Object def);

  void set(@NotNull String path, @Nullable Object value);

  @NotNull ConfigurationSection createSection(@NotNull String path);

  @NotNull ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map);

  @Nullable String getString(@NotNull String path);

  @Nullable String getString(@NotNull String path, @Nullable String def);

  boolean isString(@NotNull String path);

  int getInt(@NotNull String path);

  int getInt(@NotNull String path, int def);

  boolean isInt(@NotNull String path);

  boolean getBoolean(@NotNull String path);

  boolean getBoolean(@NotNull String path, boolean def);

  boolean isBoolean(@NotNull String path);

  double getDouble(@NotNull String path);

  double getDouble(@NotNull String path, double def);

  boolean isDouble(@NotNull String path);

  long getLong(@NotNull String path);

  long getLong(@NotNull String path, long def);

  boolean isLong(@NotNull String path);

  @Nullable List<?> getList(@NotNull String path);

  @Nullable List<?> getList(@NotNull String path, @Nullable List<?> def);

  boolean isList(@NotNull String path);

  @NotNull List<String> getStringList(@NotNull String path);

  @NotNull List<Integer> getIntegerList(@NotNull String path);

  @NotNull List<Boolean> getBooleanList(@NotNull String path);

  @NotNull List<Double> getDoubleList(@NotNull String path);

  @NotNull List<Float> getFloatList(@NotNull String path);

  @NotNull List<Long> getLongList(@NotNull String path);

  @NotNull List<Byte> getByteList(@NotNull String path);

  @NotNull List<Character> getCharacterList(@NotNull String path);

  @NotNull List<Short> getShortList(@NotNull String path);

  @NotNull List<Map<?, ?>> getMapList(@NotNull String path);

  @Nullable <T> T getObject(@NotNull String path, @NotNull Class<T> clazz);

  @Nullable <T> T getObject(
          @NotNull String path, @NotNull Class<T> clazz, @Nullable T def);

  @Nullable <T extends ConfigurationSerializable> T getSerializable(
          @NotNull String path, @NotNull Class<T> clazz);

  @Nullable <T extends ConfigurationSerializable> T getSerializable(
          @NotNull String path, @NotNull Class<T> clazz, @Nullable T def);

  @Nullable ConfigurationSection getConfigurationSection(@NotNull String path);

  boolean isConfigurationSection(@NotNull String path);

  @Nullable ConfigurationSection getDefaultSection();

  void addDefault(@NotNull String path, @Nullable Object value);
}
