/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration.serialization;

import optic_fusion1.antimalware.utils.Utils;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Map;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

//TODO: Make all of these translatable
public class ConfigurationSerialization {

  public static final String SERIALIZED_TYPE_KEY = "==";
  private final Class<? extends ConfigurationSerializable> clazz;
  private static final Map<String, Class<? extends ConfigurationSerializable>> ALIASES
          = new HashMap<>();

  protected ConfigurationSerialization(@NotNull Class<? extends ConfigurationSerializable> clazz) {
    this.clazz = clazz;
  }

  @Nullable
  protected Method getMethod(@NotNull String name, boolean isStatic) {
    try {
      Method method = clazz.getDeclaredMethod(name, Map.class);

      if (!ConfigurationSerializable.class.isAssignableFrom(method.getReturnType())) {
        return null;
      }
      if (Modifier.isStatic(method.getModifiers()) != isStatic) {
        return null;
      }

      return method;
    } catch (NoSuchMethodException | SecurityException ex) {
      return null;
    }
  }

  @Nullable
  protected Constructor<? extends ConfigurationSerializable> getConstructor() {
    try {
      return clazz.getConstructor(Map.class);
    } catch (NoSuchMethodException | SecurityException ex) {
      return null;
    }
  }

  @Nullable
  protected ConfigurationSerializable deserializeViaMethod(
          @NotNull Method method, @NotNull Map<String, ?> args) {
    try {
      ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);

      if (result == null) {
        LOGGER.severe("Could not call method " + method + " of " + clazz + " for deserialization: method returned null");
      } else {
        return result;
      }
    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
      LOGGER.severe("Could not call method '{0}' of {1} for deserialization'",
              new Object[]{method.toString(), clazz, ex instanceof InvocationTargetException ? ex.getCause() : ex});
    }

    return null;
  }

  @Nullable
  protected ConfigurationSerializable deserializeViaCtor(
          @NotNull Constructor<? extends ConfigurationSerializable> ctor,
          @NotNull Map<String, ?> args) {
    try {
      return ctor.newInstance(args);
    } catch (IllegalAccessException | IllegalArgumentException | InstantiationException | InvocationTargetException ex) {
      LOGGER.severe("Could not call constructor '" + ctor + "' of " + clazz + " for deserialization "
              + (ex instanceof InvocationTargetException ? ex.getCause() : ex));
    }

    return null;
  }

  @Nullable
  public ConfigurationSerializable deserialize(@NotNull Map<String, ?> args) {
    Utils.notNull(args, "Args must not be null");

    ConfigurationSerializable result = null;
    Method method = null;

    if (result == null) {
      method = getMethod("deserialize", true);

      if (method != null) {
        result = deserializeViaMethod(method, args);
      }
    }

    if (result == null) {
      method = getMethod("valueOf", true);

      if (method != null) {
        result = deserializeViaMethod(method, args);
      }
    }

    if (result == null) {
      Constructor<? extends ConfigurationSerializable> constructor = getConstructor();

      if (constructor != null) {
        result = deserializeViaCtor(constructor, args);
      }
    }

    return result;
  }

  @Nullable
  public static ConfigurationSerializable deserializeObject(
          @NotNull Map<String, ?> args, @NotNull Class<? extends ConfigurationSerializable> clazz) {
    return new ConfigurationSerialization(clazz).deserialize(args);
  }

  @Nullable
  public static ConfigurationSerializable deserializeObject(@NotNull Map<String, ?> args) {
    Class<? extends ConfigurationSerializable> clazz = null;

    if (args.containsKey(SERIALIZED_TYPE_KEY)) {
      try {
        String alias = (String) args.get(SERIALIZED_TYPE_KEY);

        if (alias == null) {
          throw new IllegalArgumentException("Cannot have null alias");
        }
        clazz = getClassByAlias(alias);
        if (clazz == null) {
          throw new IllegalArgumentException("Specified class does not exist ('" + alias + "')");
        }
      } catch (ClassCastException ex) {
        ex.fillInStackTrace();
        throw ex;
      }
    } else {
      throw new IllegalArgumentException(
              "Args doesn't contain type key ('" + SERIALIZED_TYPE_KEY + "')");
    }

    return new ConfigurationSerialization(clazz).deserialize(args);
  }

  public static void registerClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
    DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);

    if (delegate == null) {
      registerClass(clazz, getAlias(clazz));
      registerClass(clazz, clazz.getName());
    }
  }

  public static void registerClass(
          @NotNull Class<? extends ConfigurationSerializable> clazz, @NotNull String alias) {
    ALIASES.put(alias, clazz);
  }

  public static void unregisterClass(@NotNull String alias) {
    ALIASES.remove(alias);
  }

  public static void unregisterClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
    while (ALIASES.values().remove(clazz)) {
    }
  }

  @Nullable
  public static Class<? extends ConfigurationSerializable> getClassByAlias(@NotNull String alias) {
    return ALIASES.get(alias);
  }

  @NotNull
  public static String getAlias(@NotNull Class<? extends ConfigurationSerializable> clazz) {
    DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);

    if (delegate != null) {
      if ((delegate.value() == null) || (delegate.value() == clazz)) {
        delegate = null;
      } else {
        return getAlias(delegate.value());
      }
    }

    if (delegate == null) {
      SerializableAs alias = clazz.getAnnotation(SerializableAs.class);

      if ((alias != null) && (alias.value() != null)) {
        return alias.value();
      }
    }

    return clazz.getName();
  }
}
