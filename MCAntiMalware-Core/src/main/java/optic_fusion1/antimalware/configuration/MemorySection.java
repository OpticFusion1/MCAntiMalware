/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.configuration;

import optic_fusion1.antimalware.configuration.serialization.ConfigurationSerializable;
import optic_fusion1.antimalware.utils.Utils;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.*;

import static optic_fusion1.antimalware.utils.NumberConversions.*;

//TODO: Make all of these translatable
public class MemorySection implements ConfigurationSection {

  protected final Map<String, Object> map = new LinkedHashMap<>();
  private final Configuration root;
  private final ConfigurationSection parent;
  private final String path;
  private final String fullPath;

  protected MemorySection() {
    if (!(this instanceof Configuration)) {
      throw new IllegalStateException("Cannot construct a root MemorySection when not a Configuration");
    }

    this.path = "";
    this.fullPath = "";
    this.parent = null;
    this.root = (Configuration) this;
  }

  protected MemorySection(@NotNull ConfigurationSection parent, @NotNull String path) {
    Utils.notNull(parent, "Parent cannot be null");
    Utils.notNull(path, "Path cannot be null");

    this.path = path;
    this.parent = parent;
    this.root = parent.getRoot();

    Utils.notNull(root, "Path cannot be orphaned");

    this.fullPath = createPath(parent, path);
  }

  @NotNull
  @Override
  public Set<String> getKeys(boolean deep) {
    Set<String> result = new LinkedHashSet<>();

    Configuration rootConfig = getRoot();
    if (rootConfig != null && rootConfig.options().copyDefaults()) {
      ConfigurationSection defaults = getDefaultSection();

      if (defaults != null) {
        result.addAll(defaults.getKeys(deep));
      }
    }

    mapChildrenKeys(result, this, deep);

    return result;
  }

  @NotNull
  @Override
  public Map<String, Object> getValues(boolean deep) {
    Map<String, Object> result = new LinkedHashMap<>();

    Configuration rootConfig = getRoot();
    if (rootConfig != null && rootConfig.options().copyDefaults()) {
      ConfigurationSection defaults = getDefaultSection();

      if (defaults != null) {
        result.putAll(defaults.getValues(deep));
      }
    }

    mapChildrenValues(result, this, deep);

    return result;
  }

  @Override
  public boolean contains(@NotNull String path) {
    return contains(path, false);
  }

  @Override
  public boolean contains(@NotNull String path, boolean ignoreDefault) {
    return ((ignoreDefault) ? get(path, null) : get(path)) != null;
  }

  @Override
  public boolean isSet(@NotNull String path) {
    Configuration rootConfig = getRoot();
    if (rootConfig == null) {
      return false;
    }
    if (rootConfig.options().copyDefaults()) {
      return contains(path);
    }
    return get(path, null) != null;
  }

  @NotNull
  @Override
  public String getCurrentPath() {
    return fullPath;
  }

  @NotNull
  @Override
  public String getName() {
    return path;
  }

  @Nullable
  @Override
  public Configuration getRoot() {
    return root;
  }

  @Nullable
  @Override
  public ConfigurationSection getParent() {
    return parent;
  }

  @Override
  public void addDefault(@NotNull String path, @Nullable Object value) {
    Utils.notNull(path, "Path cannot be null");

    Configuration rootConfig = getRoot();
    if (rootConfig == null) {
      throw new IllegalStateException("Cannot add default without root");
    }
    if (rootConfig == this) {
      throw new UnsupportedOperationException("Unsupported addDefault(String, Object) implementation");
    }
    rootConfig.addDefault(createPath(this, path), value);
  }

  @Nullable
  @Override
  public ConfigurationSection getDefaultSection() {
    Configuration rootConfig = getRoot();
    Configuration defaults = rootConfig == null ? null : rootConfig.getDefaults();

    if (defaults != null) {
      if (defaults.isConfigurationSection(getCurrentPath())) {
        return defaults.getConfigurationSection(getCurrentPath());
      }
    }

    return null;
  }

  @Override
  public void set(@NotNull String path, @Nullable Object value) {
    Utils.notEmpty(path, "Cannot set to an empty path");

    Configuration rootConfig = getRoot();
    if (rootConfig == null) {
      throw new IllegalStateException("Cannot use section without a root");
    }

    final char separator = rootConfig.options().pathSeparator();
    int i1 = -1, i2;
    ConfigurationSection section = this;
    while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
      String node = path.substring(i2, i1);
      ConfigurationSection subSection = section.getConfigurationSection(node);
      if (subSection == null) {
        if (value == null) {
          return;
        }
        section = section.createSection(node);
      } else {
        section = subSection;
      }
    }

    String key = path.substring(i2);
    if (section == this) {
      if (value == null) {
        map.remove(key);
      } else {
        map.put(key, value);
      }
    } else {
      section.set(key, value);
    }
  }

  @Nullable
  @Override
  public Object get(@NotNull String path) {
    return get(path, getDefault(path));
  }

  @Nullable
  @Override
  public Object get(@NotNull String path, @Nullable Object def) {
    Utils.notNull(path, "Path cannot be null");

    if (path.length() == 0) {
      return this;
    }

    Configuration rootConfig = getRoot();
    if (rootConfig == null) {
      throw new IllegalStateException("Cannot access section without a root");
    }

    final char separator = rootConfig.options().pathSeparator();
    int i1 = -1, i2;
    ConfigurationSection section = this;
    while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
      section = section.getConfigurationSection(path.substring(i2, i1));
      if (section == null) {
        return def;
      }
    }

    String key = path.substring(i2);
    if (section == this) {
      Object result = map.get(key);
      return (result == null) ? def : result;
    }
    return section.get(key, def);
  }

  @NotNull
  @Override
  public ConfigurationSection createSection(@NotNull String path) {
    Utils.notEmpty(path, "Cannot create section at empty path");
    Configuration rootConfig = getRoot();
    if (rootConfig == null) {
      throw new IllegalStateException("Cannot create section without a root");
    }

    final char separator = rootConfig.options().pathSeparator();
    int i1 = -1, i2;
    ConfigurationSection section = this;
    while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
      String node = path.substring(i2, i1);
      ConfigurationSection subSection = section.getConfigurationSection(node);
      if (subSection == null) {
        section = section.createSection(node);
      } else {
        section = subSection;
      }
    }

    String key = path.substring(i2);
    if (section == this) {
      ConfigurationSection result = new MemorySection(this, key);
      map.put(key, result);
      return result;
    }
    return section.createSection(key);
  }

  @NotNull
  @Override
  public ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map) {
    ConfigurationSection section = createSection(path);

    map.forEach((key, value) -> {
      if (value instanceof Map) {
        section.createSection(key.toString(), (Map<?, ?>)value);
      }
      else {
        section.set(key.toString(), value);
      }
    });

    return section;
  }

  @Nullable
  @Override
  public String getString(@NotNull String path) {
    Object def = getDefault(path);
    return getString(path, def != null ? def.toString() : null);
  }

  @Nullable
  @Override
  public String getString(@NotNull String path, @Nullable String def) {
    Object val = get(path, def);
    return (val != null) ? val.toString() : def;
  }

  @Override
  public boolean isString(@NotNull String path) {
    Object val = get(path);
    return val instanceof String;
  }

  @Override
  public int getInt(@NotNull String path) {
    Object def = getDefault(path);
    return getInt(path, (def instanceof Number) ? toInt(def) : 0);
  }

  @Override
  public int getInt(@NotNull String path, int def) {
    Object val = get(path, def);
    return (val instanceof Number) ? toInt(val) : def;
  }

  @Override
  public boolean isInt(@NotNull String path) {
    Object val = get(path);
    return val instanceof Integer;
  }

  @Override
  public boolean getBoolean(@NotNull String path) {
    Object def = getDefault(path);
    return getBoolean(path, (def instanceof Boolean) ? (Boolean) def : false);
  }

  @Override
  public boolean getBoolean(@NotNull String path, boolean def) {
    Object val = get(path, def);
    return (val instanceof Boolean) ? (Boolean) val : def;
  }

  @Override
  public boolean isBoolean(@NotNull String path) {
    Object val = get(path);
    return val instanceof Boolean;
  }

  @Override
  public double getDouble(@NotNull String path) {
    Object def = getDefault(path);
    return getDouble(path, (def instanceof Number) ? toDouble(def) : 0);
  }

  @Override
  public double getDouble(@NotNull String path, double def) {
    Object val = get(path, def);
    return (val instanceof Number) ? toDouble(val) : def;
  }

  @Override
  public boolean isDouble(@NotNull String path) {
    Object val = get(path);
    return val instanceof Double;
  }

  @Override
  public long getLong(@NotNull String path) {
    Object def = getDefault(path);
    return getLong(path, (def instanceof Number) ? toLong(def) : 0);
  }

  @Override
  public long getLong(@NotNull String path, long def) {
    Object val = get(path, def);
    return (val instanceof Number) ? toLong(val) : def;
  }

  @Override
  public boolean isLong(@NotNull String path) {
    Object val = get(path);
    return val instanceof Long;
  }

  @Nullable
  @Override
  public List<?> getList(@NotNull String path) {
    Object def = getDefault(path);
    return getList(path, (def instanceof List) ? (List<?>) def : null);
  }

  @Nullable
  @Override
  public List<?> getList(@NotNull String path, @Nullable List<?> def) {
    Object val = get(path, def);
    return (List<?>) ((val instanceof List) ? val : def);
  }

  @Override
  public boolean isList(@NotNull String path) {
    Object val = get(path);
    return val instanceof List;
  }

  @NotNull
  @Override
  public List<String> getStringList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>();
    }

    List<String> result = new ArrayList<>();

    list.stream().filter((object) -> ((object instanceof String) || (isPrimitiveWrapper(object)))).forEachOrdered((object) -> result.add(String.valueOf(object)));

    return result;
  }

  @NotNull
  @Override
  public List<Integer> getIntegerList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>();
    }

    List<Integer> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Integer) {
        result.add((Integer) object);
      } else if (object instanceof String) {
        try {
          result.add(Integer.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((int) ((Character) object));
      } else if (object instanceof Number) {
        result.add(((Number) object).intValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Boolean> getBooleanList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>();
    }

    List<Boolean> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Boolean) {
        result.add((Boolean) object);
      } else if (object instanceof String) {
        if (Boolean.TRUE.toString().equals(object)) {
          result.add(true);
        } else if (Boolean.FALSE.toString().equals(object)) {
          result.add(false);
        }
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Double> getDoubleList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Double> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Double) {
        result.add((Double) object);
      } else if (object instanceof String) {
        try {
          result.add(Double.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((double) ((Character) object));
      } else if (object instanceof Number) {
        result.add(((Number) object).doubleValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Float> getFloatList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Float> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Float) {
        result.add((Float) object);
      } else if (object instanceof String) {
        try {
          result.add(Float.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((float) ((Character) object));
      } else if (object instanceof Number) {
        result.add(((Number) object).floatValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Long> getLongList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Long> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Long) {
        result.add((Long) object);
      } else if (object instanceof String) {
        try {
          result.add(Long.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((long) ((Character) object));
      } else if (object instanceof Number) {
        result.add(((Number) object).longValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Byte> getByteList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Byte> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Byte) {
        result.add((Byte) object);
      } else if (object instanceof String) {
        try {
          result.add(Byte.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((byte) ((Character) object).charValue());
      } else if (object instanceof Number) {
        result.add(((Number) object).byteValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Character> getCharacterList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Character> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Character) {
        result.add((Character) object);
      } else if (object instanceof String str) {

        if (str.length() == 1) {
          result.add(str.charAt(0));
        }
      } else if (object instanceof Number) {
        result.add((char) ((Number) object).intValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Short> getShortList(@NotNull String path) {
    List<?> list = getList(path);

    if (list == null) {
      return new ArrayList<>(0);
    }

    List<Short> result = new ArrayList<>();

    list.forEach((object) -> {
      if (object instanceof Short) {
        result.add((Short) object);
      } else if (object instanceof String) {
        try {
          result.add(Short.valueOf((String) object));
        } catch (NumberFormatException ignored) {
        }
      } else if (object instanceof Character) {
        result.add((short) ((Character) object).charValue());
      } else if (object instanceof Number) {
        result.add(((Number) object).shortValue());
      }
    });

    return result;
  }

  @NotNull
  @Override
  public List<Map<?, ?>> getMapList(@NotNull String path) {
    List<?> list = getList(path);
    List<Map<?, ?>> result = new ArrayList<>();

    if (list == null) {
      return result;
    }

    list.stream().filter((object) -> (object instanceof Map)).forEachOrdered((object) -> result.add((Map<?, ?>) object));

    return result;
  }

  @Nullable
  @Override
  public <T> T getObject(@NotNull String path, @NotNull Class<T> clazz) {
    Utils.notNull(clazz, "Class cannot be null");
    Object def = getDefault(path);
    return getObject(path, clazz, (clazz.isInstance(def)) ? clazz.cast(def) : null);
  }

  @Nullable
  @Override
  public <T> T getObject(
          @NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
    Utils.notNull(clazz, "Class cannot be null");
    Object val = get(path, def);
    return (clazz.isInstance(val)) ? clazz.cast(val) : def;
  }

  @Nullable
  @Override
  public <T extends ConfigurationSerializable> T getSerializable(
          @NotNull String path, @NotNull Class<T> clazz) {
    return getObject(path, clazz);
  }

  @Nullable
  @Override
  public <T extends ConfigurationSerializable> T getSerializable(
          @NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
    return getObject(path, clazz, def);
  }

  @Nullable
  @Override
  public ConfigurationSection getConfigurationSection(@NotNull String path) {
    Object val = get(path, null);
    if (val != null) {
      return (val instanceof ConfigurationSection) ? (ConfigurationSection) val : null;
    }

    val = get(path, getDefault(path));
    return (val instanceof ConfigurationSection) ? createSection(path) : null;
  }

  @Override
  public boolean isConfigurationSection(@NotNull String path) {
    Object val = get(path);
    return val instanceof ConfigurationSection;
  }

  protected boolean isPrimitiveWrapper(@Nullable Object input) {
    return input instanceof Integer || input instanceof Boolean || input instanceof Character || input instanceof Byte
            || input instanceof Short || input instanceof Double || input instanceof Long || input instanceof Float;
  }

  @Nullable
  protected Object getDefault(@NotNull String path) {
    Utils.notNull(path, "Path cannot be null");

    Configuration rootConfig = getRoot();
    Configuration defaults = rootConfig == null ? null : rootConfig.getDefaults();
    return (defaults == null) ? null : defaults.get(createPath(this, path));
  }

  protected void mapChildrenKeys(
          @NotNull Set<String> output, @NotNull ConfigurationSection section, boolean deep) {
    if (section instanceof MemorySection sec) {

      sec.map.entrySet().stream().peek((entry) -> output.add(createPath(section, entry.getKey(), this))).filter((entry) -> ((deep) && (entry.getValue() instanceof ConfigurationSection)))
              .map((entry) -> (ConfigurationSection) entry.getValue()).forEachOrdered((subsection) -> mapChildrenKeys(output, subsection, deep));
    } else {
      Set<String> keys = section.getKeys(deep);

      keys.forEach((key) -> output.add(createPath(section, key, this)));
    }
  }

  protected void mapChildrenValues(
          @NotNull Map<String, Object> output, @NotNull ConfigurationSection section, boolean deep) {
    if (section instanceof MemorySection sec) {

      sec.map.entrySet().stream().peek((entry) -> {
        String childPath = createPath(section, entry.getKey(), this);
        output.remove(childPath);
        output.put(childPath, entry.getValue());
          }).filter((entry) -> (entry.getValue() instanceof ConfigurationSection))
              .filter((entry) -> (deep)).forEachOrdered((entry) -> mapChildrenValues(output, (ConfigurationSection) entry.getValue(), deep));
    } else {
      Map<String, Object> values = section.getValues(deep);

      values.forEach((key, value) -> output.put(createPath(section, key, this), value));
    }
  }

  @NotNull
  public static String createPath(@NotNull ConfigurationSection section, @Nullable String key) {
    return createPath(section, key, (section == null) ? null : section.getRoot());
  }

  @NotNull
  public static String createPath(@NotNull ConfigurationSection section, @Nullable String key,
          @Nullable ConfigurationSection relativeTo) {
    Utils.notNull(section, "Cannot create path without a section");
    Configuration root = section.getRoot();
    if (root == null) {
      throw new IllegalStateException("Cannot create path without a root");
    }
    char separator = root.options().pathSeparator();

    StringBuilder builder = new StringBuilder();
    if (section != null) {
      for (ConfigurationSection parent = section;
              (parent != null) && (parent != relativeTo);
              parent = parent.getParent()) {
        if (builder.length() > 0) {
          builder.insert(0, separator);
        }

        builder.insert(0, parent.getName());
      }
    }

    if ((key != null) && (key.length() > 0)) {
      if (builder.length() > 0) {
        builder.append(separator);
      }

      builder.append(key);
    }

    return builder.toString();
  }

  @Override
  public String toString() {
    Configuration configRoot = getRoot();
    return getClass().getSimpleName() + "[path='" + getCurrentPath() +
        "', root='" + (configRoot == null ? null : configRoot.getClass().getSimpleName()) + "']";
  }
}
