/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware;

import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckManager;
import optic_fusion1.antimalware.check.CheckRegistery;
import optic_fusion1.antimalware.database.Database;
import optic_fusion1.antimalware.logging.CustomLogger;
import optic_fusion1.antimalware.notifications.NotificationHandler;
import optic_fusion1.antimalware.scanner.Scanner;
import optic_fusion1.antimalware.scanner.USBDriveScanner;
import optic_fusion1.antimalware.scanner.realtime.RealTimeScanner;
import optic_fusion1.antimalware.utils.I18n;

public class AntiMalware extends Thread {

    public static final CustomLogger LOGGER = new CustomLogger();
    private static final Database DATABASE = new Database();
    private static final CheckManager CHECK_MANAGER = new CheckManager();
    private static AntiMalware instance;
    private final CommandLineParser parser;
    private NotificationHandler notifHandler;
    private Scanner scanner;
    private CacheContainer cache;

    public AntiMalware(String[] args) {
        setName("AntiMalware/Main");
        Thread.setDefaultUncaughtExceptionHandler((Thread t, Throwable e) -> {
            LOGGER.warn("Uncaught exception");
            LOGGER.exception(e);
        });
        (parser = new CommandLineParser()).parseArguments(args);
        instance = this;
    }

    @Override
    public void run() {
        init();
    }

      private void init() {
        LOGGER.info(I18n.tl("initializing_start") + I18n.tl("github_issues"));
        cache = new CacheContainer(DATABASE);
        notifHandler = new NotificationHandler(parser.getNotificationType());
        new CheckRegistery(this).registerChecks();
        if(!parser.isHeadless()) {
            scanner = new RealTimeScanner(this, null);
            LOGGER.info(I18n.tl("initializing_end"));
            return;
        }
        scanner = new RealTimeScanner(this, parser.getScanDirectory());
        if (parser.singleScan()) {
            scanner.scanFiles();
            return;
        }
        if (parser.shouldScanSingleFile()) {
            scanner.addFileToQueue(parser.getScanFile().toPath());
            return;
        }
        if (!parser.shouldDisableAutoUpdate()) {
            LOGGER.info(I18n.tl("setup_auto_update"));
            new Updater(this).start();
        }

        if (parser.shouldScanDrives()) {
            new USBDriveScanner(this);
        }

        ((RealTimeScanner) scanner).setupDirectoryWatcher();
        LOGGER.info(I18n.tl("initializing_end"));
    }

    public NotificationHandler getNotificationHandler() {
        return notifHandler;
    }

    public CommandLineParser getCommandLineParser() {
        return parser;
    }

    public Database getDatabase() {
        return DATABASE;
    }

    public static AntiMalware getInstance() {
        return instance;
    }

    public Scanner getScanner() {
        return scanner;
    }

    public CheckManager getCheckManager() {
        return CHECK_MANAGER;
    }

    public CacheContainer getCache() {
        return cache;
    }

}
