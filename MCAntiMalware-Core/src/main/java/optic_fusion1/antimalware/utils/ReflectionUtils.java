/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.utils;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public final class ReflectionUtils {

  private static String serverVersion;

  private ReflectionUtils() {
  }

  public static String getVersion(File serverJar) {
    if (serverVersion != null) {
      return serverVersion;
    }

    try ( FileSystem fs = FileSystems.newFileSystem(serverJar.toPath(), new HashMap<>())) {
      Path root = fs.getRootDirectories().iterator().next();
      if (Files.exists(root.resolve("org/bukkit/craftbukkit/bootstrap"))) {
        Path versionsDirPath = Files.list(root.resolve("META-INF/versions")).findFirst().get();
        try ( FileSystem fs2 = FileSystems.newFileSystem(versionsDirPath, new HashMap<>())) {
          Path root2 = fs2.getRootDirectories().iterator().next();
          serverVersion = Files.list(root2.resolve("org/bukkit/craftbukkit"))
                  .filter((path) -> path.getFileName().toString().startsWith("v")).
                  findAny().get().getFileName().toString();
        }
      } else if (Files.exists(root.resolve("org/bukkit/craftbukkit"))) {
        serverVersion = Files.list(root.resolve("org/bukkit/craftbukkit"))
                .filter((path) -> path.getFileName().toString().startsWith("v")).
                findAny().get().getFileName().toString();
      }
      if (serverVersion.endsWith("/")) {
        serverVersion = serverVersion.substring(0, serverVersion.length() - 1);
      }
      return serverVersion;
    } catch (IOException e) {
      LOGGER.exception(e);
    }
    return I18n.tl("minecraft_server_version_not_found");
  }

  public static Class<?> wrapperToPrimitive(Class<?> clazz) {
    if (clazz == Boolean.class) {
      return Boolean.TYPE;
    }
    if (clazz == Integer.class) {
      return Integer.TYPE;
    }
    if (clazz == Double.class) {
      return Double.TYPE;
    }
    if (clazz == Float.class) {
      return Float.TYPE;
    }
    if (clazz == Long.class) {
      return Long.TYPE;
    }
    if (clazz == Short.class) {
      return Short.TYPE;
    }
    if (clazz == Byte.class) {
      return Byte.TYPE;
    }
    if (clazz == Void.class) {
      return Void.TYPE;
    }
    if (clazz == Character.class) {
      return Character.TYPE;
    }
    return clazz;
  }

  public static Class<?>[] toParamTypes(Object... params) {
    Class<?>[] classes = new Class[params.length];
    for (int i = 0; i < params.length; ++i) {
      classes[i] = wrapperToPrimitive(params[i].getClass());
    }
    return classes;
  }

  @SuppressWarnings("unchecked")
  public static Enum<?> getEnum(String enumFullName) {
    String[] x = enumFullName.split("\\.(?=[^.]+$)");
    if (x.length == 2) {
      String enumClassName = x[0];
      String enumName = x[1];
      Class enumClass = getClass(enumClassName);
      if (enumClass != null && enumClass.isEnum()) {
        return Enum.valueOf(enumClass, enumName);
      }
    }
    return null;
  }

  public static Class<?> getClass(String name) {
    try {
      return Class.forName(name);
    } catch (ClassNotFoundException e) {
      return null;
    }
  }

  public static void setValue(Object instance, String fieldName, Object value) {
    try {
      Field field = instance.getClass().getDeclaredField(fieldName);
      field.setAccessible(true);
      field.set(instance, value);
    } catch (IllegalAccessException
            | IllegalArgumentException
            | NoSuchFieldException
            | SecurityException ignored) {
    }
  }

  @SuppressWarnings("deprecation")
  public static Object getValue(Object o, String fieldName) {
    try {
      Field field = o.getClass().getDeclaredField(fieldName);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field.get(o);
    } catch (IllegalAccessException
            | IllegalArgumentException
            | NoSuchFieldException
            | SecurityException e) {
      return null;
    }
  }

  public static Object callMethod(Object object, String method, Object... params) {
    try {
      Class<?> clazz = object.getClass();
      Method m = clazz.getDeclaredMethod(method, toParamTypes(params));
      m.setAccessible(true);
      return m.invoke(object, params);
    } catch (IllegalAccessException
            | IllegalArgumentException
            | NoSuchMethodException
            | SecurityException
            | InvocationTargetException e) {
      return null;
    }
  }

  @SuppressWarnings("deprecation")
  public static Method getMethod(Object o, String methodName, Class<?>... params) {
    try {
      Method method = o.getClass().getMethod(methodName, params);
      if (!method.isAccessible()) {
        method.setAccessible(true);
      }
      return method;
    } catch (NoSuchMethodException | SecurityException e) {
      return null;
    }
  }

  public static Field getField(Field field) {
    field.setAccessible(true);
    return field;
  }
}
