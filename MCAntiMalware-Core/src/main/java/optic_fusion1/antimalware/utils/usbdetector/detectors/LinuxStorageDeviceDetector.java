/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.detectors;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.utils.usbdetector.USBStorageDevice;
import static optic_fusion1.antimalware.utils.usbdetector.detectors.AbstractStorageDeviceDetector.getUSBDevice;
import optic_fusion1.antimalware.utils.usbdetector.process.CommandExecutor;

/**
 * @author samuelcampos
 */
public class LinuxStorageDeviceDetector extends AbstractStorageDeviceDetector {

    private static final String CMD_DF = "df -l";
    private static final Pattern COMMAND1PATTERN = Pattern.compile("^(\\/[^ ]+)[^%]+%[ ]+(.+)$");
    private static final String CMD_CHECK_USB = "udevadm info -q property -n ";
    private static final String INFO_BUS = "ID_BUS";
    private static final String INFO_USB = "usb";
    private static final String INFO_NAME = "ID_FS_LABEL";
    private static final String INFO_UUID = "ID_FS_UUID";
    private static final String DISK_PREFIX = "/dev/";

    protected LinuxStorageDeviceDetector() {
    }

    private void readDiskInfo(DiskInfo disk) {
        String command = CMD_CHECK_USB + disk.getDevice();
        try (CommandExecutor commandExecutor = new CommandExecutor(command)) {
            commandExecutor.processOutput(outputLine -> {
                String[] parts = outputLine.split("=");
                if (parts.length > 1) {
                    switch (parts[0].trim()) {
                        case INFO_BUS ->
                            disk.setUSB(INFO_USB.equals(parts[1].trim()));
                        case INFO_NAME ->
                            disk.setName(parts[1].trim());
                        case INFO_UUID ->
                            disk.setUuid(parts[1].trim());
                    }
                }
            });
        } catch (IOException e) {
            LOGGER.exception(e);
        }
    }

    @Override
    public List<USBStorageDevice> getStorageDevices() {
        List<USBStorageDevice> listDevices = new ArrayList<>();
        try (CommandExecutor commandExecutor = new CommandExecutor(CMD_DF)) {
            commandExecutor.processOutput((String outputLine) -> {
                Matcher matcher = COMMAND1PATTERN.matcher(outputLine);
                if (matcher.matches()) {
                    String device = matcher.group(1);
                    String rootPath = matcher.group(2);
                    if (device.startsWith(DISK_PREFIX)) {
                        DiskInfo disk = new DiskInfo(device);
                        disk.setMountPoint(rootPath);
                        readDiskInfo(disk);
                        if (disk.isUSB()) {
                            getUSBDevice(disk.getMountPoint(), disk.getName(), disk.getDevice(), disk.getUuid()).ifPresent(listDevices::add);
                        }
                    }
                }
            });
        } catch (IOException e) {
            LOGGER.exception(e);
        }
        return listDevices;
    }
}
