/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.detectors;

import java.io.File;
import java.util.List;
import java.util.Optional;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import static optic_fusion1.antimalware.utils.I18n.tl;
import optic_fusion1.antimalware.utils.usbdetector.USBStorageDevice;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.LINUX;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.MAC_OS;
import static optic_fusion1.antimalware.utils.usbdetector.utils.OSType.WINDOWS;
import optic_fusion1.antimalware.utils.usbdetector.utils.OSUtils;

/**
 * @author samuelcampos
 */
public abstract class AbstractStorageDeviceDetector {

    private static AbstractStorageDeviceDetector instance;

    public static synchronized AbstractStorageDeviceDetector getInstance() {
        if (instance == null) {
            switch (OSUtils.getOsType()) {
                case WINDOWS ->
                    instance = new WindowsStorageDeviceDetector();
                case LINUX ->
                    instance = new LinuxStorageDeviceDetector();
                case MAC_OS ->
                    instance = new OSXStorageDeviceDetector();
            }
        }
        return instance;
    }

    protected AbstractStorageDeviceDetector() {
    }

    public abstract List<USBStorageDevice> getStorageDevices();

    static Optional<USBStorageDevice> getUSBDevice(String rootPath) {
        return getUSBDevice(rootPath, null, null, null);
    }

    static Optional<USBStorageDevice> getUSBDevice(String rootPath, String deviceName, String device, String uuid) {
        File root = new File(rootPath);
        if (!root.isDirectory()) {
            LOGGER.info(tl("usb_detector_invalid_root_found", root));
            return Optional.empty();
        }
        LOGGER.info(tl("usb_detector_device_found", root.getPath()));
        try {
            return Optional.of(new USBStorageDevice(root, deviceName, device, uuid));
        } catch (IllegalArgumentException e) {
            LOGGER.info(tl("usb_detector_could_not_add_device", e.getMessage()));
            LOGGER.exception(e);
        }
        return Optional.empty();
    }

}
