/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.detectors;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.filechooser.FileSystemView;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.utils.usbdetector.USBStorageDevice;
import optic_fusion1.antimalware.utils.usbdetector.process.CommandExecutor;

/**
 * @author samuelcampos
 */
public class WindowsStorageDeviceDetector extends AbstractStorageDeviceDetector {

    private static final String WMIC_PATH = System.getenv("WINDIR") + "\\System32\\wbem\\wmic.exe";
    private static final String CMD_WMI_ARGS = "logicaldisk where drivetype=2 get DeviceID,VolumeSerialNumber,VolumeName";
    private static final String CMD_WMI_USB = WMIC_PATH + " " + CMD_WMI_ARGS;

    protected WindowsStorageDeviceDetector() {
    }

    @Override
    public List<USBStorageDevice> getStorageDevices() {
        List<USBStorageDevice> listDevices = new ArrayList<>();
        try (CommandExecutor commandExecutor = new CommandExecutor(CMD_WMI_USB)) {
            commandExecutor.processOutput(outputLine -> {
                String[] parts = outputLine.split(" ");
                if (parts.length > 1 && !parts[0].isEmpty() && !parts[0].equals("DeviceID") && !parts[0].equals(parts[parts.length - 1])) {
                    String rootPath = parts[0] + File.separatorChar;
                    String uuid = parts[parts.length - 1];
                    String volumeName = parseVolumeName(parts);
                    if (volumeName.isEmpty()) {
                        volumeName = getDeviceName(rootPath);
                    }
                    getUSBDevice(rootPath, volumeName, rootPath, uuid).ifPresent(listDevices::add);
                }
            });
        } catch (IOException e) {
            LOGGER.exception(e);
        }
        return listDevices;
    }

    private String parseVolumeName(String[] parts) {
        StringBuilder volumeLabel = new StringBuilder();
        for (int i = 1; i < parts.length - 1; i++) {
            if (!parts[i].isEmpty()) {
                if (volumeLabel.length() > 0) {
                    volumeLabel.append(" ");
                }
                volumeLabel.append(parts[i]);
            }
        }
        return volumeLabel.toString();
    }

    private String getDeviceName(String rootPath) {
        File f = new File(rootPath);
        FileSystemView v = FileSystemView.getFileSystemView();
        String name = v.getSystemDisplayName(f);
        if (name != null) {
            int idx = name.lastIndexOf('(');
            if (idx != -1) {
                name = name.substring(0, idx);
            }
            name = name.trim();
            if (name.isEmpty()) {
                name = null;
            }
        }
        return name;
    }
}
