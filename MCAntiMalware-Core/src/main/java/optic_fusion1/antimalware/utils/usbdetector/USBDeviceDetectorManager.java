/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector;

import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import static optic_fusion1.antimalware.utils.I18n.tl;
import optic_fusion1.antimalware.utils.usbdetector.detectors.AbstractStorageDeviceDetector;
import optic_fusion1.antimalware.utils.usbdetector.events.DeviceEventType;
import optic_fusion1.antimalware.utils.usbdetector.events.IUSBDriveListener;
import optic_fusion1.antimalware.utils.usbdetector.events.USBStorageEvent;
import optic_fusion1.antimalware.utils.usbdetector.unmounters.AbstractStorageDeviceUnmounter;

/**
 * @author samuelcampos
 */
public class USBDeviceDetectorManager implements Closeable {

    private static final long DEFAULT_POLLING_INTERVAL_MILLIS = 5000;
    private final Set<USBStorageDevice> connectedDevices = new HashSet<>();
    private final List<IUSBDriveListener> listeners = new ArrayList<>();
    private final ScheduledExecutorService taskExecutor = Executors.newSingleThreadScheduledExecutor();
    private long currentPollingInterval;
    private ScheduledFuture<?> listenerTaskFuture;

    public USBDeviceDetectorManager() {
        this(DEFAULT_POLLING_INTERVAL_MILLIS);
    }

    public USBDeviceDetectorManager(long pollingInterval) {
        currentPollingInterval = pollingInterval;
    }

    public synchronized void setPollingInterval(long pollingInterval) {
        if (pollingInterval <= 0) {
            throw new IllegalArgumentException(tl("usb_detector_invalid_polling_interval"));
        }
        currentPollingInterval = pollingInterval;
        if (!listeners.isEmpty()) {
            stop();
            start();
        }
    }

    private synchronized void start() {
        if (listenerTaskFuture == null || listenerTaskFuture.isDone()) {
            listenerTaskFuture = taskExecutor.scheduleAtFixedRate(new ListenerTask(), 0, currentPollingInterval, TimeUnit.MILLISECONDS);
        }
    }

    private synchronized void stop() {
        if (listenerTaskFuture != null) {
            listenerTaskFuture.cancel(false);
        }
    }

    public synchronized boolean addDriveListener(IUSBDriveListener listener) {
        if (listeners.contains(listener)) {
            return false;
        }
        listeners.add(listener);
        start();
        return true;
    }

    public synchronized boolean removeDriveListener(IUSBDriveListener listener) {
        final boolean removed = listeners.remove(listener);
        if (listeners.isEmpty()) {
            stop();
        }
        return removed;
    }

    public List<USBStorageDevice> getRemovableDevices() {
        return AbstractStorageDeviceDetector.getInstance().getStorageDevices();
    }

    public void unmountStorageDevice(USBStorageDevice usbStorageDevice) throws IOException {
        AbstractStorageDeviceUnmounter.getInstance().unmount(usbStorageDevice);
    }

    private void updateConnectedDevices(List<USBStorageDevice> currentConnectedDevices) {
        List<USBStorageDevice> removedDevices = new ArrayList<>();
        synchronized (this) {
            Iterator<USBStorageDevice> itConnectedDevices = connectedDevices.iterator();
            while (itConnectedDevices.hasNext()) {
                final USBStorageDevice device = itConnectedDevices.next();
                if (!currentConnectedDevices.contains(device)) {
                    removedDevices.add(device);
                    itConnectedDevices.remove();
                    continue;
                }
                currentConnectedDevices.remove(device);
            }
            connectedDevices.addAll(currentConnectedDevices);
        }
        currentConnectedDevices.forEach(device -> sendEventToListeners(new USBStorageEvent(device, DeviceEventType.CONNECTED)));
        removedDevices.forEach(device -> sendEventToListeners(new USBStorageEvent(device, DeviceEventType.REMOVED)));
    }

    private void sendEventToListeners(USBStorageEvent event) {
        List<IUSBDriveListener> listenersCopy;
        synchronized (listeners) {
            listenersCopy = new ArrayList<>(listeners);
        }
        listenersCopy.forEach(listener -> {
            try {
                listener.usbDriveEvent(event);
            } catch (Exception ex) {
                LOGGER.error(tl("usb_detector_iusbdrivelistener_thrown_error"), ex);
            }
        });
    }

    @Override
    public void close() throws IOException {
        taskExecutor.shutdown();
        try {
            taskExecutor.awaitTermination(5, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            LOGGER.warn(tl("usb_detector_task_execute_temination_fail"), e);
        }
    }

    private class ListenerTask implements Runnable {

        @Override
        public void run() {
            try {
                LOGGER.info(tl("usb_detector_polling_refresh_task_running"));
                List<USBStorageDevice> actualConnectedDevices = getRemovableDevices();
                updateConnectedDevices(actualConnectedDevices);
            } catch (Exception e) {
                LOGGER.error(tl("usb_detector_refresh_device_list_fail"), e);
            }
        }
    }
}
