/*
 * Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.detectors;

import optic_fusion1.antimalware.utils.usbdetector.USBStorageDevice;
import optic_fusion1.antimalware.utils.usbdetector.process.CommandExecutor;
import optic_fusion1.antimalware.utils.usbdetector.utils.OSUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

/**
 *
 * @author samuelcampos
 */
public class OSXStorageDeviceDetector extends AbstractStorageDeviceDetector {

  private static final String CMD_SYSTEM_PROFILER_USB = "system_profiler SPUSBDataType";
  private static final Pattern MACOSXPATTERN_MOUNT = Pattern.compile("^.*Mount Point: (.+)$");

  private static final String CMD_DF = "df -l";
  private static final String CMD_DISKUTIL = "diskutil info ";

  private static final String DISK_PREFIX = "/dev/disk";

  private static final String INFO_MOUNTPOINT = "Mount Point";
  private static final String INFO_PROTOCOL = "Protocol";
  private static final String INFO_USB = "USB";
  private static final String INFO_NAME = "Volume Name";
  private static final String INFO_UUID = "Volume UUID";

  private static final int MACOSX_MOUNTAINLION = 8;

  private int macosVersion = -1;

  protected OSXStorageDeviceDetector() {
    super();

    final String version = OSUtils.getOsVersion();
    final String[] versionParts = version.split("\\.");

    if (versionParts.length > 1) {
      try {
        macosVersion = Integer.parseInt(versionParts[1]);
      } catch (NumberFormatException nfe) {
        LOGGER.exception(nfe);
      }
    }

  }

  @Override
  public List<USBStorageDevice> getStorageDevices() {
    final ArrayList<USBStorageDevice> listDevices = new ArrayList<>();

    if (macosVersion >= MACOSX_MOUNTAINLION) {
      try (final CommandExecutor commandExecutor = new CommandExecutor(CMD_DF)) {

        commandExecutor.processOutput((String outputLine) -> {
          final String[] parts = outputLine.split("\\s");
          final String device = parts[0];

          if (device.startsWith(DISK_PREFIX)) {
            final DiskInfo disk = getDiskInfo(device);

            if (disk.isUSB()) {
              getUSBDevice(disk.getMountPoint(), disk.getName(), disk.getDevice(), disk.getUuid())
                      .ifPresent(listDevices::add);
            }
          }

        });

      } catch (IOException e) {
        LOGGER.exception(e);
      }
    } else {
      try (final CommandExecutor commandExecutor = new CommandExecutor(CMD_SYSTEM_PROFILER_USB)) {
        commandExecutor.processOutput(outputLine -> {
          final Matcher matcher = MACOSXPATTERN_MOUNT.matcher(outputLine);

          if (matcher.matches()) {
            getUSBDevice(matcher.group(1))
                    .ifPresent(listDevices::add);
          }
        });

      } catch (IOException e) {
        LOGGER.exception(e);
      }
    }

    return listDevices;
  }

  private DiskInfo getDiskInfo(final String device) {

    final DiskInfo disk = new DiskInfo(device);
    final String command = CMD_DISKUTIL + disk.getDevice();

    try (final CommandExecutor commandExecutor = new CommandExecutor(command)) {

      commandExecutor.processOutput(outputLine -> {

        final String[] parts = outputLine.split(":");

        if (parts.length > 1) {
          switch (parts[0].trim()) {
            case INFO_MOUNTPOINT -> disk.setMountPoint(parts[1].trim());
            case INFO_PROTOCOL -> disk.setUSB(INFO_USB.equals(parts[1].trim()));
            case INFO_NAME -> disk.setName(parts[1].trim());
            case INFO_UUID -> disk.setUuid(parts[1].trim());
          }
        }

      });

    } catch (IOException e) {
      LOGGER.exception(e);
    }

    return disk;
  }
}
