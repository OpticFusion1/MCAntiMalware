/* Copyright 2014 samuelcampos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package optic_fusion1.antimalware.utils.usbdetector.process;

import io.github.pixee.security.SystemCommand;
import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.function.Consumer;
import java.util.function.Predicate;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import static optic_fusion1.antimalware.utils.I18n.tl;

/**
 * @author samuelcampos
 */
public class CommandExecutor implements Closeable {

    private final String command;
    private final BufferedReader input;
    private final Process process;

    public CommandExecutor(String command) throws IOException {
        LOGGER.info(tl("usb_detector_running_command", command));
        this.command = command;
        process = SystemCommand.runCommand(Runtime.getRuntime(), command);
        input = new BufferedReader(new InputStreamReader(process.getInputStream()));
    }

    public void processOutput(Consumer<String> method) throws IOException {
        String outputLine;
        while ((outputLine = this.readOutputLine()) != null) {
            method.accept(outputLine);
        }
    }

    public boolean checkOutput(Predicate<String> method) throws IOException {
        String outputLine;
        while ((outputLine = readOutputLine()) != null) {
            if (method.test(outputLine)) {
                return true;
            }
        }
        return false;
    }

    private String readOutputLine() throws IOException {
        if (input == null) {
            throw new IllegalStateException(tl("usb_detector_input_null"));
        }
        String outputLine = input.readLine();
        if (outputLine != null) {
            return outputLine.trim();
        }
        return null;
    }

    @Override
    public void close() throws IOException {
        try {
            int exitValue = process.waitFor();
            if (exitValue != 0) {
                LOGGER.warn("usb_detector_abnormal_command", new Object[]{command, exitValue});
            }
        } catch (InterruptedException e) {
            LOGGER.exception(e);
        }
        if (input != null) {
            try {
                input.close();
            } catch (IOException e) {
                LOGGER.exception(e);
            }
        }
        process.destroy();
    }

}
