/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HttpsURLConnection;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.utils.I18n;
import optic_fusion1.antimalware.utils.StringUtils;

public class Updater {

    private final AntiMalware antiMalware;

    public Updater(AntiMalware antiMalware) {
        this.antiMalware = antiMalware;
    }

    /**
     * Starts a periodic task that checks for updates, downloads the remote database, and scans files using the updated database
     *
     * The task runs every 4 hours, starting 1 hour after the start method is called.
     */
    public void start() {
        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
        executor.scheduleAtFixedRate(() -> {
            checkForUpdate();
            downloadDatabase(true);
            rescanDatabase();
        }, 1, 4, TimeUnit.HOURS);
    }

    private void rescanDatabase() {
        LOGGER.info(I18n.tl("scanner_rescan_start"));
        antiMalware.getScanner().scanFiles();
        LOGGER.info(I18n.tl("scanner_rescan__end"));
    }

    /**
     * Downloads and connects to a database
     *
     * @param isUpdate Whether the database download is being performed as an update or not. Only used for logging purposes
     */
    private void downloadDatabase(boolean isUpdate) {
        LOGGER.info(I18n.tl("database_download_start", (isUpdate ? I18n.tl("database_download_auto_update") : "")));
        antiMalware.getDatabase().downloadAndConnect();
        LOGGER.info(I18n.tl("database_update_end"));
    }

    /**
     * Gets both the programs version and the most recent version, and logs an update message is the program is out of date
     */
    private void checkForUpdate() {
        try {
            LOGGER.info(I18n.tl("update_check"));
            String programVersion = ResourceBundle.getBundle("info", Locale.ENGLISH).getString("currentVersion");

            // Gets the most recent version
            HttpsURLConnection connection = (HttpsURLConnection) new URL("https://api.spigotmc.org/legacy/update.php?resource=64982").openConnection();
            connection.setConnectTimeout(2000);
            connection.setReadTimeout(2000);
            String currentVersion = new BufferedReader(new InputStreamReader(connection.getInputStream())).readLine();
            connection.disconnect();

            if (versionCompare(programVersion, currentVersion) == 2) {
                LOGGER.info(I18n.tl("update_message", programVersion, currentVersion));
            }
        } catch (IOException ex) {
            LOGGER.exception(ex);
        }
    }

    /**
     * Compares two version strings.
     *
     * The version strings are expected to be in the "X.Y.Z" format, where X, Y, and Z are integers or lowercase letters. The comparison is performed by comparing each segment (X, Y, Z) in order. If a segment is a letter, it is converted to a numerical value based on its position in the alphabet (a = 1, b = 2, etc.). If the version strings have a different number number of segments, the shorter string is padded with ".0" segments to match the length of the longer string.
     *
     * @param programVersion The version of the program
     * @param currentVersion The most recent version
     *
     * @return 0 If strings are equal, 1 if programVersion is greater, otherwise 2
     */
    private int versionCompare(String programVersion, String currentVersion) {
        int programVersionLen = StringUtils.countMatches(programVersion, ".");
        int currentVersionLen = StringUtils.countMatches(currentVersion, ".");

        // Checks if the lengths are different, and if they are it pads the shortest string
        if (programVersionLen != currentVersionLen) {
            int count = Math.abs(programVersionLen - currentVersionLen);
            if (programVersionLen > currentVersionLen) {
                for (int i = 1; i <= count; i++) {
                    currentVersion += ".0";
                }
            } else {
                for (int i = 1; i <= count; i++) {
                    programVersion += ".0";
                }
            }
        }

        if (programVersion.equals(currentVersion)) {
            return 0;
        }

        String[] programVersionStr = StringUtils.split(programVersion, ".");
        String[] currentVersionStr = StringUtils.split(currentVersion, ".");

        // Loops through the "programVersion" and "currentVersion" strings and replaces letters with numbers as necessary
        for (int i = 0; i < programVersionStr.length; i++) {
            String str1 = "", str2 = "";
            // TODO: These two for loops are the same thing, should be moved into a method
            for (char c : programVersionStr[i].toCharArray()) {
                if (Character.isLetter(c)) {
                    int u = c - 'a' + 1;
                    if (u < 10) {
                        str1 += "0" + u;
                    } else {
                        str1 += String.valueOf(u);
                    }
                } else {
                    str1 += String.valueOf(c);
                }
            }
            for (char c : currentVersionStr[i].toCharArray()) {
                if (Character.isLetter(c)) {
                    int u = c - 'a' + 1;
                    if (u < 10) {
                        str2 += "0" + u;
                    } else {
                        str2 += String.valueOf(u);
                    }
                } else {
                    str2 += String.valueOf(c);
                }
            }
            programVersionStr[i] = "1" + str1;
            currentVersionStr[i] = "1" + str2;

            int progVersion = Integer.parseInt(programVersionStr[i]);
            int currVersion = Integer.parseInt(currentVersionStr[i]);

            if (progVersion != currVersion) {
                return progVersion > currVersion ? 1 : 2;
            }
        }
        return -1;
    }

}
