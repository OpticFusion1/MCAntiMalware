/*
 * Copyright (C) 2021 Optic_Fusion1
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HttpsURLConnection;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

import optic_fusion1.antimalware.utils.I18n;
import optic_fusion1.antimalware.utils.StringUtils;

public final class Updater
{

    private final AntiMalware antiMalware;

    public Updater(AntiMalware antiMalware)
    {
        this.antiMalware = antiMalware;
    }

    public void start()
    {
        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
        executor.scheduleAtFixedRate(() -> {
            downloadDatabase(true);
            checkForUpdate();
        }, 1, 4, TimeUnit.HOURS);
    }

    private void downloadDatabase(boolean isUpdate)
    {
        LOGGER.info(I18n.tl("database_download_start", (isUpdate ? I18n.tl("database_download_auto_update") : "")));
        antiMalware.getDatabase().downloadAndConnect();
        LOGGER.info(I18n.tl("database_update_end"));
        LOGGER.info(I18n.tl("scanner_rescan_start"));
        antiMalware.getScanner().scanFiles();
        LOGGER.info(I18n.tl("scanner_rescan__end"));
    }

    private void checkForUpdate()
    {
        try {
            LOGGER.info(I18n.tl("update_check"));
            String programVersion = ResourceBundle.getBundle("info", Locale.ENGLISH).getString("currentVersion");
            HttpsURLConnection connection = (HttpsURLConnection) new URL("https://api.spigotmc.org/legacy/update.php?resource=64982").openConnection();
            connection.setConnectTimeout(2000);
            connection.setReadTimeout(2000);
            String currentVersion = new BufferedReader(new InputStreamReader(connection.getInputStream())).readLine();
            connection.disconnect();
            if (versionCompare(programVersion, currentVersion) == 2) {
                LOGGER.info(I18n.tl("update_message", programVersion, currentVersion));
            }
        } catch (IOException ex) {
            LOGGER.exception(ex);
        }
    }

    private static int versionCompare(String programVersion, String currentVersion)
    {
        final int programVersionLen = StringUtils.countMatches(programVersion, ".");
        final int currentVersionLen = StringUtils.countMatches(currentVersion, ".");

        if (programVersionLen != currentVersionLen) {
            final int count = Math.abs(programVersionLen - currentVersionLen);
            if (programVersionLen > currentVersionLen) currentVersion += ".0".repeat(count);
            else programVersion += ".0".repeat(count);
        }

        if (programVersion.equals(currentVersion)) {
            return 0;
        }

        final String[] programVersionStr = StringUtils.split(programVersion, ".");
        final String[] currentVersionStr = StringUtils.split(currentVersion, ".");

        for (int i = 0; i < programVersionStr.length; ++i) {
            programVersionStr[i] = "1" + processVersionPart(programVersionStr[i]);
            currentVersionStr[i] = "1" +  processVersionPart(currentVersionStr[i]);

            final int programVersionNumber = Integer.parseInt(programVersionStr[i]);
            final int currentVersionNumber = Integer.parseInt(currentVersionStr[i]);

            if(programVersionNumber != currentVersionNumber) return programVersionNumber > currentVersionNumber ? 1 : 2;
        }
        return -1;
    }

    private static String processVersionPart(String programVersionStr)
    {
        final StringBuilder sb = new StringBuilder();
        for (char c : programVersionStr.toCharArray()) {
            if (Character.isLetter(c)) {
                int u = c - 'a' + 1;
                if (u < 10) sb.append('0').append(u);
                else sb.append(u);
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}
