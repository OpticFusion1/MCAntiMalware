package optic_fusion1.antimalware.check.impl.forceop;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.utils.ByteCodeUtils;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class ForceOpCheckA extends BaseCheck {

    private static final List<String> METHOD_INSN_NODE_OWNERS = new ArrayList<>();

    static {
        METHOD_INSN_NODE_OWNERS.add("org/bukkit/entity/Player");
        METHOD_INSN_NODE_OWNERS.add("org/bukkit/OfflinePlayer");
        METHOD_INSN_NODE_OWNERS.add("org/bukkit/command/CommandSender");
        METHOD_INSN_NODE_OWNERS.add("org/bukkit/permissions/ServerOperator");
    }

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        List<CheckResult> results = new ArrayList<>();
        for (MethodNode methodNode : classNode.methods) {
            int i = detect(methodNode);
            if (i == -1) {
                continue;
            }
            results.add(new CheckResult("Spigot", "MALWARE", "ForceOP", "A", classNode.sourceFile, classNode.name, i));
        }
        return results;
    }

    private int detect(MethodNode methodNode) {
        boolean setOpTrue = false;
        boolean setOpFalse = false;
        int curLine = -1;
        int foundLine = -1;
        for (AbstractInsnNode instruction : methodNode.instructions) {
            if (instruction instanceof MethodInsnNode methodInsnNode) {
                if (METHOD_INSN_NODE_OWNERS.contains(methodInsnNode.owner)) {
                    if (!(methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V"))) {
                        continue;
                    }
                    AbstractInsnNode previous = methodInsnNode.getPrevious();
                    if (ByteCodeUtils.matches(previous, 1)) {
                        setOpTrue = true;
                        foundLine = curLine;
                    } else {
                        if (setOpTrue) {
                            setOpFalse = true;
                        }
                    }
                }
            } else if (instruction instanceof LineNumberNode lineNumberNode) {
                curLine = lineNumberNode.line;
            }
        }
        return (setOpTrue && !setOpFalse) ? foundLine : -1;
    }

}
