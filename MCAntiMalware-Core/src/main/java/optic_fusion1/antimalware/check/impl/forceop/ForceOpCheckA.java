package optic_fusion1.antimalware.check.impl.forceop;

import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.utils.ByteCodeUtils;
import org.objectweb.asm.tree.*;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class ForceOpCheckA extends BaseCheck {

    private static final Set<String> METHOD_INSN_NODE_OWNERS = Set.of("org/bukkit/entity/Player",
                                                                      "org/bukkit/OfflinePlayer",
                                                                      "org/bukkit/command/CommandSender",
                                                                      "org/bukkit/permissions/ServerOperator");

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        final List<CheckResult> results = new ArrayList<>();
        for (MethodNode methodNode : classNode.methods) {
            int i = detect(methodNode);
            if (i == -1) {
                continue;
            }
            results.add(new CheckResult("Spigot", "MALWARE", "ForceOP", "A", classNode.sourceFile, classNode.name, i));
        }
        return results;
    }

    private int detect(MethodNode methodNode) {
        boolean setOpTrue = false;
        boolean setOpFalse = false;
        int curLine = -1;
        int foundLine = -1;
        for (AbstractInsnNode instruction : methodNode.instructions) {
            if (instruction instanceof MethodInsnNode methodInsnNode) {
                if(METHOD_INSN_NODE_OWNERS.contains(methodInsnNode.owner)){
                    if (!"setOp".equals(methodInsnNode.name) || !"(Z)V".equals(methodInsnNode.desc)) continue;

                    final AbstractInsnNode previous = methodInsnNode.getPrevious();
                    if (ByteCodeUtils.matches(previous, 1)) {
                        setOpTrue = true;
                        foundLine = curLine;
                    } else if (ByteCodeUtils.matches(previous, 0)) {
                        setOpFalse = true;
                    }
                }
            } else if (instruction instanceof LineNumberNode lineNumberNode) {
                curLine = lineNumberNode.line;
            }
        }
        return (setOpTrue && !setOpFalse) ? foundLine : -1;
    }

}
