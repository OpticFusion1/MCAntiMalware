/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public final class ProcessCreationCheck extends BaseCheck {

    @Override
    public List<CheckResult> process(final ClassNode classNode,
                                     final Path rootFolder,
                                     final Path zipFile,
                                     final CacheContainer cache) {
        final List<CheckResult> results = new ArrayList<>();
        for (final MethodNode method : classNode.methods) {
            for (final AbstractInsnNode instruction : method.instructions) {
                if (instruction instanceof MethodInsnNode methodInsnNode) {
                    if (!methodInsnNode.owner.equals("java/lang/ProcessBuilder")) continue;
                    if (!methodInsnNode.name.equals("start")) continue;
                    results.add(new CheckResult(
                            "Spigot", "MALWARE", "Botnet-Downloader",
                            classNode.name + "#" + method.name + ": creating subprocesses"));
                }
            }
        }
        return results;
    }
}
