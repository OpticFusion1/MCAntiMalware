/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

// TODO: Fully implement this
public class SystemAccessCheck extends BaseCheck {

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        String[] variant = new String[]{null};
        boolean found = false;
        for (MethodNode methodNode : classNode.methods) {
            for (AbstractInsnNode insnNode : methodNode.instructions.toArray()) {
                /*
            if (insnNode instanceof LdcInsnNode) {
              String string = ((LdcInsnNode) insnNode).cst.toString();
              if (string.equals("java.lang.Runtime")) {
                MethodInsnNode nextNode = (MethodInsnNode) insnNode.getNext();
                if (nextNode.name.equals("forName") && nextNode.owner.equals("java/lang/Class")
                        && nextNode.desc.equals("(Ljava/lang/String;)Ljava/lang/Class;")) {
                  variant[0] = "Reflection";
                }
              }
            }
                 */
                if (insnNode instanceof MethodInsnNode) {
                    MethodInsnNode methodInsnNode = (MethodInsnNode) insnNode;
                    /*if (methodInsnNode.owner.startsWith("java/lang/Process")
                      || Type.getReturnType(methodInsnNode.desc).getClassName().startsWith("java.lang.Process")) {
                variant[0] = "Process";
              } else*/ if (methodInsnNode.owner.equals("java/lang/Runtime")) {
                        if (methodInsnNode.name.equals("exec")) {
                            // TODO: Make this take into account arrays
                            // ATTEMPTED FIX
                            AbstractInsnNode previous = methodInsnNode.getPrevious();
                            if (previous instanceof LdcInsnNode) {
                                variant[0] = "Exec";
                                LdcInsnNode ldc = (LdcInsnNode) previous;
                                if (cache.containsBlacklistedString(ldc.cst.toString())) {
                                    setClassNodePath(classNode.name);
                                    setSourceFilePath(classNode.sourceFile);
                                    found = true;
                                }
                                break;
                            }
                            break;
                            // ATTEMPTED FIX
                        }
                        /*else if (methodInsnNode.name.equals("getRuntime")) {
                  variant[0] = "GetRuntime";
                }*/
                    }
                    if (variant[0] != null) {
                        setClassNodePath(classNode.name);
                        setSourceFilePath(classNode.sourceFile);
                        found = true;
                        break;
                    }
                } else if (insnNode instanceof LineNumberNode) {
                    setLine(((LineNumberNode) insnNode).line);
                }
            }
        }
        if (found) {
            List<CheckResult> result = new ArrayList<>();
            result.add(new CheckResult("Spigot", "MALWARE", "SystemAccess", variant[0], getSourceFilePath(), getClassNodePath(), getLine()));
            return result;
        }
        return new ArrayList<>();
    }

}
