package optic_fusion1.antimalware.check.impl.forceop;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.TypeInsnNode;

public class ForceOpCheckC extends BaseCheck {

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        List<CheckResult> result = new ArrayList<>();
        for (MethodNode methodNode : classNode.methods) {
            int i = detectForceOP(methodNode);
            if (i != -1) {
                result.add(new CheckResult("Spigot", "MALWARE", "ForceOP", "C", classNode.sourceFile,
                        classNode.name, i));
            }
        }
        return result;
    }

    public int detectForceOP(MethodNode node) {
        for (AbstractInsnNode instruction : node.instructions.toArray()) {
            if (instruction instanceof LdcInsnNode ldcInsnNode) {
                if (!(ldcInsnNode.cst instanceof String)) {
                    continue;
                }
                String value = (String) ldcInsnNode.cst;
                if (!value.equalsIgnoreCase("setOp")) {
                    continue;
                }
                AbstractInsnNode next = instruction.getNext();
                if (!(next.getOpcode() == Opcodes.ICONST_1)) {
                    continue;
                }
                AbstractInsnNode nextNext = next.getNext();
                if (!(nextNext.getOpcode() == Opcodes.ANEWARRAY)) {
                    continue;
                }
                TypeInsnNode typeInsnNode = (TypeInsnNode) nextNext;
                if (!typeInsnNode.desc.equals(("java/lang/Class"))) {
                    continue;
                }
                AbstractInsnNode nextNextNext = nextNext.getNext();
                if (nextNextNext.getOpcode() != Opcodes.DUP) {
                    continue;
                }
                AbstractInsnNode nextNextNextNext = nextNextNext.getNext();
                if (nextNextNextNext.getOpcode() != Opcodes.ICONST_0) {
                    continue;
                }
                AbstractInsnNode nextNextNextNextNext = nextNextNextNext.getNext();
                if (nextNextNextNextNext.getOpcode() != Opcodes.GETSTATIC) {
                    continue;
                }
                FieldInsnNode fieldInsnNode = (FieldInsnNode) nextNextNextNextNext;
                if (!fieldInsnNode.owner.equals("java/lang/Boolean") && !fieldInsnNode.name.equals("TYPE") && !fieldInsnNode.desc.equals("Ljava/lang/Class")) {
                    continue;
                }
                AbstractInsnNode nextNextNextNextNextNext = nextNextNextNextNext.getNext();
                if (nextNextNextNextNextNext.getOpcode() != Opcodes.AASTORE) {
                    continue;
                }
                AbstractInsnNode nextNextNextNextNextNextNext = nextNextNextNextNextNext.getNext();
                if (nextNextNextNextNextNextNext.getOpcode() != Opcodes.INVOKEVIRTUAL) {
                    continue;
                }
                MethodInsnNode methodInsnNode = (MethodInsnNode) nextNextNextNextNextNextNext;
                if (!methodInsnNode.owner.equals("java/lang/Class") && !methodInsnNode.name.equals("getMethod")
                        && !methodInsnNode.desc.equals("(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;")) {
                    continue;
                }
                return 1;
            }
        }
        return -1;
    }

}
