/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.*;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class CrasherCheck extends BaseCheck {

  @Override
  public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
    List<CheckResult> results = new ArrayList<>();
    for (MethodNode method : classNode.methods) {
      int i = detectCrasher(method);
      if (i != -1) {
        results.add(new CheckResult("Spigot", "MALWARE", "Crasher", "A", classNode.sourceFile, classNode.name, i));
      }
    }
    return results;
  }

  public int detectCrasher(MethodNode node) {
    int curLine = -1;
    try {
      for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
        if (!(abstractInsnNode instanceof MethodInsnNode)) {
          continue;
        }
        if (abstractInsnNode instanceof MethodInsnNode methodInsnNode) {
          // Variant A
          if (methodInsnNode.owner.equals("org/bukkit/entityPlayer")) {
            if (methodInsnNode.name.equals("setHealthScale") && methodInsnNode.desc.equals("(D)V")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Double) {
                  double d = (Double) ldcNode.cst;
                  if (d == Double.MAX_VALUE) {
                    return curLine;
                  }
                  return -1;
                }
                float f = (Float) ldcNode.cst;
                if (f == Float.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
            }
          }
          // Variant B
          if (methodInsnNode.owner.equals("java/lang/Thread")
                  || methodInsnNode.owner.equals("java/util/concurrent/TimeUnit")) {
            if (methodInsnNode.name.equals("sleep") && methodInsnNode.desc.equals("(J)V")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Long) {
                  long l = (Long) ldcNode.cst;
                  if (l == 9223372036854775807L) {
                    return curLine;
                  }
                }
              }
            }
          }
          // Variant C
          if (methodInsnNode.owner.equals("org/bukkit/Bukkit")) {
            if (methodInsnNode.name.equals("createInventory") && methodInsnNode.desc.equals("(Lorg/bukkit/inventory/InventoryHolder;I)Lorg/bukkit/inventory/Inventory;")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                int i = (int) ldcNode.cst;
                if (i == 1152000) {
                  return curLine;
                }
              }
            }
          }
          // Variant D
          if (methodInsnNode.owner.equals("org/bukkit/World")) {
            if (methodInsnNode.name.equals("createExplosion")) {
              AbstractInsnNode previous = methodInsnNode.getPrevious();
              if (previous.getOpcode() == Opcodes.LDC) {
                LdcInsnNode ldcNode = (LdcInsnNode) previous;
                if (ldcNode.cst instanceof Double) {
                  double d = (Double) ldcNode.cst;
                  if (d == Double.MAX_VALUE) {
                    return curLine;
                  }
                  return -1;
                }
                float f = (Float) ldcNode.cst;
                if (f == Float.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
            }
          }
          // Variant E
          if (methodInsnNode.owner.startsWith("net/minecraft/server/")
                  && methodInsnNode.owner.endsWith("PacketPlayOutExplosion")) {
            if (!(methodInsnNode.getPrevious() instanceof MethodInsnNode method)) {
              continue;
            }
            if (method.owner.startsWith("net/minecraft/server") && method.owner.endsWith("Vec3D")) {
              if (!(method.getPrevious() instanceof LdcInsnNode ldcNode)) {
                continue;
              }
              if (ldcNode.cst instanceof Double) {
                double d = (Double) ldcNode.cst;
                if (d == Double.MAX_VALUE) {
                  return curLine;
                }
                return -1;
              }
              float f = (Float) ldcNode.cst;
              if (f == Float.MAX_VALUE) {
                return curLine;
              }
              return -1;
            }
          }
        } else if (abstractInsnNode instanceof LineNumberNode) {
          curLine = ((LineNumberNode) abstractInsnNode).line;
        }
      }
    } catch (Exception e) {
      LOGGER.exception(e);
    }
    return -1;
  }

}
