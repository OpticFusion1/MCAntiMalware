/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class DispatchCommandCheck extends BaseCheck {

    private CacheContainer cache;

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        this.cache = cache;
        List<CheckResult> results = new ArrayList<>();
        for (MethodNode method : classNode.methods) {
            int i = detectMaliciousCommandExecution(method);
            if (i != -1) {
                results.add(new CheckResult("Spigot", "MALWARE", "MaliciousCommandExecution", "A",
                        classNode.sourceFile, classNode.name, i));
            }
        }
        return results;
    }

    public int detectMaliciousCommandExecution(MethodNode node) {
        int curLine = -1, foundLine = -1;
        for (AbstractInsnNode abstractInsnNode : node.instructions) {
            if (abstractInsnNode instanceof MethodInsnNode methodInsnNode) {
                if (methodInsnNode.owner.equals("org/bukkit/Server") && methodInsnNode.name.equals("dispatchCommand")
                        || methodInsnNode.owner.equals("org/bukkit/entity/Player") && methodInsnNode.name.equals("performCommand")
                        || methodInsnNode.owner.equals("org/bukkit/Bukkit") && methodInsnNode.name.equals("dispatchCommand")) {
                    AbstractInsnNode previous = methodInsnNode.getPrevious();
                    // Method 1
                    if (previous instanceof MethodInsnNode) {
                        AbstractInsnNode next = previous.getPrevious();
                        if (next instanceof LdcInsnNode ldcInsnNode) {
                            if (!(ldcInsnNode.cst instanceof String string)) {
                                continue;
                            }
                            if (cache.containsBlacklistedCommand(string)) {
                                foundLine = curLine;
                            }
                            continue;
                        }
                        if (!(next instanceof MethodInsnNode)) {
                            continue;
                        }
                        MethodInsnNode m = (MethodInsnNode) next;
                        if (!(m.getPrevious() instanceof LdcInsnNode)) {
                            continue;
                        }
                        String l = (String) ((LdcInsnNode) m.getPrevious()).cst;
                        try {
                            String cmdLabel = ((LdcInsnNode) next.getPrevious().getPrevious().getPrevious().getPrevious().getPrevious()).cst.toString();
                            if (cache.containsBlacklistedCommand(cmdLabel + " " + l)) {
                                foundLine = curLine;
                            }
                            continue;
                        } catch (Exception e) {
                            continue;
                        }
                    }
                    // Method 2
                    if (previous instanceof LdcInsnNode ldcInsnNode) {
                        String command = (String) ldcInsnNode.cst;
                        if (cache.containsBlacklistedCommand(command)) {
                            foundLine = curLine;
                        }
                    }
                }
            } else if (abstractInsnNode instanceof LineNumberNode lineNumberNode) {
                curLine = lineNumberNode.line;
            }
        }
        return foundLine;
    }

}
