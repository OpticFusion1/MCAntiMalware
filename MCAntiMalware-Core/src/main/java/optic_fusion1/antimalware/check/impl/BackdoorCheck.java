/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

@Deprecated(forRemoval = true) // Doesn't necessarily detect maliciousness
public class BackdoorCheck extends BaseCheck {

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        List<CheckResult> results = new ArrayList<>();
        for (MethodNode method : classNode.methods) {
            int i = detectAnnotationObfuscation(method);
            if (i != -1) {
                results.add(new CheckResult("Spigot", "MALWARE", "Backdoor", "A", classNode.sourceFile, classNode.name, i));
            }
        }
        return results;
    }

    public int detectAnnotationObfuscation(MethodNode node) {
        if (node.invisibleAnnotableParameterCount != 0 && node.invisibleParameterAnnotations != null) {
            for (List<AnnotationNode> annotationList : node.invisibleParameterAnnotations) {
                if (annotationList != null) {
                    for (AnnotationNode annotation : annotationList) {
                        if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
                            return -2;
                        }
                    }
                }
            }
        }
        if (node.invisibleAnnotations != null) {
            for (AnnotationNode annotation : node.invisibleAnnotations) {
                if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
                    return -2;
                }
            }
        }
        if (node.invisibleLocalVariableAnnotations != null) {
            for (AnnotationNode annotation : node.invisibleLocalVariableAnnotations) {
                if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
                    return -2;
                }
            }
        }
        if (node.invisibleTypeAnnotations != null) {
            for (AnnotationNode annotation : node.invisibleTypeAnnotations) {
                if (annotation.desc.length() != 0 && annotation.desc.trim().isEmpty()) {
                    return -2;
                }
            }
        }
        return -1;
    }

}
