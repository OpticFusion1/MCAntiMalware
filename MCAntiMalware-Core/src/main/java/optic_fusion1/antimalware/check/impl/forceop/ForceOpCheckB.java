package optic_fusion1.antimalware.check.impl.forceop;

import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.utils.ByteCodeUtils;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.*;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public class ForceOpCheckB extends BaseCheck {

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        List<CheckResult> result = new ArrayList<>();
        for (MethodNode methodNode : classNode.methods) {
            int i = detectForceOP(methodNode);
            if (i != -1) {
                result.add(new CheckResult("Spigot", "MALWARE", "ForceOP", "B", classNode.sourceFile,
                        classNode.name, i));
            }
        }
        return result;
    }

    // TODO: Look for other ways to detect force-ops
    public int detectForceOP(MethodNode node) {
        boolean setOpTrue = false;
        boolean setOpFalse = false;

        int curLine = -1;
        int foundLine = -1;

        for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
            if (abstractInsnNode instanceof MethodInsnNode methodInsnNode) {
                if (methodInsnNode.owner.equals("org/bukkit/entity/Player")
                        || methodInsnNode.owner.equals("org/bukkit/OfflinePlayer")
                        || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")
                        || methodInsnNode.owner.equals("org/bukkit/permissions/ServerOperator")) {
                    if (methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
                        AbstractInsnNode previous = methodInsnNode.getPrevious();
                        if (previous.getOpcode() == Opcodes.IALOAD) {
                            if (ByteCodeUtils.matches(previous.getPrevious(), 1)) {
                                setOpTrue = true;
                                foundLine = 2;
                            }
                        }
                        if (ByteCodeUtils.matches(previous, 0)) {
                            setOpFalse = true;
                        }
                    }
                }
            } else if (abstractInsnNode instanceof LineNumberNode) {
                curLine = ((LineNumberNode) abstractInsnNode).line;
            }
        }
        if (setOpTrue && !setOpFalse) {
            return foundLine;
        }
        return -1;
    }

}
