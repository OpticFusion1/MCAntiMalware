package optic_fusion1.antimalware.check.impl.forceop;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.utils.ByteCodeUtils;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class ForceOpCheckF extends BaseCheck {

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        List<CheckResult> results = new ArrayList<>();
        for (MethodNode methodNode : classNode.methods) {
            int i = detect(methodNode);
            if (i == -1) {
                continue;
            }
            results.add(new CheckResult("Spigot", "MALWARE", "ForceOP", "F", classNode.sourceFile, classNode.name, i));
        }
        return results;
    }

    private int detect(MethodNode methodNode) {
        for (AbstractInsnNode instruction : methodNode.instructions) {
            if (!(instruction instanceof MethodInsnNode methodInsnNode)) {
                continue;
            }
            if (ByteCodeUtils.isMethodInsnNodeCorrect(methodInsnNode, "org/bukkit/entity/Player", "isOp", "()Z")) {
                try {
                    if (!(methodInsnNode.getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext().getNext() instanceof MethodInsnNode node)) {
                        continue;
                    }
                    if (ByteCodeUtils.isMethodInsnNodeCorrect(node, "org/bukkit/entity/Player", "setOp", "(Z)V")) {
                        return 1;
                    }
                } catch (Exception e) {
                    continue; // Bytecode error, just continue
                }
            }
        }
        return -1;
    }

}
