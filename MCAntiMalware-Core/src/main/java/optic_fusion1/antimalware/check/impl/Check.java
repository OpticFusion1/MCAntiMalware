/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.antimalware.AntiMalware;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.configuration.file.YamlConfiguration;
import optic_fusion1.antimalware.database.Database;
import optic_fusion1.antimalware.utils.Utils;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodNode;

public class Check extends BaseCheck {

    private CacheContainer cache;

    @Override
    public List<CheckResult> process(ClassNode classNode, Path rootFolder, Path zipFile, CacheContainer cache) {
        this.cache = cache;
        if (isPlugin(rootFolder)) {
            try {
                return handlePlugin(classNode, rootFolder, zipFile, cache);
            } catch (SQLException ex) {
                LOGGER.exception(ex);
            }
        }
        return new ArrayList<>();
    }

    private List<CheckResult> handlePlugin(ClassNode classNode, Path rootFolder, Path zipFile,
            CacheContainer cache) throws SQLException {
        Database database = AntiMalware.getInstance().getDatabase();
        List<CheckResult> checkResults = new ArrayList<>();
        Path pluginYML = rootFolder.resolve("plugin.yml");
        if (Files.exists(pluginYML)) {
            YamlConfiguration config = cache.fetchConfiguration(zipFile, pluginYML);
            if (config != null) {
                List<String> authors = Utils.getAuthors(config);
                for (String author : authors) {
                    if (cache.containsBlacklistedAuthor(author)) {
                        checkResults.add(database.getCheckResultForAuthor(author));
                    }
                }
                if (config.isSet("website") && cache.containsBlacklistedWebsite(config.getString("website"))) {
                    checkResults.add(database.getCheckResultForWebsite(config.getString("website")));
                }
            }
        }
        if (cache.containsBlacklistedClassPath(classNode.name)) {
            checkResults.add(database.getCheckResultForClassPath(classNode.name));
        }
        List<CheckResult> results = classNodeContainsBlacklistedWord(classNode, database);
        if (!results.isEmpty()) {
            checkResults.addAll(results);
        }
        return checkResults;
    }

    public List<CheckResult> classNodeContainsBlacklistedWord(ClassNode classNode, Database database) throws SQLException {
        List<CheckResult> results = new ArrayList<>();
        List<MethodNode> nodes = classNode.methods;
        nodes.forEach(node -> {
            for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
                    String string = ((LdcInsnNode) insnNode).cst.toString();
                    // TODO: Move this to separate check
                    if (string.equalsIgnoreCase("-Dgnu=")) {
                        results.add(new CheckResult("Spigot", "String", "SG", "M"));
                        continue;
                    }
                    if (cache.containsBlacklistedString(string)) {
                        try {
                            CheckResult result = database.getCheckResultForString(string);
                            result.setSourceFilePath(classNode.sourceFile);
                            result.setClassNodePath(classNode.name);
                            result.setLine(getLine());
                            results.add(result);
                        } catch (SQLException ex) {
                            Logger.getLogger(Check.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else if (insnNode instanceof LineNumberNode lineNumberNode) {
                    setLine(lineNumberNode.line);
                }
            }
        });
        return results;
    }

}
