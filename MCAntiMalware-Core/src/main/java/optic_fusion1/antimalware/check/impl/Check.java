/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check.impl;

import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.check.BaseCheck;
import optic_fusion1.antimalware.check.CacheContainer;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.configuration.file.YamlConfiguration;
import optic_fusion1.antimalware.database.Database;
import optic_fusion1.antimalware.utils.Utils;
import org.objectweb.asm.tree.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

// TODO: Look into optimizing this class
public class Check extends BaseCheck {

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    if (isPlugin(rootFolder)) {
      try {
        return handlePlugin(rootFolder, zipFile, cache);
      } catch (SQLException ex) {
        LOGGER.exception(ex);
      }
    }
    return new ArrayList<>();
  }

  private List<CheckResult> handlePlugin(Path rootFolder, Path zipFile, CacheContainer cache) throws SQLException {
    Database database = AntiMalware.getInstance().getDatabase();
    CheckResult checkResult = database.getCheckResultForChecksum(cache.fetchSHA1(zipFile, zipFile));
    if (checkResult != null) {
      return List.of(checkResult);
    }
    List<CheckResult> checkResults = new ArrayList<>();
    Path pluginYML = rootFolder.resolve("plugin.yml");
    if (Files.exists(pluginYML)) {
      YamlConfiguration config = cache.fetchConfiguration(zipFile, pluginYML);
      if (config != null) {
        List<String> authors = Utils.getAuthors(config);
        for (String author : authors) {
          if (cache.containsBlacklistedAuthor(author)) {
            checkResults.add(database.getCheckResultForAuthor(author));
          }
        }
        if (config.isSet("website") && cache.containsBlacklistedWebsite(config.getString("website"))) {
          checkResults.add(database.getCheckResultForWebsite(config.getString("webiste")));
        }
      }
    }
    checkResults.addAll(walkThroughFiles(rootFolder)
            .filter((path) -> path != null && path.getFileName() != null).filter(this::validClassPath)
            .flatMap((path) -> {
              ClassNode classNode = cache.fetchClass(zipFile, path);
              if (classNode == null) {
                return Stream.empty();
              }
              String className = classNode.name;
              List<CheckResult> results = new ArrayList<>();
              cache.getBlacklistedClassPaths().stream().filter(classPath -> (className.contains(classPath)))
                      .forEachOrdered(classPath -> {
                        try {
                          results.add(database.getCheckResultForClassPath(classPath));
                        } catch (SQLException ex) {
                          LOGGER.exception(ex);
                        }
                      });
              try {
                results.addAll(classNodeContainsBlacklistedWord(classNode, cache.getBlacklistedStrings(), database));
              } catch (SQLException ex) {
                LOGGER.exception(ex);
              }
              return results.stream();
            }).distinct().collect(Collectors.toList()));
    return checkResults;
  }

  public List<CheckResult> classNodeContainsBlacklistedWord(ClassNode classNode, HashSet<String> blacklistedStrings,
          Database database) throws SQLException {
    List<CheckResult> results = new ArrayList<>();
    List<MethodNode> nodes = classNode.methods;
    nodes.forEach(node -> {
      for (AbstractInsnNode insnNode : node.instructions.toArray()) {
        if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
          String string = ((LdcInsnNode) insnNode).cst.toString();
          blacklistedStrings.stream().filter(blacklistedString -> (string.equalsIgnoreCase(blacklistedString))).map(blacklistedString -> {
            AbstractInsnNode nextNode = insnNode.getNext();
            if (nextNode instanceof MethodInsnNode) {
              MethodInsnNode fieldNode = (MethodInsnNode) nextNode;
              if (fieldNode.desc.equals("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;")
                      && fieldNode.name.equals("getCommand")) {
              }
            }
            CheckResult result = null;
            try {
              result = database.getCheckResultForString(blacklistedString);
            } catch (SQLException ex) {
              LOGGER.exception(ex);
            }
            return result;
          }).map(result -> {
            result.setSourceFilePath(classNode.sourceFile);
            return result;
          }).map(result -> {
            result.setClassNodePath(classNode.name);
            return result;
          }).map(result -> {
            result.setLine(getLine());
            return result;
          }).forEachOrdered(result -> {
            results.add(result);
          });
        } else if (insnNode instanceof LineNumberNode) {
          setLine(((LineNumberNode) insnNode).line);
        }
      }
    });
    return results;
  }

}
