/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check;

import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.check.impl.*;
import optic_fusion1.antimalware.check.impl.forceop.*;
import optic_fusion1.antimalware.utils.I18n;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class CheckRegistery {

    private final CheckManager checkManager;

    public CheckRegistery(AntiMalware antiMalware) {
        this.checkManager = antiMalware.getCheckManager();
    }

    public void registerChecks() {
        LOGGER.info(I18n.tl("database_register_checks_start"));
        addCheck(new CashPloitCheck());
        /*
        Most of the ForceOp checks have false-positives.
        Nothing about this can be done until the majority of developers use a better method to run any command than:
        
        Player#setOp(true)
        Player#dispatchCommand(cmd)
        Player#setOp(false)
        
        It's stupid as fuck, but I'm not being paid to include checks for every possible bytecode combination that causes an FP
        */
        addCheck(new ForceOpCheckA());
        addCheck(new ForceOpCheckB());
        addCheck(new ForceOpCheckC());
        addCheck(new ForceOpCheckD());
        addCheck(new ForceOpCheckF());
        addCheck(new NightVisionPlusCheck());
        addCheck(new SystemAccessCheck());
        addCheck(new Check());
        addCheck(new BackdoorCheck());
        addCheck(new ProcessCreationCheck());
        addCheck(new CrasherCheck());
        addCheck(new QlutchCheck());
        addCheck(new NonVanillaEnchantCheck());
        addCheck(new DispatchCommandCheck());
        LOGGER.info(I18n.tl("database_register_checks_end"));
    }

    private void addCheck(BaseCheck check) {
        checkManager.addCheck(check);
    }

}
