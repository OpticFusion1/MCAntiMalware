/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.check;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import optic_fusion1.antimalware.AntiMalware;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;
import org.apache.commons.codec.digest.DigestUtils;

public class CheckManager {

    private static final List<BaseCheck> CHECKS = new ArrayList<>();
    private static final HashMap<File, Boolean> CHECKSUM_CACHE = new HashMap<>();

    public void addCheck(BaseCheck check) {
        CHECKS.add(check);
    }

    public List<BaseCheck> getChecks() {
        return Collections.unmodifiableList(CHECKS);
    }

    public boolean isPluginJarBlacklisted(File file) {
        if (CHECKSUM_CACHE.containsKey(file)) {
            return CHECKSUM_CACHE.get(file);
        }
        try {
            String checksum = DigestUtils.sha1Hex(new FileInputStream(file));
            boolean blacklisted = AntiMalware.getInstance().getCache().containsBlacklistedChecksum(checksum.toUpperCase());
            CHECKSUM_CACHE.put(file, blacklisted);
            return blacklisted;
        } catch (IOException ex) {
            LOGGER.exception(ex);
        }
        return false;
    }
}
