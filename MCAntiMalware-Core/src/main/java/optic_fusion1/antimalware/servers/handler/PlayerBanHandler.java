/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.handler;

//TODO: Check each world's "playerdata" folder for banned players, if it has one then delete the file

import com.google.gson.*;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.utils.I18n;
import optic_fusion1.antimalware.utils.Utils;
import org.apache.commons.io.IOUtils;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.sql.SQLException;
import java.util.HashMap;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class PlayerBanHandler {

  private static final HashMap<String, BanEntry> ENTRIES = new HashMap<>();

  public void start() {
    LOGGER.info(I18n.tl("malicious_devs_ban_start"));
    loadBans();
    banMaliciousDevs();
    saveBans();
    LOGGER.info(I18n.tl("malicious_devs_ban_end"));
  }

  private void loadBans() {
    try {
      String jsonString = IOUtils.toString(new FileInputStream("banned-players.json"), StandardCharsets.UTF_8);
      if (jsonString.isEmpty()) {
        LOGGER.info(I18n.tl("banned_player_file_empty"));
        return;
      }
      JsonArray banEntryArray = new JsonParser().parse(jsonString).getAsJsonArray();
      if (banEntryArray.size() == 0) {
        LOGGER.info(I18n.tl("banned_player_file_empty"));
        return;
      }
      for (JsonElement banEntry : banEntryArray) {
        parseBan(banEntry.getAsJsonObject());
      }
      LOGGER.info(I18n.tl("player_bans_loaded", banEntryArray.size()));
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
  }

  private void banMaliciousDevs() {
    try {
      AntiMalware.getInstance().getDatabase().getMaliciousDevelopers().forEach((entry) -> {
        if (!isBanned(entry[0], entry[1])) {
          addBan(new BanEntry(entry[0], entry[1]));
        }
      });
    } catch (SQLException e) {
      LOGGER.exception(e);
    }
  }

  private void saveBans() {
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    JsonArray banEntryArray = new JsonArray();
    ENTRIES.values().forEach((entry) -> {
      if (!banEntryArray.contains(entry.asJsonObject())) {
        banEntryArray.add(entry.asJsonObject());
      }
    });
    try ( Writer writer = new FileWriter("banned-players.json")) {
      gson.toJson(banEntryArray, writer);
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
  }

  private void addBan(BanEntry banEntry) {
    if (ENTRIES.containsKey(banEntry.uuid)) {
      return;
    }
    ENTRIES.put(banEntry.uuid, banEntry);
    LOGGER.info(I18n.tl("banned_player", banEntry.name, banEntry.uuid));
  }

  public boolean isBanned(String name, String uuid) {
    return ENTRIES.values().stream().filter((entry) -> (entry.uuid.equals(uuid)))
            .anyMatch((entry) -> (entry.name.equals(name)));
  }

  private void parseBan(JsonObject object) {
    if (object == null) {
      return;
    }
    if (!object.has("uuid") || !object.has("name")) {
      return;
    }
    String created = object.get("created").getAsString();
    String source = object.get("source").getAsString();
    String expires = object.get("expires").getAsString();
    String reason = object.get("reason").getAsString();
    String uuid = object.get("uuid").getAsString();
    String name = object.get("name").getAsString();
    if (!isBanned(name, uuid)) {
      addBan(new BanEntry(name, uuid, created, source, expires, reason));
    }
  }

  public static class BanEntry {

    public final String name;
    public final String uuid;
    public final String created;
    public final String source;
    public final String expires;
    public final String reason;

    public BanEntry(String name, String uuid) {
      this(name, uuid, Utils.formatTodaysDate(), "MCAntiMalware", "forever", "Malicious Plugin Developer");
    }

    public BanEntry(String name, String uuid, String created, String source, String expires, String reason) {
      this.name = name;
      this.uuid = uuid;
      this.created = created;
      this.source = source;
      this.expires = expires;
      this.reason = reason;
    }

    public JsonObject asJsonObject() {
      JsonObject object = new JsonObject();
      object.addProperty("uuid", uuid);
      object.addProperty("name", name);
      object.addProperty("created", created);
      object.addProperty("source", source);
      object.addProperty("expires", expires);
      object.addProperty("reason", reason);
      return object;
    }

    @Override
    public int hashCode() {
      int result = 17;
      result = 31 * result + name.hashCode();
      result = 31 * result + uuid.hashCode();
      result = 31 * result + created.hashCode();
      result = 31 * result + expires.hashCode();
      result = 31 * result + reason.hashCode();
      result = 31 * result + source.hashCode();
      return result;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      }
      if (!(obj instanceof BanEntry entry)) {
        return false;
      }
      return name.equals(entry.name) && uuid.equals(entry.uuid) && created.equals(entry.created)
              && source.equals(entry.source) && expires.equals(entry.expires) && reason.equals(entry.reason);
    }

  }
}
