/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.handler.paper;

import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;

import java.io.File;
import java.security.Permission;

public class PaperPatchingSecurityManager extends SecurityManager {

  private String paperPatchedJar = null;

  @Override
  public void checkPermission(Permission perm) {
    checkPermission0(perm, null);
  }

  @Override
  public void checkPermission(Permission perm, Object context) {
    checkPermission0(perm, context);
  }

  private void checkPermission0(Permission perm, Object context) {
    if (perm.getName().equals("setSecurityManager")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried setting the SecurityManager {0} MIGHT be malicious", pluginJar);
      }
    }
  }

  @Override
  public void checkRead(String file) {
    if (file.contains("patched_") && file.contains(".jar")) {
      paperPatchedJar = file;
    }
  }

  @Override
  public void checkWrite(String file) {
    if (file.contains("patched_") && file.contains(".jar")) {
      paperPatchedJar = file;
    }
  }

  public String getPaperPatchedJarFile() {
    return paperPatchedJar;
  }

  @Override
  public void checkExit(int status) {
    throw new SecurityException("Paper isn't allowed to exit during patching!");
  }

}
