/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.handler.spigot;

import optic_fusion1.antimalware.servers.handler.ServerHandler;
import optic_fusion1.antimalware.utils.I18n;
import optic_fusion1.antimalware.utils.ReflectionUtils;
import optic_fusion1.antimalware.utils.Utils;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileSystem;
import java.nio.file.Files;
import java.util.List;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class SpigotServerHandler extends ServerHandler {

  private String version;

  @Override
  protected boolean prepareServer() {
    if (!getServerFile().exists()) {
      LOGGER.info(I18n.tl("file_doesn't_exist", getServerFile()));
      return false;
    }
    this.version = ReflectionUtils.getVersion(getServerFile());
    return !version.equals(I18n.tl("minecraft_server_version_not_found"));
  }

  @Override
  protected void startServer() {
    URL jarURL = null;
    ClassLoader parentClassLoader = null;
    try {
      jarURL = getServerFile().toURI().toURL();
      parentClassLoader = createClassLoader(jarURL);
      if (getCommandLineParser().shouldUseTransformers()) {
        applyTransformers(parentClassLoader, getServerFile(), version);
      }
      Thread childProcess = createChildProcess(parentClassLoader, "org.bukkit.craftbukkit.Main", "main",
              new Class[]{String[].class}, new Object[]{getServerArguments()});
      setCanUseSpigotMethods(true);
      LOGGER.info(I18n.tl("server_hooked", version));
    } catch (IOException e) {
      LOGGER.exception(e);
    }
  }

  @Override
  protected boolean checkServerType(File serverFile) {
    try ( FileSystem fs = Utils.fileSystemForZip(serverFile.toPath())) {
      if (fs != null && Files.exists(fs.getPath("META-INF/MANIFEST.MF"))) {
        List<String> lines = Files.readAllLines(fs.getPath("META-INF/MANIFEST.MF"));
        for (String line : lines) {
          if (line.contains("org.bukkit.craftbukkit.Main") || line.contains("org.bukkit.craftbukkit.bootstrap.Main")) {
            return true;
          }
        }
      }
    } catch (IOException e) {
      LOGGER.exception(e);
    }
    return false;
  }

  @Override
  public String getServerTypeName() {
    return "Spigot";
  }

}
