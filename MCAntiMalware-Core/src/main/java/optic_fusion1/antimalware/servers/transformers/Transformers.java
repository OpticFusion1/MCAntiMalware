/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.transformers;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.dynamic.ClassFileLocator;
import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
import net.bytebuddy.dynamic.scaffold.TypeValidation;
import net.bytebuddy.implementation.MethodDelegation;
import net.bytebuddy.pool.TypePool;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.antimalware.utils.I18n;

import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.logging.Logger;

import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;
import static net.bytebuddy.matcher.ElementMatchers.named;
import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public final class Transformers {

  private Transformers() {
  }

  public static void applyTransformers(ClassLoader parentClassLoader, ClassFileLocator serverJar, String version) {
    ByteBuddy buddy = new ByteBuddy();

    TypePool typePool = TypePool.Default.of(
            new ClassFileLocator.Compound(serverJar, ClassFileLocator.ForClassLoader.of(Logger.class.getClassLoader())));

    if (!version.isEmpty()) {
      version += ".";
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.craftbukkit." + version + "block.CraftBlock").resolve(), serverJar)
              .method(nameStartsWith("setType").or(nameStartsWith("setData")))
              .intercept(MethodDelegation.to(CraftBlockTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.craftbukkit." + version + "block.CraftBlock"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.event.player.AsyncPlayerChatEvent").resolve(), serverJar)
              .method(named("setMessage").or(named("setCancelled")))
              .intercept(MethodDelegation.to(AsyncPlayerChatEventTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.event.player.AsyncPlayerChatEvent"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.event.player.PlayerChatEvent").resolve(), serverJar)
              .method(named("setMessage").or(named("setCancelled")))
              .intercept(MethodDelegation.to(PlayerChatEventTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.event.player.PlayerChatEvent"));
    }

    try {
      buddy.with(TypeValidation.DISABLED)
              .rebase(typePool.describe("org.bukkit.event.server.ServerListPingEvent").resolve(), serverJar)
              .method(named("setMotd").or(named("setMaxPlayers")))
              .intercept(MethodDelegation.to(ServerListPingEventTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.event.server.ServerListPingEvent"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.plugin.SimplePluginManager").resolve(), serverJar)
              .method(nameStartsWith("disablePlugin").or(named("enablePlugin").or(named("clearPlugins").or(named("callEvent")
                      .or(nameStartsWith("registerEvent"))))))
              .intercept(MethodDelegation.to(SimplePluginManagerTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      e.printStackTrace();
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.plugin.SimplePluginManager"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.craftbukkit." + version + "entity.CraftEntity").resolve(), serverJar)
              .method(named("teleport")
                      .or(named("setPassenger").or(named("setVelocity").or(named("setFireTicks").or(named("setMomentum"))))))
              .intercept(MethodDelegation.to(CraftEntityTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesn't_exist", "org.bukkit.craftbukkit." + version + "entity.CraftEntity"));
    }

    try {
      buddy
              .rebase(typePool.describe("org.bukkit.craftbukkit." + version + "inventory.CraftInventory").resolve(),
                      serverJar)
              .method(named("getContents").or(named("setContents").or(named("addItem"))))
              .intercept(MethodDelegation.to(CraftInventoryTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.craftbukkit." + version + "inventory.CraftInventory"));
    }

    try {
      buddy.with(TypeValidation.DISABLED)
              .rebase(typePool.describe("org.bukkit.craftbukkit." + version + "entity.CraftPlayer").resolve(), serverJar)
              .method(nameStartsWith("send").or(nameStartsWith("play").or(nameStartsWith("set")
                      .or(named("chat").or(named("kickPlayer").or(named("performCommand").or(named("teleport"))))))))
              .intercept(MethodDelegation.to(CraftPlayerTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.craftbukkit." + version + "entity.CraftPlayer"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.craftbukkit." + version + "CraftServer").resolve(), serverJar)
              .method(nameStartsWith("broadcast").or(nameStartsWith("dispatch")))
              .intercept(MethodDelegation.to(CraftServerTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.craftbukkit." + version + "CraftServer"));
    }

    try {
      buddy.rebase(typePool.describe("org.bukkit.craftbukkit." + version + "inventory.CraftInventoryPlayer").resolve(), serverJar)
              .method(named("setItemInHand").or(named("setBoots").or(named("setLeggings").or(named("setChestplate")
                      .or(named("setHelmet").or(named("setItem").or(nameStartsWith("remove").or(nameStartsWith("clear")))))))))
              .intercept(MethodDelegation.to(CraftInventoryPlayerTransformer.class)).make()
              .load(parentClassLoader, ClassLoadingStrategy.Default.INJECTION);
    } catch (Exception e) {
      e.printStackTrace();
      LOGGER.info(I18n.tl("class_doesnt_exist", "org.bukkit.craftbukkit." + version + "inventory.CraftInventoryPlayer"));
    }
  }

  public static void a(Callable superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("might_be_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static boolean b(Callable<Boolean> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("might_be_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return false;
  }

  public static int c(Callable<Integer> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("might_be_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return -1;
  }

  public static HashMap d(Callable<HashMap> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(I18n.tl("transformer_plugin_might_be_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return new HashMap<>();
  }

}
