/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.transformers;

import net.bytebuddy.implementation.bind.annotation.SuperCall;

import java.util.concurrent.Callable;

public final class CraftEntityTransformer {

  private CraftEntityTransformer() {
  }

  public static void setFallDistance(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

  public static boolean setMomentum(@SuperCall Callable<Boolean> superCall) {
    return Transformers.b(superCall);
  }

  public static void setFireTicks(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

  public static boolean setPassenger(@SuperCall Callable<Boolean> superCall) {
    return Transformers.b(superCall);
  }

  public static boolean teleportTo(@SuperCall Callable<Boolean> superCall) {
    return Transformers.b(superCall);
  }

  public static boolean teleport(@SuperCall Callable<Boolean> superCall) {
    return Transformers.b(superCall);
  }

  public static void setVelocity(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

}
