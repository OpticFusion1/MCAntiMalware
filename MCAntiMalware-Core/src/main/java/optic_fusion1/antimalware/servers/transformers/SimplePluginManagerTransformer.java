/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.transformers;

import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.BindingPriority;
import net.bytebuddy.implementation.bind.annotation.RuntimeType;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.antimalware.utils.I18n;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Callable;

import static optic_fusion1.antimalware.utils.I18n.tl;

public final class SimplePluginManagerTransformer {

  private SimplePluginManagerTransformer() {

  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void disablePlugins(@SuperCall Callable<?> superCall, @Argument(0) boolean bool) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(tl("transformer_tried_to_disable_server_plugins",
                callerInfo.getPlugin().getJar()));
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static void clearPlugins(@SuperCall Callable<?> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(tl("transformer_tried_to_disable_server_plugins",
                callerInfo.getPlugin().getJar()));
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void registerEvents(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object listener, @RuntimeType @Argument(1) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(tl("transformer_tried_to_register_listener", callerInfo.getPlugin().getJar()));
        }
      } catch (IllegalArgumentException | SecurityException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void registerEvent(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object eventType, @RuntimeType @Argument(1) Object listener, @RuntimeType @Argument(2) Object executor, @RuntimeType @Argument(3) Object eventPriority, @RuntimeType @Argument(4) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(tl("transformer_tried_to_register_listener", callerInfo.getPlugin().getJar()));
        }
      } catch (IllegalArgumentException | SecurityException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void registerEvent(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object eventType, @RuntimeType @Argument(1) Object listener, @RuntimeType @Argument(2) Object eventPriority, @RuntimeType @Argument(3) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(tl("transformer_tried_to_register_listener", callerInfo.getPlugin().getJar()));
        }
      } catch (IllegalArgumentException | SecurityException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static Object[] loadPlugins(@SuperCall Callable<Object[]> superCall, @RuntimeType @Argument(0) Object directory) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(tl("transformer_tried_to_load_plugins", callerInfo.getPlugin().getJar(), directory));
        }
      } catch (IllegalArgumentException | SecurityException e) {
        e.printStackTrace();
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void callEvent(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object event) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(tl("transformer_tried_to_call_event", callerInfo.getPlugin().getJar(), event));
        }
      } catch (IllegalArgumentException | SecurityException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

//  @BindingPriority(Integer.MAX_VALUE)
//  public static Object loadPlugin(@SuperCall Callable<Object> superCall, @RuntimeType @Argument(0) Object file) {
//    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
//    if (callerInfo != null) {
//      try {
//        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
//          throw new FormattedSecurityException(I18n.tl("tried_to_load_plugin",
//                  callerInfo.getPlugin().getJar(), getPluginName(file)));
//        }
//      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
//        e.printStackTrace();
//      }
//    }
//    try {
//      return superCall.call();
//    } catch (Exception e) {
//      e.printStackTrace();
//    }
//    return null;
//  }
  @BindingPriority(Integer.MAX_VALUE)
  public static void disablePlugin(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(I18n.tl("transformer_tried_to_disable_plugin",
                  callerInfo.getPlugin().getJar(), getPluginName(plugin)));
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void enablePlugin(@SuperCall Callable<?> superCall, @RuntimeType @Argument(0) Object plugin) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      try {
        if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
          throw new FormattedSecurityException(I18n.tl("transformer_tried_to_enable_plugin", callerInfo.getPlugin().getJar(),
                  getPluginName(plugin)));
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static String getPluginName(Object plugin) throws IllegalAccessException, IllegalArgumentException,
          InvocationTargetException, NoSuchMethodException, SecurityException {
    return (String) plugin.getClass().getMethod("getName").invoke(plugin);
  }

}
