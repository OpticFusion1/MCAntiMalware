/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.servers.transformers;

import net.bytebuddy.implementation.bind.annotation.RuntimeType;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;

import java.util.HashMap;
import java.util.concurrent.Callable;

import static optic_fusion1.antimalware.utils.I18n.tl;

public final class CraftInventoryTransformer {

  private CraftInventoryTransformer() {
  }

  @RuntimeType
  public static Object[] getContents(@SuperCall Callable<Object[]> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(tl("transformer_file_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  @RuntimeType
  public static HashMap addItem(@SuperCall Callable<HashMap> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(tl("transformer_file_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static void setItem(@SuperCall Callable<?> superCall) {
    Transformers.a(superCall);
  }

  public static void setContents(@SuperCall Callable<?> superCall) {
    Transformers.a(superCall);
  }

  public static HashMap removeItem(@SuperCall Callable<HashMap> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException(tl("transformer_file_malicious", callerInfo.getPlugin().getJar()));
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }

  public static void remove(@SuperCall Callable<?> superCall) {
    Transformers.a(superCall);
  }

  public static void clear(@SuperCall Callable<?> superCall) {
    Transformers.a(superCall);
  }

}
