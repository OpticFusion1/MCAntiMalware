/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.metrics;

import com.influxdb.client.InfluxDBClient;
import com.influxdb.client.InfluxDBClientFactory;
import com.influxdb.client.WriteApi;
import com.influxdb.client.domain.WritePrecision;
import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.CommandLineParser;
import optic_fusion1.antimalware.metrics.metric.Metric;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class MetricsManager {

  private static final List<Metric<?>> METRICS = new ArrayList<>();
  private static final ScheduledExecutorService EXECUTOR = Executors.newScheduledThreadPool(1);
  private InfluxDBClient client;
  private final int interval;
  private final char[] token;
  private final String org;
  private final String bucket;
  private final String url;
  private final AntiMalware antiMalware;

  public MetricsManager(AntiMalware antiMalware) {
    this.antiMalware = antiMalware;
    CommandLineParser clp = antiMalware.getCommandLineParser();
    interval = clp.getMetricsInterval();
    token = clp.getMetricsToken();
    org = clp.getMetricsOrg();
    bucket = clp.getMetricsBucket();
    url = clp.getMetricsUrl();
  }

  public void start() {
    client = InfluxDBClientFactory.create(url, token, org, bucket);
    WriteApi api = client.getWriteApi();
    EXECUTOR.scheduleAtFixedRate(() -> METRICS.forEach(metric -> api.writeMeasurement(WritePrecision.MS, metric.getMeasurement(antiMalware))), 0, interval, TimeUnit.SECONDS);
  }

  public List<Metric<?>> getMetrics() {
    return Collections.unmodifiableList(METRICS);
  }

  public MetricsManager registerMetrics(Metric<?>... metrics) {
    METRICS.addAll(Arrays.asList(metrics));
    return this;
  }

}
