/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.notifications.impl;

import optic_fusion1.antimalware.AntiMalware;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.notifications.NotificationSender;
import optic_fusion1.antimalware.utils.I18n;

import java.awt.*;
import java.nio.file.Path;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class WindowsNotifSender implements NotificationSender {

  private static final SystemTray TRAY = SystemTray.getSystemTray();
  private static final Toolkit DEFAULT_TOOLKIT = Toolkit.getDefaultToolkit();
  private final TrayIcon icon;

  public WindowsNotifSender() {
    icon = new TrayIcon(DEFAULT_TOOLKIT.createImage(AntiMalware.class.getResource("/index.jpg")),
            I18n.tl("notification_tool_tip_title"));
    icon.setImageAutoSize(true);
  }

  @Override
  public void sendNotification(Path path, CheckResult result) {
    icon.setToolTip(I18n.tl("notification_tool_tip_text", path, result.getPlatform(), result.getType(),
            result.getFamily(), result.getVariant(), result.getClassNodePath(), result.getLine(),
            result.getSourceFilePath()));
    try {
      TRAY.add(icon);
      icon.displayMessage(I18n.tl("notification_tool_tip_title"),
              I18n.tl("notification_tool_tip_text", path, result.getPlatform(), result.getType(),
                      result.getFamily(), result.getVariant(), result.getClassNodePath()),
              TrayIcon.MessageType.WARNING);
    } catch (AWTException ex) {
      LOGGER.exception(ex);
    }
    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
    executor.schedule(() -> TRAY.remove(icon), 4, TimeUnit.MINUTES);
  }

}
