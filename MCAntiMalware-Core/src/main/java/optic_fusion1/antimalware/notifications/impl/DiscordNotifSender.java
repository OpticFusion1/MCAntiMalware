/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.notifications.impl;

import club.minnced.discord.webhook.WebhookClient;
import club.minnced.discord.webhook.send.WebhookEmbed;
import club.minnced.discord.webhook.send.WebhookEmbedBuilder;
import club.minnced.discord.webhook.send.WebhookMessageBuilder;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.notifications.NotificationSender;

import java.nio.file.Path;

public class DiscordNotifSender implements NotificationSender {

  private static final WebhookClient CLIENT = WebhookClient.withUrl(System.getenv("discord_webhook"));

  @Override
  public void sendNotification(Path path, CheckResult result) {
    WebhookMessageBuilder packet = new WebhookMessageBuilder();
    packet.setUsername("AntiMalwareScanner");
    String pluginName = "";
    String resourceID = "";
    String version = "N/A";
    try {
      String fileName = path.getParent().getParent().getFileName().toString();
      String[] args = fileName.split("\\.");
      pluginName = args[0];
      resourceID = args[1];
      try {
        version = path.getFileName().toString().split("-")[1].split("\\.")[0];
      } catch (Exception ignored) {
      }
    } catch (NullPointerException e) {
      String fileName = path.getFileName().toString();
      String[] args = fileName.split("\\(");
      if (args.length == 1) {
        if (args[0].startsWith("(")) {
          pluginName = resourceID = args[0].replaceAll("[^\\d]", "");
        } else {
          pluginName = resourceID = args[0];
        }
      } else {
        pluginName = args[0];
        resourceID = args[1].replaceAll("[^\\d]", "");
      }
    }

    WebhookEmbedBuilder embed = new WebhookEmbedBuilder();
    embed.setTitle(new WebhookEmbed.EmbedTitle("[DETECTED] " + pluginName,
            "https://spigotmc.org/resources/" + resourceID + "/"));
    embed.setDescription("Plugin " + pluginName + " (" + resourceID + ") of Version " + version
            + String.format(" might be infected with %s.%s.%s.%s Class path: %s ; Line/SourceFile %d/%s",
                    result.getPlatform(), result.getType(), result.getFamily(), result.getVariant(),
                    result.getClassNodePath(), result.getLine(), result.getSourceFilePath()));
    embed.setColor(16711680);

    packet.addEmbeds(embed.build());
    CLIENT.send(packet.build());
  }

}
