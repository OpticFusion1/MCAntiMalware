/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.notifications.impl;

import club.minnced.discord.webhook.WebhookClient;
import club.minnced.discord.webhook.send.WebhookEmbed;
import club.minnced.discord.webhook.send.WebhookEmbedBuilder;
import club.minnced.discord.webhook.send.WebhookMessageBuilder;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import okhttp3.MediaType;
import okhttp3.RequestBody;
import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.notifications.NotificationSender;
import optic_fusion1.antimalware.utils.StringUtils;

public class DiscordNotifSender implements NotificationSender {

    private static final WebhookClient CLIENT = WebhookClient.withUrl(System.getenv("discord_webhook"));
    private static final String USERNAME = System.getenv()
            .getOrDefault("discord_username", "AntiMalwareScanner");
    private static final String AVATAR_URL = System.getenv("discord_avatar_url");

    /**
     * <h2><a id="arguments">Format arguments</a></h2>
     * <table>
     * 		<thead>
     * 			<tr>
     * 				<th>&nbsp;Parameter</th>
     * 				<th>Replaced with<br></th>
     * 			</tr>
     * 		</thead>
     * 		<tbody>
     * 			<tr>
     * 				<td>&nbsp;<code>${file-path}</code></td>
     * 				<td>&nbsp;Path to the infected file<br></td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-platform}</code></td>
     * 				<td>&nbsp;Malware platform<br></td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-type}</code></td>
     * 				<td>&nbsp;Malware type<br></td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-family}</code></td>
     * 				<td>&nbsp;Malware family</td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-variant}</code></td>
     * 				<td>&nbsp;Malware variant<br></td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-class-path}</code></td>
     * 				<td>&nbsp;Class path containing the malware<br></td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-source-path}</code></td>
     * 				<td>&nbsp;Path to the source code containing the malware</td>
     * 			</tr>
     * 			<tr>
     * 				<td>&nbsp;<code>${malware-line-number}</code></td>
     * 				<td>&nbsp;Line number of the source code<br></td>
     * 			</tr>
     * 		</tbody>
     * 	</table>
     *
     * <h2><a id="example">Example</a></h2>
     * <p>Generated using <a href="https://discohook.org/">discordhook.org</a></p>
     * <blockquote><pre>
     * {
     *   "content": null,
     *   "embeds": [
     *     {
     *       "title": "&lt;a:furnace_angry:839235629454983218> Detected Malware `${malware-family}`",
     *       "color": 16711680,
     *       "fields": [
     *         {
     *           "name": "Server",
     *           "value": "My Infected Server",
     *           "inline": true
     *         },
     *         {
     *           "name": "File",
     *           "value": "`${file-path}`",
     *           "inline": true
     *         },
     *         {
     *           "name": "Malware type",
     *           "value": "[${malware-platform}.${malware-type}.${malware-family}.${malware-variant}](https://www.google.com/search?q=${malware-platform}+${malware-type}+${malware-family}+${malware-variant})"
     *         },
     *         {
     *           "name": "Class path",
     *           "value": "`${malware-class-path}`",
     *           "inline": true
     *         },
     *         {
     *           "name": "[Line] SourceFile",
     *           "value": "**[**${malware-line-number}**]** `${malware-source-path}`"
     *         }
     *       ]
     *     }
     *   ],
     *   "username": "Minecraft Malware Scanner",
     *   "avatar_url": "https://i.imgur.com/i9GSb45.png",
     *   "attachments": []
     * }
     * </pre></blockquote>
     */
    private static final String TEMPLATE = System.getenv("discord_message_template");

    @Override
    public void sendNotification(Path path, CheckResult result) {
        try {
            if (TEMPLATE != null) {
                Map<String, Object> args = new HashMap<>();
                args.put("file-path", path.toString());
                args.put("malware-platform", result.getPlatform());
                args.put("malware-type", result.getType());
                args.put("malware-family", result.getFamily());
                args.put("malware-variant", result.getVariant());
                args.put("malware-class-path", result.getClassNodePath());
                args.put("malware-source-path", result.getSourceFilePath());
                args.put("malware-line-number", String.valueOf(result.getLine()));
                String formatted = StringUtils.format(TEMPLATE, args);
                RequestBody body = RequestBody.create(formatted, MediaType.get("application/json; charset=utf-8"));
                Method method = CLIENT.getClass().getDeclaredMethod("execute", RequestBody.class);
                method.setAccessible(true);
                method.invoke(CLIENT, body);
                method.setAccessible(false);
            } else {
                WebhookMessageBuilder packet = new WebhookMessageBuilder();
                packet.setUsername(USERNAME);
                if (AVATAR_URL != null) {
                    packet.setAvatarUrl(AVATAR_URL);
                }
                WebhookEmbedBuilder embed = new WebhookEmbedBuilder();
                embed.setTitle(new WebhookEmbed.EmbedTitle("[Detected] " + result.getFamily(), "https://www.google.com")); // TODO: Come up w/ some sort of link
                embed.setDescription("Plugin " + path + String.format(" might be infected with %s.%s.%s.%s Class path: %s ; Line/SourceFile %d/%s",
                        result.getPlatform(), result.getType(), result.getFamily(), result.getVariant(),
                        result.getClassNodePath(), result.getLine(), result.getSourceFilePath()));
                embed.setColor(16711680);
                packet.addEmbeds(embed.build());
                CLIENT.send(packet.build()).get();
            }
        } catch (InterruptedException | ExecutionException | NoSuchMethodException | IllegalAccessException |
                 InvocationTargetException ex) {
            Logger.getLogger(DiscordNotifSender.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
