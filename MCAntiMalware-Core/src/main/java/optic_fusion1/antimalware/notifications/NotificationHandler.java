/*
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package optic_fusion1.antimalware.notifications;

import optic_fusion1.antimalware.check.CheckResult;
import optic_fusion1.antimalware.notifications.impl.ConsoleNotifSender;
import optic_fusion1.antimalware.notifications.impl.DiscordNotifSender;
import optic_fusion1.antimalware.notifications.impl.LinuxNotifSender;
import optic_fusion1.antimalware.notifications.impl.WindowsNotifSender;
import optic_fusion1.antimalware.utils.I18n;

import java.awt.*;
import java.nio.file.Path;
import java.util.Locale;

import static optic_fusion1.antimalware.AntiMalware.LOGGER;

public class NotificationHandler {

  private NotificationSender sender;

  public NotificationHandler(String notificationType) {
    switch (notificationType) {
      case "discord":
        if (System.getenv("discord_webhook") == null) {
          LOGGER.info(I18n.tl("notification_missing_discord_webhook"));
          break;
        }
        sender = new DiscordNotifSender();
      case "popup":
        switch (System.getProperty("os.name", "generic").toLowerCase(Locale.ENGLISH)) {
          case "mac":
          case "darwin":
          case "linux":
            sender = new LinuxNotifSender();
          case "win":
            if (!SystemTray.isSupported()) {
              LOGGER.alert(I18n.tl("notification_os_not_supported", System.getProperty("os.name")));
              break;
            }
            sender = new WindowsNotifSender();
          default:
            LOGGER.alert(I18n.tl("notification_os_not_found"));
        }
      default:
        sender = new ConsoleNotifSender();
    }
  }

  public void sendNotification(Path path, CheckResult result) {
    if (sender == null) {
      return;
    }
    sender.sendNotification(path, result);
  }

}
