package optic_fusion1.mcantimalware;

import static java.util.Arrays.asList;

import java.io.File;
import java.io.IOException;

import joptsimple.OptionParser;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndexImpl;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.Utils;

public class CommandLineHandler {

  private static final CustomLogger LOGGER = AntiMalware.getInstance().getLogger();
  private OptionSet options;
  private File serverJar;
  private File scanFile;
  private File scanDirectory = new File("plugins");
  private String[] serverArguments = new String[]{};
  private PluginIndex pluginIndex;
  private final I18n I18n = new I18n();
  private boolean shouldDebugMessagesBeLogged = false;
  private boolean shouldScanSingleFile = false;
  private boolean shouldNotifyWhenMalicious = true;
  private boolean shouldDisableMaliciousPlugins = true;
  private boolean shouldExceptionsBeLogged = true;
  private boolean shouldDumpClasses = false;
  private boolean shouldBanMaliciousAuthors = false;
  private boolean shouldRunServerJar = false;
  private boolean printNotInfectedMessage = true;
  private boolean shouldRunSecurityManager = true;
  private boolean shouldUseTransformers = true;
  private boolean shouldScanDrives = false;
  private boolean shouldDisableAutoUpdate = false;

  public void handleCommandLineArguments(String[] args) {
    OptionParser parser = new OptionParser() {
      {
        acceptsAll(asList("debug"), "Whether or not to log debug messages")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
        acceptsAll(asList("scanDirectory"), "Which folder to scan")
         .withRequiredArg()
         .ofType(String.class)
         .defaultsTo("plugins");
        acceptsAll(asList("scanFile"), "Scan a single file")
         .withRequiredArg()
         .ofType(String.class);
        acceptsAll(
         asList("printNotInfectedMessages"),
         "Should not infected messages be shown & logged")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(true);
        acceptsAll(asList("help"), "Show the help");
        acceptsAll(asList("language"), "Changes the language of the program")
         .withRequiredArg()
         .ofType(String.class)
         .defaultsTo("en");
        acceptsAll(
         asList("windowsNotification"),
         "If this is true, the program will make windows notify you if there was a malicious plugin found (if you run windows)")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
        acceptsAll(asList("serverJar"), "Path to the server jar that should be ran")
         .withRequiredArg()
         .ofType(String.class);
        acceptsAll(asList("serverArguments"), "Server arguments")
         .withRequiredArg()
         .ofType(String.class);
        acceptsAll(asList("disableMalPlugins"), "Should we disable malicious plugins?")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
        acceptsAll(asList("logExceptions"), "Should we log exceptions")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(true);
        acceptsAll(asList("banMalAuthors"), "Should we ban malicious authors and possible alts")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(true);
        acceptsAll(asList("dumpClasses"), "Should classes in the classpath be saved")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
        acceptsAll(asList("runSecurityManager"), "Should the AntiMalware use a custom SecurityManager")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(true);
        acceptsAll(asList("useTransformers"), "Should custom code be used? (Deals with a variety of methods malicious plugins use)")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(true);
        acceptsAll(asList("scanDrives"), "Should all drives be scanned?")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
        acceptsAll(asList("shouldDisableAutoUpdate"), "Should auto updating be disabled")
         .withRequiredArg()
         .ofType(Boolean.class)
         .defaultsTo(false);
      }
    };
    try {
      options = parser.parse(args);
    } catch (joptsimple.OptionException ex) {
      LOGGER.exception(ex);
    }
    if (options != null) {
      if (options.has("disableMalPlugins")) {
        shouldDisableMaliciousPlugins = (Boolean) options.valueOf("disableMalPlugins");
      }
      if (options.has("help")) {
        try {
          parser.printHelpOn(System.out);
        } catch (IOException ex) {
          LOGGER.exception(ex);
        }
        System.exit(0);
      }
      if (options.has("debug")) {
        shouldDebugMessagesBeLogged = (Boolean) options.valueOf("debug");
      }
      if (options.has("scanFile")) {
        shouldScanSingleFile = true;
      }
      I18n.updateLocale("en");
      if (options.has("language")) {
        I18n.updateLocale((String) options.valueOf("language"));
      }
      if (options.has("windowsNotification")) {
        shouldNotifyWhenMalicious = (boolean) options.valueOf("windowsNotification");
      }
      if (options.has("logExceptions")) {
        shouldExceptionsBeLogged = (boolean) options.valueOf("logExceptions");
      }
      if (options.has("dumpClasses")) {
        shouldDumpClasses = (boolean) options.valueOf("dumpClasses");
        int javaVersion = Utils.getJavaVersion();
        if (shouldDumpClasses && javaVersion > 8) {
          LOGGER.info("Java version: {0} is being used, the ability to dump classes isn't supported", javaVersion);
          shouldDumpClasses = false;
        }
      }
      if (options.has("serverJar")) {
        shouldRunServerJar = true;
        shouldBanMaliciousAuthors = true;
        pluginIndex = new PluginIndexImpl();
        pluginIndex.indexPlugins(new File("plugins"));
        if (options.has("serverArguments")) {
          serverArguments = ((String) options.valueOf("serverArguments")).split(" ");
        }
        serverJar = new File((String) options.valueOf("serverJar"));
        if (!serverJar.exists()) {
          LOGGER.info(I18n.tl("file_doesn't_exist", serverJar));
          System.exit(0);
        }
      }
      if (options.has("scanFile")) {
        scanFile = new File((String) options.valueOf("scanFile"));
        if (!scanFile.exists()) {
          LOGGER.info(I18n.tl("file_doesn't_exist", scanFile));
          System.exit(0);
        }
      }
      if (options.has("printNotInfectedMessages")) {
        printNotInfectedMessage = (boolean) options.valueOf("printNotInfectedMessages");
      }
      if (options.has("scanDirectory")) {
        String scanDirectoryValue = (String) options.valueOf("scanDirectory");
        scanDirectory = new File(scanDirectoryValue.equals(".") ? new File(".").getAbsolutePath() : scanDirectoryValue);
        if (!scanDirectory.exists()) {
          LOGGER.alert(I18n.tl("file_doesn't_exist", scanDirectory.getName()));
          System.exit(0);
        }
      }
      if (options.has("banMalAuthors")) {
        shouldBanMaliciousAuthors = (boolean) options.valueOf("banMalAuthors");
      }
      if (options.has("runSecurityManager")) {
        shouldRunSecurityManager = (boolean) options.valueOf("runSecurityManager");
      }
      if (options.has("useTransformers")) {
        shouldUseTransformers = (boolean) options.valueOf("useTransformers");
      }
      if(options.has("shouldScanDrives")){
        shouldScanDrives = (boolean) options.valueOf("shouldScanDrives");
      }
      if(options.has("shouldDisableAutoUpdate")){
        shouldDisableAutoUpdate = (boolean) options.valueOf("shouldDisableAutoUpdate");
      }
    }
  }

  public boolean shouldDebugMessagesBeLogged() {
    return shouldDebugMessagesBeLogged;
  }

  public boolean shouldScanSingleFile() {
    return shouldScanSingleFile;
  }

  public boolean shouldNotifyWhenMalicious() {
    return shouldNotifyWhenMalicious;
  }

  public OptionSet getOptions() {
    return options;
  }

  public boolean shouldDisableMaliciousPlugins() {
    return shouldDisableMaliciousPlugins;
  }

  public boolean shouldExceptionsBeLogged() {
    return shouldExceptionsBeLogged;
  }

  public boolean shouldDumpClasses() {
    return shouldDumpClasses;
  }

  public File getServerJar() {
    return serverJar;
  }

  public boolean shouldBanMaliciousAuthors() {
    return shouldBanMaliciousAuthors;
  }

  public boolean shouldRunServerJar() {
    return shouldRunServerJar;
  }

  public String[] getServerArguments() {
    return serverArguments;
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public File getScanFile() {
    return scanFile;
  }

  public boolean shouldPrintNotInfectedMessages() {
    return printNotInfectedMessage;
  }

  public File getScanDirectory() {
    return scanDirectory;
  }

  public boolean shouldRunSecurityManager() {
    return shouldRunSecurityManager;
  }

  public boolean shouldUseTransformers() {
    return shouldUseTransformers;
  }
  
  public boolean shouldScanDrives(){
    return shouldScanDrives;
  }
  
  public boolean shouldDisableAutoUpdate(){
    return shouldDisableAutoUpdate;
  }

}
