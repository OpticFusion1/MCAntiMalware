package optic_fusion1.mcantimalware.check;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.impl.CashPloitCheck;
import optic_fusion1.mcantimalware.check.impl.Check;
import optic_fusion1.mcantimalware.check.impl.DirectLeaksCheck;
import optic_fusion1.mcantimalware.check.impl.EmptyPlugin;
import optic_fusion1.mcantimalware.check.impl.ForceOpCheck;
import optic_fusion1.mcantimalware.check.impl.NightVisionPlusCheck;
import optic_fusion1.mcantimalware.configuration.ConfigurationSection;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.Utils;

public class CheckRegistery {

  private final CheckManagerImpl checkManager;
  private final Main main;
  private final CustomLogger logger;
  private FileConfiguration checkDatabase;

  public CheckRegistery(Main main) {
    this.main = main;
    this.logger = main.getLogger();
    this.checkManager = main.getCheckManager();
    checkDatabase = main.getCheckDatabase();
  }

  public void reloadCheckDatabase() {
    logger.info(I18n.tl("local_check_database_update"));
    checkDatabase = main.getCheckDatabase();
    logger.info(I18n.tl("local_check_database_updated"));
  }

  public void registerChecks() {
    logger.info(I18n.tl("registering_checks"));
    if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
      checkDatabase = main.getCheckDatabase();
      if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
        InputStream databaseInputStream = Utils.getResource("database.yml");
        checkDatabase = YamlConfiguration.loadConfiguration(databaseInputStream);
        if (checkDatabase == null || checkDatabase.getKeys(false).isEmpty()) {
          logger.info(I18n.tl("check_database_not_found"));
          System.exit(0);
        }
      }
    }
    checkDatabase.getKeys(false).stream().map((key) -> {
      logger.info(I18n.tl("registering_check", key));
      return key;
    }).map((key) -> {
      ConfigurationSection section = checkDatabase.getConfigurationSection(key);
      BaseCheck check = null;
      if (section.isSet("type")) {
        String type = section.getString("type");
        if (type.equals("cashploit")) {
          check = new CashPloitCheck(key);
        }
        if (type.equals("directleaks")) {
          check = new DirectLeaksCheck(key);
        }
        if (type.equals("forceop")) {
          check = new ForceOpCheck(key);
        }
        if (type.equals("nightvisionplugin")) {
          check = new NightVisionPlusCheck(main, key);
        }
        if (type.equals("emptyplugin")) {
          check = new EmptyPlugin(key);
        }
      }
      if (check == null) {
        check = new Check(key);
      }
      if(section.isSet("blacklisted-classpath")){
        check.setBlacklistedClassPaths(section.getStringList("blacklisted-classpath"));
      }
      if(section.isSet("blacklisted-strings")){
        check.setBlacklistedStrings(section.getStringList("blacklisted-strings"));
      }
      if(section.isSet("blacklisted-checksums")){
        check.setBlacklistedChecksums(section.getStringList("blacklisted-checksums"));
      }
      if(section.isSet("blacklisted-authors")){
        check.setBlacklistedAuthors(section.getStringList("blacklisted-authors"));
      }
      if(section.isSet("log-name")){
        check.setLogName(section.getString("log-name"));
      }
      if(section.isSet("checkType")){
        check.setType(section.getString("checkType"));
      }
      check.setThreshold(10);
      return check;
    }).forEachOrdered((check) -> {
      logger.info(I18n.tl("registered_check", check.getName()));
      checkManager.addCheck(check);
    });
    logger.info(I18n.tl("registered_checks", checkManager.getChecks().size()));
  }
}
