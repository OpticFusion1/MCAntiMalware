package optic_fusion1.mcantimalware.check;

import static optic_fusion1.mcantimalware.Main.LOGGER;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Stream;

import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.utils.StringUtils;

public abstract class BaseCheck {

	private CommandLineParser commandLineParser;
	private String classNodePath = "";
	private String sourceFilePath = "";
	private int line = -1;

	public BaseCheck(Main main) {
		commandLineParser = main.getCommandLineParser();
	}

	public abstract List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache);

	protected Stream<Path> walkThroughFiles(Path dir) {
		if (dir.getFileName() != null && dir.getFileName().toString().equals(".")) {
			return Stream.of();
		} else if (Files.isDirectory(dir, LinkOption.NOFOLLOW_LINKS)) {
			try {
				return Files.list(dir).filter(path -> !Files.isSymbolicLink(path)).flatMap(this::walkThroughFiles);
			} catch (IOException e) {
				LOGGER.exception(e);
				return Stream.of();
			}
		} else if (Files.isSymbolicLink(dir)) {
			return Stream.of();
		} else {
			return Stream.of(dir);
		}
	}

	public boolean isPlugin(Path rootDir) {
		return Files.exists(rootDir.resolve("plugin.yml")) || Files.exists(rootDir.resolve("bungee.yml"));
	}

	public boolean isBungeeYmlFile(String fileName) {
		return fileName.equals("bungee.yml");
	}

	public boolean isPluginYmlFile(String fileName) {
		return fileName.equals("plugin.yml");
	}

	public boolean isTextFile(String fileName) {
		return fileName.endsWith(".yml") || fileName.endsWith(".txt");
	}

	public void setClassNodePath(String string) {
		this.classNodePath = string;
	}

	public void setSourceFilePath(String sourceFilePath) {
		if (!StringUtils.isBlank(sourceFilePath)) {
			this.sourceFilePath = sourceFilePath;
		}
	}

	public void setLine(int line) {
		this.line = line;
	}

	public String getClassNodePath() {
		return classNodePath;
	}

	public String getSourceFilePath() {
		return sourceFilePath;
	}

	public int getLine() {
		return line;
	}

	public boolean validClassPath(Path classPath) {
		return classPath.toString().endsWith(".class") && !classPath.toString().contains("__MACOSX");
	}

	public void reset() {
		classNodePath = "";
		sourceFilePath = "";
		line = -1;
	}

	public CommandLineParser getCommandLineParser() {
		return commandLineParser;
	}
}
