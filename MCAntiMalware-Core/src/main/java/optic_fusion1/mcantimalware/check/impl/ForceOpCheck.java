package optic_fusion1.mcantimalware.check.impl;

import static optic_fusion1.mcantimalware.Main.LOGGER;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Optional;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.logging.CustomLevel;
import optic_fusion1.mcantimalware.utils.ByteCodeUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class ForceOpCheck extends BaseCheck {

  public ForceOpCheck(Main main, String name) {
    super(main, name);
  }

  @Override
  public void process(Path rootFolder, Path zipFile) {
    try {
      Files.walk(rootFolder).forEach((path) -> {
        if (validClassPath(path)) {
          try (InputStream is = Files.newInputStream(path)) {
            ClassReader classReader = new ClassReader(is);
            ClassNode classNode = new ClassNode();
            classReader.accept(classNode, 0);

            Optional<Integer> forceOPLine = classNode.methods.stream().map(this::detectForceOP)
                    .filter((line) -> line != -1).findAny();

			if (forceOPLine.isPresent()) {
			  setClassNodePath(classNode.name);
			  setSourceFilePath(classNode.sourceFile);
			  setLine(forceOPLine.get());
			}
		  } catch (Exception e) {
			LOGGER.log("Wasn't able to read File " + path.toAbsolutePath().toString() + " for DirectLeaksCheck",
				CustomLevel.WARNING, false);
		  }
		}
	  });
	} catch (IOException e) {
	  LOGGER.exception(e);
	}
  }

  public int detectForceOP(MethodNode node) {
    boolean setOpTrue = false;
    boolean setOpFalse = false;

    int curLine = -1;
    int foundLine = -1;

    for (AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
      if (abstractInsnNode instanceof MethodInsnNode) {
        MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
        if (methodInsnNode.owner.equals("org/bukkit/entity/Player")
                || methodInsnNode.owner.equals("org/bukkit/OfflinePlayer")
                || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")) {
          if (methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
            AbstractInsnNode previous = methodInsnNode.getPrevious();
            if (ByteCodeUtils.matches(previous, 1)) {
              setOpTrue = true;
              foundLine = curLine;
            } else if (ByteCodeUtils.matches(previous, 0)) {
              setOpFalse = true;
            }
          }
        }
      } else if (abstractInsnNode instanceof LineNumberNode) {
        curLine = ((LineNumberNode) abstractInsnNode).line;
      }
    }

    if (setOpTrue && !setOpFalse) {
      addToScore(1000);
      return foundLine;
    }
    return -1;
  }

}
