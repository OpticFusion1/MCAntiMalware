package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;

public class Check extends BaseCheck {

  private boolean isPluginYml = false;

  public Check(String name) {
    super(name);
  }

  @Override
  public boolean process(String filePath, ZipFile zipFile) {
    if (isPlugin(zipFile)) {
      return handlePlugin(filePath, zipFile);
    }
    return false;
  }

  private boolean handlePlugin(String filePath, ZipFile zipFile) {
    boolean isMalware = false;
    try {
      String path = filePath;
      if (isFileBlacklisted(path)) {
        return true;
      }
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      InputStream inputStream = null;
      while (entries.hasMoreElements()) {
        ZipEntry current = entries.nextElement();
        String currentName = current.getName();
        inputStream = zipFile.getInputStream(current);
        if (isPluginYmlFile(currentName) || isBungeeYmlFile(currentName)) {
          List<String> authors = getAuthors(YamlConfiguration.loadConfiguration(inputStream));
          for (String blacklistedAuthor : blacklistedAuthors) {
            if (authors.contains(blacklistedAuthor)) {
              inputStream.close();
              isPluginYml = true;
              setClassNodePath("plugin.yml");
              isMalware = true;
              addToScore(1000);
            }
          }
        }
        if (validClassPath(currentName)) {
          ClassReader reader = new ClassReader(inputStream);
          ClassNode classNode = new ClassNode();
          reader.accept(classNode, 0);
          for (String blacklistedClassNode : blacklistedClassPaths) {
            if (classNode.name.contains(blacklistedClassNode)) {
              inputStream.close();
              setClassNodePath(classNode.name);
              setSourceFilePath(classNode.sourceFile);
              isMalware = true;
              addToScore(1000);
            }
          }
          if (classNodeContainsBlacklistedWord(classNode, blacklistedStrings)) {
            inputStream.close();
            setClassNodePath(classNode.name);
            setSourceFilePath(classNode.sourceFile);
            isMalware = true;
            addToScore(1000);
          }
        }
      }
      if (inputStream != null) {
        try {
          inputStream.close();
        } catch (IOException ex) {
          if (shouldExceptionsBeLogged) {
            LOGGER.exception(ex);
          }
        }
      }
    } catch (IOException ex) {
      if (shouldExceptionsBeLogged) {
        LOGGER.exception(ex);
      }
    }
    if (isPluginYml) {
      setLine(-1);
      setSourceFilePath("");
    }
    return isMalware;
  }

  public List<String> getAuthors(FileConfiguration config) {
    List<String> authors = new ArrayList<>();
    if (config.isSet("authors")) {
      if (config.isList("authors")) {
        authors.addAll(config.getStringList("authors"));
      } else {
        authors.add(config.getString("authors"));
      }
    }
    if (config.isSet("author")) {
      if (config.isList("author")) {
        authors.addAll(config.getStringList("author"));
      } else {
        authors.add(config.getString("author"));
      }
    }
    return authors;
  }
}
