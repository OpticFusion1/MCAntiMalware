package optic_fusion1.mcantimalware.check.impl;

import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CacheContainer;
import optic_fusion1.mcantimalware.check.CheckResult;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.database.AntiMalwareDatabase;
import optic_fusion1.mcantimalware.utils.Utils;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class Check extends BaseCheck {

  public Check(Main main) {
    super(main);
  }

  @Override
  public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
    if (isPlugin(rootFolder)) {
      return handlePlugin(rootFolder, zipFile, cache);
    }
    return new ArrayList<>();
  }

  private List<CheckResult> handlePlugin(Path rootFolder, Path zipFile, CacheContainer cache) {
    AntiMalwareDatabase malwareDatabase = Main.getInstance().getDatabase();

    CheckResult blacklistedChecksum = malwareDatabase.blacklistedChecksumToCheckResult(cache.fetchSHA1(zipFile));
    if (blacklistedChecksum != null) {
      List<CheckResult> list = new ArrayList<>();
      list.add(blacklistedChecksum);
      return list;
    }

    HashSet<String> blacklistedClasspaths, blacklistedStrings, blacklistedAuthors;
    try {
      blacklistedClasspaths = malwareDatabase.getBlacklistedClasspaths();
      blacklistedStrings = malwareDatabase.getBlacklistedStrings();
      blacklistedAuthors = malwareDatabase.getBlacklistedAuthors();
    } catch (SQLException e) {
      Main.getInstance().getLogger().exception(e);
      return new ArrayList<>();
    }

    Path pluginYML = rootFolder.resolve("plugin.yml");
    List<CheckResult> pluginYMLResults = new ArrayList<>();
    if (Files.exists(pluginYML)) {
      YamlConfiguration config = cache.fetchConfiguration(pluginYML);
      if (config != null) {
        List<String> authors = Utils.getAuthors(config);
        authors.stream().filter(author -> (blacklistedAuthors.contains(author))).forEachOrdered(author -> {
          pluginYMLResults.add(malwareDatabase.blacklistedAuthorToCheckResult(author));
        });
      }
    }

    List<CheckResult> checkResults = walkThroughFiles(rootFolder)
            .filter((path) -> path != null && path.getFileName() != null).filter(this::validClassPath).flatMap((path) -> {
      ClassNode classNode = cache.fetchClass(path);
      if (classNode == null) {
        return Stream.empty();
      }
      String className = classNode.name;
      List<CheckResult> results = blacklistedClasspaths.stream().filter(className::contains)
              .map(malwareDatabase::blacklistedClassPathToCheckResult).collect(Collectors.toList());

      results.addAll(classNodeContainsBlacklistedWord(classNode, blacklistedStrings, malwareDatabase));
      return results.stream();
    }).distinct().collect(Collectors.toList());
    checkResults.addAll(pluginYMLResults);
    return checkResults;
  }

  public List<CheckResult> classNodeContainsBlacklistedWord(ClassNode classNode, HashSet<String> blacklistedStrings,
          AntiMalwareDatabase malwareDatabase) {
    List<CheckResult> results = new ArrayList<>();
    List<MethodNode> nodes = classNode.methods;
    nodes.forEach(node -> {
      for (AbstractInsnNode insnNode : node.instructions.toArray()) {
        if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
          String string = ((LdcInsnNode) insnNode).cst.toString();
          blacklistedStrings.stream().filter(blacklistedString -> (string.equals(blacklistedString))).map(blacklistedString -> {
            AbstractInsnNode nextNode = insnNode.getNext();
            if (nextNode instanceof MethodInsnNode) {
              MethodInsnNode fieldNode = (MethodInsnNode) nextNode;
              if (fieldNode.desc.equals("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;")
                      && fieldNode.name.equals("getCommand")) {
              }
            }
            CheckResult result = malwareDatabase.blacklistedStringToCheckResult(blacklistedString);
            return result;
          }).map(result -> {
            result.setSourceFilePath(classNode.sourceFile);
            return result;
          }).map(result -> {
            result.setClassNodePath(classNode.name);
            return result;
          }).map(result -> {
            result.setLine(getLine());
            return result;
          }).forEachOrdered(result -> {
            results.add(result);
          });
        } else if (insnNode instanceof LineNumberNode) {
          setLine(((LineNumberNode) insnNode).line);
        }
      }
    });
    return results;
  }

}
