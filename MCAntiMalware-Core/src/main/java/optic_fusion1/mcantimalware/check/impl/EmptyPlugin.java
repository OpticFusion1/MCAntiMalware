package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.check.BaseCheck;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

public class EmptyPlugin extends BaseCheck {

  public EmptyPlugin(String name) {
    super(name);
  }

  @Override
  public boolean process(String filePath, ZipFile zipFile) {
    if (isPlugin(zipFile)) {
      return handlePlugin(filePath, zipFile);
    }
    return false;
  }

  private boolean handlePlugin(String filePath, ZipFile zipFile) {
    try {
      if (isFileBlacklisted(filePath)) {
        return true;
      }
      boolean onEnableEmpty = false;
      int validClasses = 0;
      int other = 0;
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      InputStream inputStream = null;
      while (entries.hasMoreElements()) {
        ZipEntry currentEntry = entries.nextElement();
        String currentEntryName = currentEntry.getName();
        inputStream = zipFile.getInputStream(currentEntry);
        if (validClassPath(currentEntryName)) {
          validClasses++;
          ClassReader reader = new ClassReader(inputStream);
          ClassNode classNode = new ClassNode();
          reader.accept(classNode, 0);
          if (classNode.methods.isEmpty()) {
            return true;
          }
          for (MethodNode methodNode : classNode.methods) {
            if (methodNode.instructions.size() == 4) {
              if (methodNode.name.equals("onEnable")) {
                onEnableEmpty = true;
              }
              if (methodNode.name.equals("onDisable") && onEnableEmpty && validClasses == 1) {
                setClassNodePath(classNode.name);
                setSourceFilePath(classNode.sourceFile);
                addToScore(1000);
                return true;
              }
            }
          }
        } else {
          other++;
        }
      }
      if (other > 0 && validClasses == 0) {
        addToScore(1000);
        return true;
      }
      if (inputStream != null) {
        try {
          inputStream.close();
        } catch (IOException ex) {
          if (shouldExceptionsBeLogged) {
            LOGGER.exception(ex);
          }
        }
      }
    } catch (IOException ex) {
      if (shouldExceptionsBeLogged) {
        LOGGER.exception(ex);
      }
    }
    return false;
  }
}
