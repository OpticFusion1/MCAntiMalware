package optic_fusion1.mcantimalware.check.impl;

import static optic_fusion1.mcantimalware.Main.LOGGER;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CacheContainer;
import optic_fusion1.mcantimalware.check.CheckResult;

public class EmptyPlugin extends BaseCheck {

	public EmptyPlugin(Main main) {
		super(main);
	}

	@Override
	public List<CheckResult> process(Path rootFolder, Path zipFile, CacheContainer cache) {
		if (isPlugin(zipFile)) {
			return handlePlugin(rootFolder, zipFile, cache);
		}
		return List.of();
	}

	private List<CheckResult> handlePlugin(Path rootFolder, Path zipFile, CacheContainer cache) {
		try {
			boolean noClassFiles = walkThroughFiles(rootFolder).filter(this::validClassPath).count() == 0;
			if (noClassFiles) {
				return List.of(new CheckResult("Spigot", "MALWARE", "EmptyPlugin"));
			}

			boolean emptyMainClass = Files.walk(rootFolder).anyMatch((path) -> {
				if (validClassPath(path)) {
					ClassNode classNode = cache.fetchClass(path);
					if (classNode == null) {
						return false;
					}
					if (classNode.methods.isEmpty() && classNode.superName.contains("JavaPlugin")) {
						return true;
					}
					int emptyMainMethods = 0;
					if (classNode.methods.size() == 2) {
						for (MethodNode methodNode : classNode.methods) {
							if (methodNode.instructions.size() == 4) {
								if (methodNode.name.equals("onEnable") || methodNode.name.equals("onDisable")) {
									emptyMainMethods++;
								}
							}
						}
						if (emptyMainMethods >= 2) {
							setClassNodePath(classNode.name);
							setSourceFilePath(classNode.sourceFile);
							return true;
						}
					}
				}
				return false;
			});
			if (emptyMainClass) {
				return List
						.of(new CheckResult("Spigot", "MALWARE", "EmptyPlugin", "A", getSourceFilePath(), getClassNodePath(), -1));
			}
		} catch (IOException e) {
			LOGGER.exception(e);
		}
		return List.of();
	}

}
