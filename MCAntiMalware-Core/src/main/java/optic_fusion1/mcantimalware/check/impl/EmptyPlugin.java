package optic_fusion1.mcantimalware.check.impl;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.check.BaseCheck;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

public class EmptyPlugin extends BaseCheck {

  public EmptyPlugin(Main main, String name) {
    super(main, name);
  }

  @Override
  public void process(Path rootFolder, Path zipFile) {
    if (isPlugin(zipFile)) {
      handlePlugin(rootFolder, zipFile);
    }
  }

  private void handlePlugin(Path rootFolder, Path zipFile) {
    try {
      if (isFileBlacklisted(zipFile)) {
        addToScore(1000);
        return;
      }

      boolean noClassFiles = Files.walk(rootFolder).filter(this::validClassPath).count() == 0;
      if (noClassFiles) {
        addToScore(1000);
        return;
      }

      boolean emptyMainClass = Files.walk(rootFolder).anyMatch((path) -> {
        if (validClassPath(path)) {
          try (InputStream is = Files.newInputStream(path)) {
            ClassReader reader = new ClassReader(is);
            ClassNode classNode = new ClassNode();
            reader.accept(classNode, 0);
            if (classNode.methods.isEmpty() && classNode.superName.contains("JavaPlugin")) {
              return true;
            }
            int emptyMainMethods = 0;
            if (classNode.methods.size() == 2) {
              for (MethodNode methodNode : classNode.methods) {
                if (methodNode.instructions.size() == 4) {
                  if (methodNode.name.equals("onEnable") || methodNode.name.equals("onDisable")) {
                    emptyMainMethods++;
                  }
                }
              }
              if (emptyMainMethods >= 2) {
                setClassNodePath(classNode.name);
                setSourceFilePath(classNode.sourceFile);
                return true;
              }
            }
          } catch (IOException e) {
            LOGGER.exception(e);
          }
        }
        return false;
      });
      if (emptyMainClass) {
        addToScore(1000);
      }
    } catch (IOException e) {
      LOGGER.exception(e);
    }
  }

}
