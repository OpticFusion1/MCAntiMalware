package optic_fusion1.mcantimalware.check;

import static optic_fusion1.mcantimalware.Main.LOGGER;

import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.codec.digest.DigestUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;

import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.database.AntiMalwareDatabase;
import optic_fusion1.mcantimalware.logging.CustomLevel;

public class CacheContainer {

	private Map<Path, ClassNode> cachedClasses = new HashMap<>();
	private Map<Path, YamlConfiguration> cachedConfigurations = new HashMap<Path, YamlConfiguration>();
	private Map<Path, String> cachedHashes = new HashMap<Path, String>();

	public ClassNode fetchClass(Path path) {
		if (!cachedClasses.containsKey(path)) {
			loadClass(path);
		}
		return cachedClasses.get(path);
	}

	private void loadClass(Path path) {
		try {
			ClassReader classReader = new ClassReader(Files.newInputStream(path));
			ClassNode classNode = new ClassNode();
			classReader.accept(classNode, 0);
			cachedClasses.put(path, classNode);
		} catch (Exception e) {
			LOGGER.log("Wasn't able to read Class " + path.toUri().toString() + "", CustomLevel.WARNING, false);
			cachedClasses.put(path, null);
		}
	}

	public YamlConfiguration fetchConfiguration(Path path) {
		if (!cachedConfigurations.containsKey(path)) {
			loadConfiguration(path);
		}
		return cachedConfigurations.get(path);
	}

	private void loadConfiguration(Path path) {
		try {
			cachedConfigurations.put(path, YamlConfiguration.loadConfiguration(Files.newInputStream(path)));
		} catch (Exception e) {
			cachedConfigurations.put(path, null);
		}
	}

	public String fetchSHA1(Path path) {
		if (!cachedHashes.containsKey(path)) {
			loadSHA1(path);
		}
		return cachedHashes.get(path);
	}

	public void loadSHA1(Path path) {
		try {
			cachedHashes.put(path, DigestUtils.sha1Hex(Files.newInputStream(path)));
		} catch (Exception e) {
			cachedHashes.put(path, "");
		}
	}

}
