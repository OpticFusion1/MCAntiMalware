package optic_fusion1.mcantimalware.database;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import optic_fusion1.mcantimalware.check.CheckResult;
import optic_fusion1.mcantimalware.logging.CustomLogger;

public class AntiMalwareDatabase {

	public static final String DATABASE_URL = "https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareDatabase/master/database.db";
	private Connection connection;
	private CustomLogger logger;

	public AntiMalwareDatabase(CustomLogger logger) {
		try {
			File tempFile = File.createTempFile("antiMalware", "db");
			try {
				Files.copy(new URL(DATABASE_URL).openStream(), tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
			} catch (IOException e) {
				Files.copy(AntiMalwareDatabase.class.getResource("/database.db").openStream(), tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
			}
			connection = DriverManager.getConnection("jdbc:h2:" + tempFile.toURI());
			this.logger = logger;
		} catch (SQLException | IOException e) {
			e.printStackTrace();
		}
	}

  private final String getBlacklistedStrings = "SELECT String FROM BlacklistedStrings;";

  public HashSet<String> getBlacklistedStrings() throws SQLException {
    PreparedStatement getQuery = connection.prepareStatement(getBlacklistedStrings);
    return toHashSet(getQuery, "String");
  }

  private final String getBlacklistedAuthors = "SELECT Name FROM BlacklistedAuthors;";

  public HashSet<String> getBlacklistedAuthors() throws SQLException {
    PreparedStatement getQuery = connection.prepareStatement(getBlacklistedAuthors);
    return toHashSet(getQuery, "Name");
  }

  private final String getBlacklistedClasspaths = "SELECT Classpath FROM BlacklistedClasspaths";

  public HashSet<String> getBlacklistedClasspaths() throws SQLException {
    PreparedStatement getQuery = connection.prepareStatement(getBlacklistedClasspaths);
    return toHashSet(getQuery, "Classpath");
  }

  private final String getBlacklistedChecksums = "SELECT Checksum FROM BlacklistedChecksums;";

  public HashSet<String> getBlacklistedChecksums() throws SQLException {
    PreparedStatement getQuery = connection.prepareStatement(getBlacklistedChecksums);
    return toHashSet(getQuery, "Checksum");
  }

  private <T> HashSet<T> toHashSet(PreparedStatement pSt, String column) throws SQLException {
    HashSet<T> set;
    try (ResultSet result = pSt.executeQuery()) {
      set = new HashSet<>();
      while (result.next()) {
        set.add((T) result.getObject(column));
      }
    }
    return set;
  }

  private final String checksumToCheckResult = "SELECT type, platform, family, variant FROM BlacklistedChecksums INNER JOIN MalwareChecks ON BlacklistedChecksums.MalwareID = MalwareChecks._rowid_ WHERE Checksum = ?";

  public CheckResult blacklistedChecksumToCheckResult(String checksum) {
    try {
      PreparedStatement pSt = connection.prepareStatement(checksumToCheckResult);
      pSt.setString(1, checksum);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          return new CheckResult(rs.getString("platform"), rs.getString("type"), rs.getString("family"),
                  rs.getString("variant"));
        }
      } catch (SQLException ex) {
        logger.exception(ex);
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return null;
  }

	private final String authorToCheckResult = "SELECT type, platform, family, variant FROM BlacklistedAuthors INNER JOIN MalwareChecks ON BlacklistedAuthors.MalwareID = MalwareChecks._rowid_ WHERE Name = ?";

  public CheckResult blacklistedAuthorToCheckResult(String author) {
    try {
      PreparedStatement pSt = connection.prepareStatement(authorToCheckResult);
      pSt.setString(1, author);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          return new CheckResult(rs.getString("platform"), rs.getString("type"), rs.getString("family"),
                  rs.getString("variant"), "plugin.yml", "plugin.yml", -1);
        }
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return null;
  }

  private final String classPathToCheckResult = "SELECT type, platform, family, variant FROM BlacklistedClasspaths INNER JOIN MalwareChecks ON BlacklistedClasspaths.MalwareID = MalwareChecks._rowid_ WHERE Classpath = ?";

  public CheckResult blacklistedClassPathToCheckResult(String classPath) {
    try {
      PreparedStatement pSt = connection.prepareStatement(classPathToCheckResult);
      pSt.setString(1, classPath);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          return new CheckResult(rs.getString("platform"), rs.getString("type"), rs.getString("family"),
                  rs.getString("variant"));
        }
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return null;
  }

  private final String stringToCheckResult = "SELECT type, platform, family, variant FROM BlacklistedStrings INNER JOIN MalwareChecks ON BlacklistedStrings.MalwareID = MalwareChecks._rowid_ WHERE String = ?";

  public CheckResult blacklistedStringToCheckResult(String blacklistedString) {
    try {
      PreparedStatement pSt = connection.prepareStatement(stringToCheckResult);
      pSt.setString(1, blacklistedString);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          return new CheckResult(rs.getString("platform"), rs.getString("type"), rs.getString("family"),
                  rs.getString("variant"));
        }
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return null;
  }

  private final String isChecksumWhitelisted = "SELECT count(*) FROM WhitelistedChecksums WHERE Checksum = ?";

  public boolean isChecksumWhitelisted(String checksum) {
    try {
      PreparedStatement pSt = connection.prepareStatement(isChecksumWhitelisted);
      pSt.setString(1, checksum);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          if (rs.getInt("count(*)") > 0) {
            return true;
          }
        }
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return false;
  }

  private final String getMaliciousDevs = "SELECT Name, UUID FROM BannedAuthorsNames INNER JOIN BannedAuthorsUUIDs ON BannedAuthorsNames.AuthorID = BannedAuthorsUUIDs.AuthorID\n"
          + "UNION\n"
          + "SELECT Name, UUID FROM BannedAuthors INNER JOIN BannedAuthorsUUIDs ON BannedAuthors._rowid_ = BannedAuthorsUUIDs.AuthorID";

  public List<String[]> getMaliciousDevelopers() throws SQLException {
    PreparedStatement pSt = connection.prepareStatement(getMaliciousDevs);
    try (ResultSet result = pSt.executeQuery()) {
      List<String[]> malDev = new ArrayList<>();
      while (result.next()) {
        malDev.add(new String[]{result.getString("Name"), result.getString("UUID")});
      }
      result.close();
      return malDev;
    }
  }

  private final String isStringBlacklisted = "SELECT count(*) FROM BlacklistedStrings WHERE String LIKE ?";

  public boolean isStringBlacklisted(String message) {
    try {
      PreparedStatement pSt = connection.prepareStatement("%" + isStringBlacklisted + "%");
      pSt.setString(1, message);
      try (ResultSet rs = pSt.executeQuery()) {
        if (rs.next()) {
          if (rs.getInt("count(*)") > 0) {
            return true;
          }
        }
      }
    } catch (SQLException ex) {
      logger.exception(ex);
    }
    return false;
  }

}
