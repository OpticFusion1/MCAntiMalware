package optic_fusion1.mcantimalware;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import net.bytebuddy.dynamic.ClassFileLocator;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.AntiMalwareSecurityManager;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.transformers.Transformers;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.ReflectionUtils;
import optic_fusion1.mcantimalware.utils.javaagent.AgentLoader;

public class ServerHandler {

  private PluginIndex pluginIndex;
  private final CustomLogger logger;
  private final CommandLineParser commandLineParser;
  private boolean canUseSpigotMethods;
  private final Scanner scanner;
  private final Main main;

  public ServerHandler(Main main) {
    logger = main.getLogger();
    commandLineParser = main.getCommandLineParser();
    scanner = main.getScanner();
    this.main = main;
  }

  public void handleServer() {
    if (commandLineParser.shouldRunServerJar()) {
      File serverJar = commandLineParser.getServerJar();
      String[] serverArguments = commandLineParser.getServerArguments();
      scanner.addFileToQueue(serverJar.toPath());
      startSpigotServer(serverJar, serverArguments);
      if (commandLineParser.shouldRunSecurityManager()) {
        logger.info(I18n.tl("start_sm_setup"));
        SecurityManager mgr = new AntiMalwareSecurityManager(main);
        System.setSecurityManager(mgr);
        logger.info(I18n.tl("end_sm_setup"));
      }
    }
  }

  /*
   * TODO: Replace this with something better, perhaps checking one of the "MinecraftServer" fields
   */
  private void waitForLoading(ClassLoader loader) throws IllegalAccessException, IllegalArgumentException,
          InvocationTargetException, NoSuchMethodException, SecurityException, ClassNotFoundException {
    Class bukkit = loader.loadClass("org.bukkit.Bukkit");
    Method getServer = bukkit.getMethod("getServer");
    Method consoleSender = bukkit.getMethod("getConsoleSender");
    Method getPluginManager = bukkit.getMethod("getPluginManager");
    while (getServer.invoke(null) == null || consoleSender.invoke(null) == null
            || getPluginManager.invoke(null) == null) {
      try {
        Thread.sleep(200L);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
  }

  private void startSpigotServer(File serverJar, String[] args) {
    if (!serverJar.exists()) {
      logger.info(I18n.tl("file_doesn't_exist", serverJar));
      return;
    }

    try {

      URL jarURL = new URL(serverJar.toURL().toString().replace(" ", "%20"));
      System.out.println(jarURL.toString());
      final ClassLoader parentClassLoader = new URLClassLoader(new URL[]{jarURL},
              ClassLoader.getSystemClassLoader());

      if (commandLineParser.shouldUseTransformers()) {
        logger.info(I18n.tl("start_sm_load_transformers"));
        Transformers.applyTransformers(parentClassLoader, ClassFileLocator.ForJarFile.of(serverJar),
                ReflectionUtils.getVersion(serverJar));
        logger.info(I18n.tl("end_sm_load_transformers"));
      }

      new Thread(() -> {
        try {
          Thread.currentThread().setContextClassLoader(parentClassLoader);
          logger.info(I18n.tl("sm_start_server"));
          parentClassLoader.loadClass("org.bukkit.craftbukkit.Main").getMethod("main", String[].class).invoke(null,
                  (Object) args);
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
                | SecurityException | ClassNotFoundException e) {
          logger.exception(e);
        }
      }).start();

      canUseSpigotMethods = true;
      logger.info(I18n.tl("sm_server_hooked", ReflectionUtils.getVersion(serverJar)));
      if (commandLineParser.shouldDumpClasses()) {
        logger.info(I18n.tl("sm_dumping_classes"));
        try {
          AgentLoader.loadAgentClass(Main.class.getName());
        } catch (Exception ex) {
          logger.exception(ex);
        }
      }
    } catch (Exception e) {
      logger.exception(e);
    }
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public boolean canUseSpigotMethods() {
    return canUseSpigotMethods;
  }
}
