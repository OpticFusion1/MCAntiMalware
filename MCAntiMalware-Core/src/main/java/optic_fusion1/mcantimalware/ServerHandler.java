package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.List;
import java.util.logging.Logger;

import net.bytebuddy.dynamic.ClassFileLocator;
import net.bytebuddy.dynamic.loading.MultipleParentClassLoader;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.AntiMalwareSecurityManager;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.transformers.Transformers;
import optic_fusion1.mcantimalware.utils.ReflectionUtils;
import optic_fusion1.mcantimalware.utils.javaagent.AgentLoader;

public class ServerHandler {

  private PluginIndex pluginIndex;
  private final CustomLogger logger;
  private final CommandLineParser commandLineParser;
  private boolean canUseSpigotMethods;
  private final Scanner scanner;
  private final Main main;

  public ServerHandler(Main main) {
    logger = main.getLogger();
    commandLineParser = main.getCommandLineParser();
    scanner = main.getScanner();
    this.main = main;
  }

  public void handleServer() {
    if (commandLineParser.shouldRunServerJar()) {
      File serverJar = commandLineParser.getServerJar();
      String[] serverArguments = commandLineParser.getServerArguments();
      scanner.scanFile(serverJar.toPath());
      startSpigotServer(serverJar, serverArguments);
      if (commandLineParser.shouldRunSecurityManager()) {
        logger.info("Setting up the Security Manager");
        SecurityManager mgr = new AntiMalwareSecurityManager(main);
        System.setSecurityManager(mgr);
        logger.info("Finished setting up the Security Manager");
      }
    }
  }

  /*
   * TODO: Replace this with something better, perhaps checking one of the
   * "MinecraftServer" fields
   */
  private void waitForLoading(ClassLoader loader) throws IllegalAccessException, IllegalArgumentException,
	  InvocationTargetException, NoSuchMethodException, SecurityException, ClassNotFoundException {
	Class bukkit = loader.loadClass("org.bukkit.Bukkit");
	Method getServer = bukkit.getMethod("getServer");
	Method consoleSender = bukkit.getMethod("getConsoleSender");
	Method getPluginManager = bukkit.getMethod("getPluginManager");
	while (getServer.invoke(null) == null || consoleSender.invoke(null) == null
		|| getPluginManager.invoke(null) == null) {
	  try {
		Thread.sleep(200L);
	  } catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	  }
	}
  }

  private void startSpigotServer(File serverJar, String[] args) {
	if (!serverJar.exists()) {
	  logger.info(serverJar + " isn't a valid jar");
	  return;
	}

	try {

	  final ClassLoader parentClassLoader = new URLClassLoader(new URL[] { serverJar.toURL() },
		  ClassLoader.getSystemClassLoader());

	  if (commandLineParser.shouldUseTransformers()) {
		logger.info("Loading Transformers");
		Transformers.applyTransformers(parentClassLoader, ClassFileLocator.ForJarFile.of(serverJar),
			ReflectionUtils.getVersion(serverJar));
	  }

	  new Thread(() -> {
		try {
		  logger.info("Starting server!");
		  parentClassLoader.loadClass("org.bukkit.craftbukkit.Main").getMethod("main", String[].class).invoke(null,
			  (Object) args);
		} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
			| SecurityException | ClassNotFoundException e) {
		  logger.exception(e);
		}
	  }).start();

	  waitForLoading(parentClassLoader);
	} catch (IOException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
		| NoSuchMethodException | SecurityException | ClassNotFoundException e) {
	  logger.exception(e);
	  return;
	}

	canUseSpigotMethods = true;
	logger.info("Hooked into the server (" + ReflectionUtils.getVersion(serverJar) + ")");
	if (commandLineParser.shouldDumpClasses()) {
	  logger.info("Dumping classes");
	  try {
		AgentLoader.loadAgentClass(Main.class.getName());
	  } catch (Exception ex) {
		logger.exception(ex);
	  }
	}
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public boolean canUseSpigotMethods() {
    return canUseSpigotMethods;
  }
}
