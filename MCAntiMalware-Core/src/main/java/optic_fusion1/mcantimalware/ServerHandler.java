package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import me.yamakaja.runtimetransformer.RuntimeTransformer;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.realtimescanning.Scanner;
import optic_fusion1.mcantimalware.runtimeprotect.AntiMalwareSecurityManager;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.transformer.AsyncPlayerChatEventTransformer;
import optic_fusion1.mcantimalware.transformer.PlayerChatEventTransformer;
import optic_fusion1.mcantimalware.transformer.v1_15.CraftBlockTransformer1_15;
import optic_fusion1.mcantimalware.transformer.v1_15.CraftEntityTransformer1_15;
import optic_fusion1.mcantimalware.transformer.v1_15.CraftInventoryTransformer1_15;
import optic_fusion1.mcantimalware.transformer.v1_15.CraftPlayerTransformer1_15;
import optic_fusion1.mcantimalware.transformer.v1_15.CraftServerTransformer1_15;
import optic_fusion1.mcantimalware.transformer.ServerListPingEventTransformer;
import optic_fusion1.mcantimalware.transformer.SimplePluginManagerTransformer;
import optic_fusion1.mcantimalware.transformer.v1_13_R2.CraftBlockTransformer1_13_R2;
import optic_fusion1.mcantimalware.transformer.v1_13_R2.CraftEntityTransformer1_13_R2;
import optic_fusion1.mcantimalware.transformer.v1_13_R2.CraftInventoryTransformer1_13_R2;
import optic_fusion1.mcantimalware.transformer.v1_13_R2.CraftPlayerTransformer1_13_R2;
import optic_fusion1.mcantimalware.transformer.v1_13_R2.CraftServerTransformer1_13_R2;
import optic_fusion1.mcantimalware.transformer.v1_14.CraftBlockTransformer1_14;
import optic_fusion1.mcantimalware.transformer.v1_14.CraftEntityTransformer1_14;
import optic_fusion1.mcantimalware.transformer.v1_14.CraftInventoryTransformer1_14;
import optic_fusion1.mcantimalware.transformer.v1_14.CraftPlayerTransformer1_14;
import optic_fusion1.mcantimalware.transformer.v1_14.CraftServerTransformer1_14;
import optic_fusion1.mcantimalware.utils.ReflectionUtils;
import optic_fusion1.mcantimalware.utils.Utils;
import optic_fusion1.mcantimalware.utils.javaagent.AgentLoader;

public class ServerHandler {

  private PluginIndex pluginIndex;
  private CustomLogger logger;
  private CommandLineHandler commandLineHandler;
  private boolean shouldDumpClasses;
  private boolean shouldExceptionsBeLogged;
  private boolean canUseSpigotMethods;
  private Scanner scanner;
  private Main main;

  public ServerHandler(Main main) {
    logger = main.getLogger();
    commandLineHandler = main.getCommandLineHandler();
    shouldDumpClasses = commandLineHandler.shouldDumpClasses();
    shouldExceptionsBeLogged = commandLineHandler.shouldExceptionsBeLogged();
    scanner = main.getRealTimeScanner().getScanner();
    this.main = main;
  }

  public void handleServer() {
    if (commandLineHandler.shouldRunServerJar()) {
      File serverJar = commandLineHandler.getServerJar();
      String[] serverArguments = commandLineHandler.getServerArguments();
      try {
        scanner.scanFile(serverJar);
      } catch (IOException ex) {
        if (shouldExceptionsBeLogged) {
          logger.exception(ex);
        }
      }
      startSpigotServer(serverJar, serverArguments);
      if (commandLineHandler.shouldRunSecurityManager()) {
        setupSecurityManager();
      }
    }
  }

  /*
  TODO: Replace this with something better, perhaps checking one of the "MinecraftServer" fields
   */
  private boolean isLoadedEnough() {
    try {
      Class minecraftServerClass = ReflectionUtils.getNMSClass("MinecraftServer");
      return minecraftServerClass != null
       && org.bukkit.Bukkit.getConsoleSender() != null
       && org.bukkit.Bukkit.getPluginManager() != null;
    } catch (Exception ignored) {
    }
    return false;
  }

  private void setupSecurityManager() {
    logger.info("Setting up the Security Manager");
    SecurityManager mgr = new AntiMalwareSecurityManager(main);
    System.setSecurityManager(mgr);
  }

  private void startSpigotServer(File serverJar, String[] args) {
    if (!serverJar.exists()) {
      logger.info(serverJar + " isn't a valid jar");
      return;
    }
    Utils.loadLibrary(serverJar);
    org.bukkit.craftbukkit.Main.main(args);
    while (!isLoadedEnough()) {
    }
    if (commandLineHandler.shouldDebugMessagesBeLogged()) {
      logger.debug("Minecraft Version: " + ReflectionUtils.getNMSVersion());
      logger.debug("Raw Version: " + ReflectionUtils.getRawVersion());
      logger.debug("Version: " + ReflectionUtils.getVersion());
    }
    canUseSpigotMethods = true;
    logger.info("Hooked into the server");
    if (commandLineHandler.shouldUseTransformers()) {
      logger.info("Loading Transformers");
      new RuntimeTransformer(AsyncPlayerChatEventTransformer.class);
      new RuntimeTransformer(PlayerChatEventTransformer.class);
      new RuntimeTransformer(SimplePluginManagerTransformer.class);
      new RuntimeTransformer(ServerListPingEventTransformer.class);
      if (ReflectionUtils.getVersion().contains("v1_15")) {
        new RuntimeTransformer(CraftPlayerTransformer1_15.class);
        new RuntimeTransformer(CraftServerTransformer1_15.class);
        new RuntimeTransformer(CraftInventoryTransformer1_15.class);
        new RuntimeTransformer(CraftEntityTransformer1_15.class);
        new RuntimeTransformer(CraftBlockTransformer1_15.class);
      }
      if (ReflectionUtils.getVersion().contains("v1_14")) {
        new RuntimeTransformer(CraftPlayerTransformer1_14.class);
        new RuntimeTransformer(CraftServerTransformer1_14.class);
        new RuntimeTransformer(CraftInventoryTransformer1_14.class);
        new RuntimeTransformer(CraftEntityTransformer1_14.class);
        new RuntimeTransformer(CraftBlockTransformer1_14.class);
      }
      if (ReflectionUtils.getVersion().contains("v1_13_R2")) {
        new RuntimeTransformer(CraftPlayerTransformer1_13_R2.class);
        new RuntimeTransformer(CraftServerTransformer1_13_R2.class);
        new RuntimeTransformer(CraftInventoryTransformer1_13_R2.class);
        new RuntimeTransformer(CraftEntityTransformer1_13_R2.class);
        new RuntimeTransformer(CraftBlockTransformer1_13_R2.class);
      }
    }
    if (shouldDumpClasses) {
      logger.info("Dumping classes");
      try {
        AgentLoader.loadAgentClass(Main.class.getName());
      } catch (Exception ex) {
        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
  }

  public PluginIndex getPluginIndex() {
    return pluginIndex;
  }

  public boolean canUseSpigotMethods() {
    return canUseSpigotMethods;
  }
}
