package optic_fusion1.mcantimalware.scanner.realtime;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.File;
import java.nio.file.Path;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckResult;

import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.utils.I18n;

public class RealTimeScanner extends Scanner {

  private Main main;

  public RealTimeScanner(Main main, File scanDirectory) {
    super(main, scanDirectory);
    this.main = main;
  }

  public void setupDirectoryWatcher() {
	DirectoryWatcher directoryWatcher = new DirectoryWatcher.Builder().addDirectories(getScanDirectory().toPath())
		.setPreExistingAsCreated(true).build(main, (DirectoryWatcher.Event event, Path path) -> {
		  switch (event) {
		  case ENTRY_CREATE:
			addFileToQueue(path);
			break;
		  case ENTRY_MODIFY:
			addFileToQueue(path);
			break;
		  case ENTRY_DELETE:
			break;
		  }
		});

    try {
      directoryWatcher.startService(); // Actual watching starts here
    } catch (Exception e) {
      LOGGER.exception(e);
    }
  }

	// TODO: Add linux support for pop-ups, most likely will have to move to native
	// code to achieve that
	// That's what this method will do once implemented
  // private native void showTrapPopup(String fullFileName, CheckResult result);
	@Override
	public void notifyDetectedFile(Path fullFileName, CheckResult result) {
			String os = System.getProperty("os.name").toLowerCase();
			if (SystemTray.isSupported() && os.contains("win")) {
				SystemTray tray = SystemTray.getSystemTray();
				Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
				TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
				trayIcon.setImageAutoSize(true);
				trayIcon.setToolTip(I18n.tl("might_be_infected_tool_tip", fullFileName));
				try {
					tray.add(trayIcon);
					trayIcon.displayMessage(I18n.tl("malware_detected_tool_tip_title"),
							I18n.tl("might_be_infected_tool_tip_text", fullFileName, result.getPlatform(), result.getType(),
									result.getFamily(), result.getVariant(), result.getClassNodePath()),
							TrayIcon.MessageType.WARNING);
				} catch (AWTException ex) {
					logger.exception(ex);
				}
				ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
				executor.schedule(() -> tray.remove(trayIcon), 4, TimeUnit.MINUTES);
			}
	}

}
