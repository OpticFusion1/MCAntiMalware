package optic_fusion1.mcantimalware.service.impl;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HttpsURLConnection;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.service.Service;
import optic_fusion1.mcantimalware.utils.Utils;
import org.apache.commons.lang.StringUtils;

public class UpdaterCheckerService implements Service {

  private CustomLogger logger;
  
  public UpdaterCheckerService(Main main){
    logger = main.getLogger();
  }
  
  @Override
  public void startService() throws Exception {
    logger.info("Checking for an update...");
    FileConfiguration config = YamlConfiguration.loadConfiguration(Utils.getResource("plugin.yml"));
    String programVersion = config.getString("version");
    HttpsURLConnection connection = (HttpsURLConnection) new URL("https://api.spigotmc.org/legacy/update.php?resource=64982").openConnection();
    connection.setConnectTimeout(2000);
    connection.setReadTimeout(2000);
    String currentVersion = new BufferedReader(new InputStreamReader(connection.getInputStream())).readLine();
    connection.disconnect();
    if(versionCompare(programVersion, currentVersion) == 2){
      logger.info("************************");
      logger.info("This build of MCAntiMalware is outdated!");
      logger.info("Current Version: {0} New Version: {1}", new Object[]{programVersion, currentVersion});
      logger.info("Keep in mind you'll get NO SUPPORT while using this version.");
      logger.info("You can get latest build here: https://www.spigotmc.org/resources/64982/");
      logger.info("The program will start in 20 seconds.");
      logger.info("************************");
      try {
        Thread.sleep(TimeUnit.SECONDS.toMillis(20));
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }

  private int versionCompare(String programVersion, String currentVersion) {
    int programVersionLen = StringUtils.countMatches(programVersion, ".");
    int currentVersionLen = StringUtils.countMatches(currentVersion, ".");

    if (programVersionLen != currentVersionLen) {
      int count = Math.abs(programVersionLen - currentVersionLen);
      if (programVersionLen > currentVersionLen) {
        for (int i = 1; i <= count; i++) {
          currentVersion += ".0";
        }
      } else {
        for (int i = 1; i <= count; i++) {
          programVersion += ".0";
        }
      }
    }

    if (programVersion.equals(currentVersion)) {
      return 0;
    }

    String[] programVersionStr = StringUtils.split(programVersion, ".");
    String[] currentVersionStr = StringUtils.split(currentVersion, ".");
    for (int i = 0; i < programVersionStr.length; i++) {
      String str1 = "", str2 = "";
      for (char c : programVersionStr[i].toCharArray()) {
        if (Character.isLetter(c)) {
          int u = c - 'a' + 1;
          if (u < 10) {
            str1 += String.valueOf("0" + u);
          } else {
            str1 += String.valueOf(u);
          }
        } else {
          str1 += String.valueOf(c);
        }
      }
      for (char c : currentVersionStr[i].toCharArray()) {
        if (Character.isLetter(c)) {
          int u = c - 'a' + 1;
          if (u < 10) {
            str2 += String.valueOf("0" + u);
          } else {
            str2 += String.valueOf(u);
          }
        } else {
          str2 += String.valueOf(c);
        }
      }
      programVersionStr[i] = "1" + str1;
      currentVersionStr[i] = "1" + str2;

      int num1 = Integer.parseInt(programVersionStr[i]);
      int num2 = Integer.parseInt(currentVersionStr[i]);

      if (num1 != num2) {
        if (num1 > num2) {
          return 1;
        } else {
          return 2;
        }
      }
    }
    return -1;
  }

  @Override
  public void stopService() {
  }

}
