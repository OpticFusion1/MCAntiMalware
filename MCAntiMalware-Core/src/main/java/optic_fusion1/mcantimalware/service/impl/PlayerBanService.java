package optic_fusion1.mcantimalware.service.impl;

import static optic_fusion1.mcantimalware.Main.LOGGER;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.SQLException;
import java.util.HashMap;

import org.apache.commons.io.IOUtils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.service.Service;
import optic_fusion1.mcantimalware.utils.Utils;

public class PlayerBanService implements Service {

	private static final HashMap<String, BanEntry> BAN_ENTRIES = new HashMap<>();

	@Override
	public void startService() throws Exception {
		LOGGER.info("Banning possible malicious devs");
		loadBans();
		banMaliciousDevs();
		saveBans();
		LOGGER.info("Finished banning possible malicious devs");
	}

	private void loadBans() {
		try {
			String jsonString = IOUtils.toString(new FileInputStream(new File("banned-players.json")), "UTF-8");
			if (jsonString.isEmpty()) {
				LOGGER.info("Couldn't load player banned (Are there any players banned?)");
				return;
			}
			JsonArray banEntryArray = JsonParser.parseString(jsonString).getAsJsonArray();
			if (banEntryArray.size() == 0) {
				LOGGER.info("Couldn't load player banned (Are there any players banned?)");
				return;
			}
			for (JsonElement banEntry : banEntryArray) {
				parseBan(banEntry.getAsJsonObject());
			}
			LOGGER.info("Loaded " + banEntryArray.size() + " player bans");
		} catch (FileNotFoundException ex) {
			LOGGER.exception(ex);
		} catch (IOException ex) {
			LOGGER.exception(ex);
		}
	}

	private void banMaliciousDevs() {
		try {
			Main.getInstance().getDatabase().getMaliciousDevelopers().stream().forEach((entry) -> {
				if(!isBanned(entry[0], entry[1])) {
					addBan(new BanEntry(entry[0], entry[1]));
				}
			});
		} catch (SQLException e) {
			Main.LOGGER.exception(e);
		}
	}

	private void saveBans() {
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		JsonArray banEntryArray = new JsonArray();
		BAN_ENTRIES.values().forEach((entry) -> {
			if (!banEntryArray.contains(entry.asJsonObject())) {
				banEntryArray.add(entry.asJsonObject());
			}
		});
		try (Writer writer = new FileWriter("banned-players.json")) {
			gson.toJson(banEntryArray, writer);
		} catch (IOException ex) {
			LOGGER.exception(ex);
		}
	}

	private void addBan(BanEntry banEntry) {
		if (BAN_ENTRIES.containsKey(banEntry.uuid)) {
			return;
		}
		BAN_ENTRIES.put(banEntry.uuid, banEntry);
		LOGGER.info("Banned " + banEntry.name + "(" + banEntry.uuid + ")");
	}

	public boolean isBanned(String name, String uuid) {
		return BAN_ENTRIES.values().stream().filter((entry) -> (entry.uuid.equals(uuid)))
				.anyMatch((entry) -> (entry.name.equals(name)));
	}

	private void parseBan(JsonObject object) {
		if (object == null) {
			return;
		}
		if (!object.has("uuid") || !object.has("name")) {
			return;
		}
		String created = object.get("created").getAsString();
		String source = object.get("source").getAsString();
		String expires = object.get("expires").getAsString();
		String reason = object.get("reason").getAsString();
		String uuid = object.get("uuid").getAsString();
		String name = object.get("name").getAsString();
		if (!isBanned(name, uuid)) {
			addBan(new BanEntry(name, uuid, created, source, expires, reason));
		}
	}

	@Override
	public void stopService() {
	}

	public class BanEntry {

		public String name;
		public String uuid;
		public String created;
		public String source;
		public String expires;
		public String reason;

		public BanEntry(String name, String uuid) {
			this(name, uuid, Utils.formatTodaysDate(), "MCAntiMalware", "forever", "Malicious Plugin Developer");
		}

		public BanEntry(String name, String uuid, String created, String source, String expires, String reason) {
			this.name = name;
			this.uuid = uuid;
			this.created = created;
			this.source = source;
			this.expires = expires;
			this.reason = reason;
		}

		public JsonObject asJsonObject() {
			JsonObject object = new JsonObject();
			object.addProperty("uuid", uuid);
			object.addProperty("name", name);
			object.addProperty("created", created);
			object.addProperty("source", source);
			object.addProperty("expires", expires);
			object.addProperty("reason", reason);
			return object;
		}

		@Override
		public int hashCode() {
			int result = 17;
			result = 31 * result + name.hashCode();
			result = 31 * result + uuid.hashCode();
			result = 31 * result + created.hashCode();
			result = 31 * result + expires.hashCode();
			result = 31 * result + reason.hashCode();
			result = 31 * result + source.hashCode();
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (!(obj instanceof BanEntry)) {
				return false;
			}
			BanEntry entry = (BanEntry) obj;
			return name.equals(entry.name) && uuid.equals(entry.uuid) && created.equals(entry.created)
					&& source.equals(entry.source) && expires.equals(entry.expires) && reason.equals(entry.reason);
		}

	}
}
