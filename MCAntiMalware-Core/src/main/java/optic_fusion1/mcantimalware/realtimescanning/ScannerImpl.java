package optic_fusion1.mcantimalware.realtimescanning;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.zip.ZipFile;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;

import co.aikar.taskchain.TaskChain;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.CommandLineHandler;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.BaseCheck;
import optic_fusion1.mcantimalware.check.CheckManagerImpl;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.ZipUtils;
import optic_fusion1.mcantimalware.utils.taskchain.AntiMalwareChainFactory;

public class ScannerImpl implements Scanner {

  private final Main main;
  private static final CustomLogger LOGGER = AntiMalware.getInstance().getLogger();
  private FileConfiguration checksumDatabase;
  private final CheckManagerImpl checkManager;
  private final AntiMalwareChainFactory chainFactory;
  private String parentDirectory = "";
  private static final CommandLineHandler COMMAND_LINE_HANDLER = AntiMalware.getInstance().getCommandLineHandler();
  private File scanDirectory = new File("plugins");
  private static final File SERVER_JAR = COMMAND_LINE_HANDLER.getServerJar();
  private static final boolean SHOULD_DEBUG_MESSAGES_BE_LOGGED = COMMAND_LINE_HANDLER.shouldDebugMessagesBeLogged();
  private static final boolean SHOULD_EXCEPTIONS_BE_LOGGED = COMMAND_LINE_HANDLER.shouldExceptionsBeLogged();
  private static final boolean SHOULD_PRINT_NOT_INFECTED_MESSAGES = COMMAND_LINE_HANDLER.shouldPrintNotInfectedMessages();
  private static final boolean SHOULD_NOTIFY_WHEN_MALICIOUS = COMMAND_LINE_HANDLER.shouldNotifyWhenMalicious();

  public ScannerImpl(Main main) {
    this.main = main;
    checkManager = main.getCheckManager();
    checksumDatabase = main.getChecksumDatabase();
    chainFactory = main.getChainFactory();
  }

  private boolean isBlacklistedFile(File file) {
    if (file.isDirectory() || file.length() == 0) {
      return true;
    }
    String filePath = file.getName();
    if (filePath.equals("MCAntiMalware.jar")) {
      return true;
    }
    if (SERVER_JAR != null && filePath.equals(SERVER_JAR.getName())) {
      return false;
    }
    return !(filePath.endsWith(".jar") || filePath.endsWith(".zip"));
  }

  public void scanFile(File file) throws IOException {
    if (isBlacklistedFile(file)) {
      return;
    }
    if (file.getName().endsWith(".zip")) {
      File tempDir = ZipUtils.unzipFileToTempDir(file.toString());
      parentDirectory = IOUtils.toString(new FileInputStream(new File(tempDir.getPath(), "file.info")), "UTF-8");
      scanDirectory(tempDir);
    }
    ChecksumCheckResult checksumCheckResult = isInChecksumDatabase(file);
    if (checksumCheckResult == ChecksumCheckResult.INVALID_FILE
     || checksumCheckResult == ChecksumCheckResult.IN_CHECKSUM
     || file.getName().endsWith(".zip")) {
      return;
    }
    String filePath = file.toString();
    LOGGER.info(I18n.tl("not_in_database", filePath));
    try (ZipFile zipFile = new ZipFile(file)) {
      checkManager.getChecks().forEach((check) -> {
        TaskChain<?> chain = chainFactory.newSharedChain(check.getName());
        try {
          chain.async(() -> chain.setTaskData("infected", check.process(filePath, zipFile))).sync(() -> {
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
              LOGGER.debug("Chance: " + check.getScore() + " Threshold: " + check.getThreshold());
            }
            if (!(check.getScore() >= check.getThreshold())) {
              if (SHOULD_PRINT_NOT_INFECTED_MESSAGES) {
                LOGGER.info(I18n.tl("might_not_be_infected",
                 (parentDirectory.isEmpty() ? "" : parentDirectory + "#") + file.getName(),
                 check.getLogName(),
                 check.getType()));
              }
            } else {
              LOGGER.detected(I18n.tl("might_be_infected",
               (parentDirectory.isEmpty() ? "" : parentDirectory + "#") + file.getName(),
               check.getLogName(), check.getType(), check.getClassNodePath(),
               (check.getLine() > -1 ? check.getLine() : "none"),
               (!check.getSourceFilePath().isEmpty() ? check.getSourceFilePath() : "none")));
              if (SHOULD_NOTIFY_WHEN_MALICIOUS) {
                showTrayPopup(filePath, check);
              }
            }
            check.reset();
            parentDirectory = "";
          }).execute();
        } catch (Exception e) {
          if (SHOULD_EXCEPTIONS_BE_LOGGED) {
            LOGGER.exception(e);
          }
        }
      });
    } catch (Exception e) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(e);
      }
    }
  }

  public void setScanDirectory(File file) {
    scanDirectory = file;
  }

  public File getScanDirectory() {
    return scanDirectory;
  }

  public boolean scanDirectory(File directory) {
    if (!directory.isDirectory() || directory.getName().equals("AntiMalware") || directory.getName().equals("plugins")) {
      return false;
    }
    main.setIsCurrentlyScanning(true);
    File[] files = directory.listFiles();
    for (File file : files) {
      try {
        if (!file.isDirectory() && !file.getName().equals("MCAntiMalware.jar")) {
          scanFile(file);
          continue;
        }
        scanDirectory(file);
      } catch (IOException ex) {
        if (SHOULD_EXCEPTIONS_BE_LOGGED) {
          LOGGER.exception(ex);
        }
      }
    }
    main.setIsCurrentlyScanning(false);
    return true;
  }

  public void scanFiles() {
    main.setIsCurrentlyScanning(true);
    File[] files = scanDirectory.listFiles();
    Arrays.sort(files);
    for (File file : scanDirectory.listFiles()) {
      try {
        scanFile(file);
      } catch (IOException ex) {
        if (SHOULD_EXCEPTIONS_BE_LOGGED) {
          LOGGER.exception(ex);
        }
      }
    }
    main.setIsCurrentlyScanning(false);
    LOGGER.info(I18n.tl("scanning_finished"));
  }

  public ChecksumCheckResult isInChecksumDatabase(File file) {
    if (file == null || file.length() == 0) {
      return ChecksumCheckResult.INVALID_FILE;
    }
    if (checksumDatabase == null) {
      return ChecksumCheckResult.NOT_IN_CHECKSUM;
    }
    if (SERVER_JAR != null) {
      if (file.getName().equals(SERVER_JAR.getName())) {
        return ChecksumCheckResult.NOT_IN_CHECKSUM;
      }
    }
    try {
      try (JarFile jarFile = new JarFile(file)) {

        JarEntry jarEntry = jarFile.getJarEntry("plugin.yml");
        if (jarEntry == null) {
          LOGGER.info(I18n.tl("has_no_plugin_yml", file.getName()));
          return ChecksumCheckResult.NO_PLUGIN_YML;
        }
        InputStream inputStream;
        try {
          inputStream = jarFile.getInputStream(jarEntry);
        } catch (IOException ex) {
          LOGGER.info(I18n.tl("has_no_plugin_yml", file.getName()));
          jarFile.close();
          if (SHOULD_EXCEPTIONS_BE_LOGGED) {
            LOGGER.exception(ex);
          }
          return ChecksumCheckResult.NO_PLUGIN_YML;
        }
        if (inputStream == null) {
          jarFile.close();
          return ChecksumCheckResult.NO_PLUGIN_YML;
        }
        FileConfiguration config = null;
        try {
          config = YamlConfiguration.loadConfiguration(inputStream);
        } catch (Exception e) {
          if (SHOULD_EXCEPTIONS_BE_LOGGED) {
            LOGGER.exception(e);
          }
          return ChecksumCheckResult.INVALID_PLUGIN_YML;
        }
        if (!config.isSet("author") && !config.isSet("name")) {
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.info(I18n.tl("no_author_and_name"));
          }
          inputStream.close();
          jarFile.close();
          return ChecksumCheckResult.INVALID_PLUGIN_YML;
        }
        String author = config.getString("author");
        String name = config.getString("name");
        if (author != null) {
          author = author.replaceAll(" ", "-").replaceAll("\\.", "-");
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug("Author: " + author);
          }
        }
        if (name != null) {
          name = name.replaceAll(" ", "-").replaceAll("\\.", "-");
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug("Plugin Name: " + name);
          }
        }
        if (name == null) {
          inputStream.close();
          jarFile.close();
          return ChecksumCheckResult.INVALID_PLUGIN_YML;
        }
        String fileChecksum = DigestUtils.sha1Hex(Files.newInputStream(file.toPath()));
        if (author != null && !author.isEmpty()) {
          if (!checksumDatabase.isSet(author + "." + name)) {
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
              LOGGER.debug(author + "." + name + " is not set");
            }
            inputStream.close();
            jarFile.close();
            return ChecksumCheckResult.NOT_IN_CHECKSUM;
          }
          List<String> checksums = checksumDatabase.getStringList(author + "." + name);
          for (String checksum : checksums) {
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
              LOGGER.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
            }
            if (fileChecksum.equalsIgnoreCase(checksum)) {
              inputStream.close();
              jarFile.close();
              LOGGER.info(I18n.tl("probably_safe", file.getName()));
              return ChecksumCheckResult.IN_CHECKSUM;
            }
          }
          inputStream.close();
          jarFile.close();
          return ChecksumCheckResult.NOT_IN_CHECKSUM;
        }
        if (!checksumDatabase.isSet(name)) {
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug(name + " is not set");
          }
          inputStream.close();
          jarFile.close();
          return ChecksumCheckResult.NOT_IN_CHECKSUM;
        }
        List<String> checksums = checksumDatabase.getStringList(name);
        for (String checksum : checksums) {
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
          }
          if (fileChecksum.equalsIgnoreCase(checksum)) {
            LOGGER.info(I18n.tl("probably_safe", file.getName()));
            inputStream.close();
            jarFile.close();
            return ChecksumCheckResult.IN_CHECKSUM;
          }
        }
        inputStream.close();
      }
      return ChecksumCheckResult.NOT_IN_CHECKSUM;
    } catch (IOException ex) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(ex);
      }
    }
    return ChecksumCheckResult.NOT_IN_CHECKSUM;
  }

  public void reloadChecksumDatabase() {
    LOGGER.info(I18n.tl("updating_local_checksum_database"));
    checksumDatabase = main.getChecksumDatabase();
    LOGGER.info(I18n.tl("updated_local_checksum_database"));
  }

  private void showTrayPopup(String fullFileName, BaseCheck check) {
    String os = System.getProperty("os.name").toLowerCase();
    if (SystemTray.isSupported() && os.contains("win")) {
      SystemTray tray = SystemTray.getSystemTray();
      Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
      TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
      trayIcon.setImageAutoSize(true);
      trayIcon.setToolTip(I18n.tl("might_be_infected_tool_tip", fullFileName));
      try {
        tray.add(trayIcon);
        trayIcon.displayMessage(
         I18n.tl("malware_detected_tool_tip_title"),
         I18n.tl("might_be_infected_tool_tip_text",
          fullFileName,
          check.getName(),
          check.getType(),
          check.getClassNodePath()),
         TrayIcon.MessageType.WARNING);
      } catch (AWTException ex) {
        if (SHOULD_EXCEPTIONS_BE_LOGGED) {
          LOGGER.exception(ex);
        }
      }
      ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
      executor.schedule(() -> tray.remove(trayIcon), 4, TimeUnit.MINUTES);
    }
  }
}
