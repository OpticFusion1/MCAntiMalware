package optic_fusion1.mcantimalware.realtimescanning;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;

import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.CommandLineHandler;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.utils.I18n;

public class RealTimeScannerImpl implements RealTimeScanner {

  private static final CustomLogger LOGGER = AntiMalware.getInstance().getLogger();
  private final Scanner scanner;
  private static final CommandLineHandler COMMAND_LINE_HANDLER = AntiMalware.getInstance().getCommandLineHandler();
  private static final boolean SHOULD_DEBUG_MESSAGES_BE_LOGGED = COMMAND_LINE_HANDLER.shouldDebugMessagesBeLogged();
  private static final boolean SHOULD_EXCEPTIONS_BE_LOGGED = COMMAND_LINE_HANDLER.shouldExceptionsBeLogged();
  private static final File SCAN_DIRECTORY = COMMAND_LINE_HANDLER.getScanDirectory();

  public RealTimeScannerImpl(Main main) {
    scanner = new ScannerImpl(main);
    if (!COMMAND_LINE_HANDLER.shouldScanSingleFile()) {
      scanner.setScanDirectory(SCAN_DIRECTORY);
    }
  }

  public void setupDirectoryWatcher() {
    DirectoryWatcher directoryWatcher = new DirectoryWatcher.Builder().addDirectories(SCAN_DIRECTORY.toPath()).setPreExistingAsCreated(true).build((DirectoryWatcher.Event event, Path path) -> {
      switch (event) {
        case ENTRY_CREATE:
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug(I18n.tl("file_created", path));
          }
          try {
            scanner.scanFile(path.toFile());
          } catch (IOException ex) {
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
              LOGGER.exception(ex);
            }
          }
          break;
        case ENTRY_MODIFY:
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug(I18n.tl("file_modified", path));
          }
          try {
            scanner.scanFile(path.toFile());
          } catch (IOException ex) {
            if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
              LOGGER.exception(ex);
            }
          }
          break;
        case ENTRY_DELETE:
          if (SHOULD_DEBUG_MESSAGES_BE_LOGGED) {
            LOGGER.debug(I18n.tl("file_deleted", path));
          }
          break;
      }
    });

    try {
      directoryWatcher.start(); // Actual watching starts here
    } catch (Exception e) {
      if (SHOULD_EXCEPTIONS_BE_LOGGED) {
        LOGGER.exception(e);
      }
    }
  }

  public Scanner getScanner() {
    return scanner;
  }
}
