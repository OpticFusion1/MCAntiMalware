package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.lang.instrument.Instrumentation;
import java.net.URL;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.scanner.realtime.RealTimeScanner;
import optic_fusion1.mcantimalware.service.impl.PlayerBanService;
import optic_fusion1.mcantimalware.service.impl.UpdaterCheckerService;
import optic_fusion1.mcantimalware.usb.USBDriveHandler;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.javaagent.ClassDumpTransformer;
import org.apache.commons.io.IOUtils;

public class Main extends Thread {

  public static final String URL_PREFIX = "https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareDatabase/master/";
  private static final String DATABASE_URL = URL_PREFIX + "database.yml";
  private static final String CHECKSUMS_URL = URL_PREFIX + "checksums.yml";
  public static final CustomLogger LOGGER = new CustomLogger();
  private static final File DATA_FOLDER = new File("AntiMalware");
  private static Main main;
  public String[] args;
  private FileConfiguration checksumDatabase;
  private FileConfiguration checkDatabase;
  private CheckManager checkManager;
  private CheckRegistery checkRegistery;
  private CommandLineParser commandLineParser;
  private ServerHandler serverHandler;
  private Scanner scanner;

  public Main(String[] args) {
    main = this;
    this.args = args;
  }

  private void init() {
    setName("AntiMalware/Main Thread");
    LOGGER.info("Initializing...");
    if (!DATA_FOLDER.exists()) {
      DATA_FOLDER.mkdirs();
    }
    LOGGER.info("Any bugs and/or false-positives should be reported here: https://github.com/OpticFusion1/MCAntiMalware/issues");
    commandLineParser = new CommandLineParser();
    if (!commandLineParser.shouldRunServerJar()) {
      //TODO: Improve this message, somehow. Perhaps better explain what protections --serverJar gives the user
      LOGGER.info("Your server would be more secure if you used the --serverJar <path> command line argument");
      LOGGER.info("Letting the AntiMalware start the server its self makes it so malicious plugins are severely limtied");
      LOGGER.info("in a variety of ways");
    }
    commandLineParser.handleCommandLineArguments(args);
    new UpdaterCheckerService();
    if (commandLineParser.shouldBanMaliciousAuthors() && new File("banned-players.json").exists()) {
      new PlayerBanService();
    }
    LOGGER.info("Downloading databases...");
    downloadCheckDatabase(false);
    downloadChecksumDatabase(false);
    LOGGER.info("Finsihed downloading databases...");
    checkManager = new CheckManager();
    (checkRegistery = new CheckRegistery(this)).registerChecks();
    if (commandLineParser.singleScan() || commandLineParser.shouldScanSingleFile()) {
      scanner = new Scanner(this, commandLineParser.getScanDirectory());
      if (commandLineParser.shouldScanSingleFile()) {
        scanner.scanFile(commandLineParser.getScanFile().toPath());
      } else {
        scanner.scanFiles();
      }
      System.exit(0);
    } else {
      scanner = new RealTimeScanner(this, commandLineParser.getScanDirectory());
    }
    if (!commandLineParser.shouldDisableAutoUpdate()) {
      LOGGER.info("Setting up Auto-Updater...");
      setupAutoUpdater();
    }
    (serverHandler = new ServerHandler(this)).handleServer();
    if (commandLineParser.shouldScanDrives()) {
      new USBDriveHandler(this);
    }
    scanner.start();
  }

  private void setupAutoUpdater() {
    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
    executor.scheduleWithFixedDelay(() -> {
      downloadCheckDatabase(true);
      downloadChecksumDatabase(true);
    }, 1, 4, TimeUnit.HOURS);
  }

  //TODO: Rewrite this so it runs when it stops scanning
  private void downloadCheckDatabase(boolean updateDatabase) {
    try {
      LOGGER.info(I18n.tl("downl_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
      checkDatabase = YamlConfiguration.loadConfiguration(
              IOUtils.toInputStream(IOUtils.toString(new URL(DATABASE_URL), "UTF-8"), "UTF-8"));
      LOGGER.info(I18n.tl("finish_download_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
      if (scanner != null && scanner.getStatus() == Scanner.Status.SCANNING) {
        return;
      }
      if (updateDatabase) {
        LOGGER.info(I18n.tl("reloading_check_database"));
        checkRegistery.reloadCheckDatabase();
        checkRegistery.registerChecks();
        LOGGER.info(I18n.tl("reloaded_check_database"));
        if (scanner != null && scanner.getStatus() != Scanner.Status.SCANNING) {
          LOGGER.info(I18n.tl("rescan_updated"));
          scanner.scanFiles();
          LOGGER.info(I18n.tl("finish_rescan"));
          return;
        }
      }
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
  }

  //TODO: Rewrite this so it runs once it stops scanning
  private void downloadChecksumDatabase(boolean update) {
    try {
      LOGGER.info(I18n.tl("downl_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
      checksumDatabase = YamlConfiguration.loadConfiguration(
              IOUtils.toInputStream(IOUtils.toString(new URL(CHECKSUMS_URL), "UTF-8"), "UTF-8"));
      LOGGER.info(I18n.tl("finish_download_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
      if (scanner != null && scanner.getStatus() == Scanner.Status.SCANNING) {
        return;
      }
      if (update) {
        LOGGER.info(I18n.tl("reloading_checksum_database"));
        scanner.reloadChecksumDatabase();
        LOGGER.info(I18n.tl("reloaded_checksum_database"));
        if (scanner != null && scanner.getStatus() != Scanner.Status.SCANNING) {
          LOGGER.info(I18n.tl("rescan_updated"));
          scanner.scanFiles();
          LOGGER.info(I18n.tl("finish_rescan"));
          return;
        }
      }
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
  }

  @Override
  public void run() {
    init();
  }

  public CustomLogger getLogger() {
    return LOGGER;
  }

  public CheckManager getCheckManager() {
    return checkManager;
  }

  public Scanner getScanner() {
    return scanner;
  }

  public FileConfiguration getChecksumDatabase() {
    if (checksumDatabase == null) {
      downloadChecksumDatabase(false);
    }
    return checksumDatabase;
  }

  public FileConfiguration getCheckDatabase() {
    if (checkDatabase == null) {
      downloadCheckDatabase(false);
    }
    return checkDatabase;
  }

  public CommandLineParser getCommandLineParser() {
    return commandLineParser;
  }

  public boolean canUseSpigotMethods() {
    return serverHandler.canUseSpigotMethods();
  }

  public File getDataFolder() {
    return DATA_FOLDER;
  }

  public static Main getInstance() {
    return main;
  }

  public static void main(String[] args) throws IOException {
    try {
      new Main(args).start();
    } catch (Exception ex) {
      Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  public static void agentmain(String agentArgs, Instrumentation inst) {
    inst.addTransformer(new ClassDumpTransformer(main));
  }

}
