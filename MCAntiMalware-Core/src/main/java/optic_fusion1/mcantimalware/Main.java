package optic_fusion1.mcantimalware;

import java.io.File;
import java.io.IOException;
import java.lang.instrument.Instrumentation;
import java.net.URL;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.io.IOUtils;

import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.check.CheckManagerImpl;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.logging.CustomLoggerImpl;
import optic_fusion1.mcantimalware.realtimescanning.RealTimeScanner;
import optic_fusion1.mcantimalware.realtimescanning.RealTimeScannerImpl;
import optic_fusion1.mcantimalware.service.impl.PlayerBanService;
import optic_fusion1.mcantimalware.service.impl.UpdaterCheckerService;
import optic_fusion1.mcantimalware.usb.USBDriveHandler;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.javaagent.ClassDumpTransformer;
import optic_fusion1.mcantimalware.utils.taskchain.AntiMalwareChainFactory;

public class Main extends Thread {

	public String[] args;
	private static final CustomLogger LOGGER = new CustomLoggerImpl();
	private FileConfiguration checksumDatabase;
	private FileConfiguration checkDatabase;
	private CheckManagerImpl checkManager;
	private RealTimeScanner realTimeScanner;
	private CheckRegistery checkRegistery;
	public static final String URL_PREFIX = "https://raw.githubusercontent.com/OpticFusion1/MCAntiMalwareDatabase/master/";
	private static final String DATABASE_URL = URL_PREFIX + "database.yml";
	private static final String CHECKSUMS_URL = URL_PREFIX + "checksums.yml";
	private AntiMalwareChainFactory chainFactory;
	private boolean isCurrentlyScanning = false;
	private boolean shouldExceptionsBeLogged;
	private CommandLineHandler commandLineHandler;
	private ServerHandler serverHandler;
	private static final File DATA_FOLDER = new File("AntiMalware");

	public static void main(String[] args) throws IOException {
		try {
			Main main = new Main();
			new AntiMalware(main);
			main.args = args;
			main.start();
		} catch (Exception ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public static void agentmain(String agentArgs, Instrumentation inst) {
		inst.addTransformer(new ClassDumpTransformer());
	}

	private void init() {
		setName("AntiMalware/Main Thread");
		LOGGER.info("Initializing...");
		if (!DATA_FOLDER.exists()) {
			DATA_FOLDER.mkdirs();
		}
		chainFactory = new AntiMalwareChainFactory();
		LOGGER.info(
				"Any issues you're facing should be reported here: https://github.com/OpticFusion1/MCAntiMalware/issues");
		commandLineHandler = new CommandLineHandler();
		commandLineHandler.handleCommandLineArguments(args);
		shouldExceptionsBeLogged = commandLineHandler.shouldExceptionsBeLogged();
		new UpdaterCheckerService(this);
		if (commandLineHandler.shouldBanMaliciousAuthors()) {
			if (new File("banned-players.json").exists()) {
				new PlayerBanService(this);
			}
		}
		LOGGER.info("Downloading databases...");
		downloadCheckDatabase(false);
		downloadChecksumDatabase(false);
		checkManager = new CheckManagerImpl();
		checkRegistery = new CheckRegistery(this);
		checkRegistery.registerChecks();
		realTimeScanner = new RealTimeScannerImpl(this);
		if (commandLineHandler.shouldScanSingleFile()) {
			try {
				realTimeScanner.getScanner().scanFile(commandLineHandler.getScanFile());
			} catch (IOException ex) {
				if (shouldExceptionsBeLogged) {
					LOGGER.exception(ex);
				}
			}
			System.exit(0);
		}
		if (!commandLineHandler.shouldDisableAutoUpdate()) {
			LOGGER.info("Setting up Auto-Updater...");
			setupAutoUpdater();
		}
		serverHandler = new ServerHandler(this);
		serverHandler.handleServer();
		if (commandLineHandler.shouldScanDrives()) {
			new USBDriveHandler(this);
		}
		realTimeScanner.setupDirectoryWatcher();
	}

	private void setupAutoUpdater() {
		ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
		executor.scheduleWithFixedDelay(() -> {
			downloadCheckDatabase(true);
			downloadChecksumDatabase(true);
		}, 1, 4, TimeUnit.HOURS);
	}

	private void downloadCheckDatabase(boolean updateDatabase) {
		try {
			LOGGER.info(I18n.tl("downl_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
			checkDatabase = YamlConfiguration.loadConfiguration(
					IOUtils.toInputStream(IOUtils.toString(new URL(DATABASE_URL), "UTF-8"), "UTF-8"));
			LOGGER.info(I18n.tl("finish_download_check_database", (updateDatabase ? "(AUTO-UPDATE)" : "")));
			if (isCurrentlyScanning) {
				return;
			}
			if (updateDatabase) {
				LOGGER.info(I18n.tl("reloading_check_database"));
				checkRegistery.reloadCheckDatabase();
				checkRegistery.registerChecks();
				LOGGER.info(I18n.tl("reloaded_check_database"));
				LOGGER.info(I18n.tl("rescan_updated"));
				realTimeScanner.getScanner().scanFiles();
				LOGGER.info(I18n.tl("finish_rescan"));
			}
		} catch (IOException ex) {
			if (shouldExceptionsBeLogged) {
				LOGGER.exception(ex);
			}
		}
	}

	private void downloadChecksumDatabase(boolean update) {
		try {
			LOGGER.info(I18n.tl("downl_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
			checksumDatabase = YamlConfiguration.loadConfiguration(
					IOUtils.toInputStream(IOUtils.toString(new URL(CHECKSUMS_URL), "UTF-8"), "UTF-8"));
			LOGGER.info(I18n.tl("finish_download_checksum_database", (update ? "(AUTO-UPDATE)" : "")));
			if (isCurrentlyScanning) {
				return;
			}
			if (update) {
				LOGGER.info(I18n.tl("reloading_checksum_database"));
				realTimeScanner.getScanner().reloadChecksumDatabase();
				LOGGER.info(I18n.tl("reloaded_checksum_database"));
				LOGGER.info(I18n.tl("rescan_updated"));
				realTimeScanner.getScanner().scanFiles();
				LOGGER.info(I18n.tl("finish_rescan"));
			}
		} catch (IOException ex) {
			if (shouldExceptionsBeLogged) {
				LOGGER.exception(ex);
			}
		}
	}

	public AntiMalwareChainFactory getChainFactory() {
		return chainFactory;
	}

	@Override
	public void run() {
		init();
	}

	public CustomLogger getLogger() {
		return LOGGER;
	}

	public CheckManagerImpl getCheckManager() {
		return checkManager;
	}

	public RealTimeScanner getRealTimeScanner() {
		return realTimeScanner;
	}

	public FileConfiguration getChecksumDatabase() {
		if (checksumDatabase == null) {
			downloadChecksumDatabase(false);
		}
		return checksumDatabase;
	}

	public FileConfiguration getCheckDatabase() {
		if (checkDatabase == null) {
			downloadCheckDatabase(false);
		}
		return checkDatabase;
	}

	public void setIsCurrentlyScanning(boolean isCurrentlyScanning) {
		this.isCurrentlyScanning = isCurrentlyScanning;
	}

	public boolean isCurrentlyScanning() {
		return isCurrentlyScanning;
	}

	public CommandLineHandler getCommandLineHandler() {
		return commandLineHandler;
	}

	public boolean canUseSpigotMethods() {
		return serverHandler.canUseSpigotMethods();
	}

	public File getDataFolder() {
		return DATA_FOLDER;
	}
}
