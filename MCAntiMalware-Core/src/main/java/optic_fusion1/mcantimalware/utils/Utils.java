package optic_fusion1.mcantimalware.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;

//TODO: Make certain messages here translatable
public final class Utils {

  private Utils() {
  }

  public static void copy(String resource, String destination) {
    InputStream ddlStream = Main.class.getClassLoader().getResourceAsStream(resource);
    if (ddlStream == null) {
      LOGGER.warn(I18n.tl("resource_not_found", resource));
      return;
    }
    try (FileOutputStream fos = new FileOutputStream(destination)) {
      byte[] buf = new byte[2048];
      int r;
      while (-1 != (r = ddlStream.read(buf))) {
        fos.write(buf, 0, r);
      }
    } catch (FileNotFoundException ex) {
      LOGGER.exception(ex);
    } catch (IOException ex) {
      LOGGER.exception(ex);
    }
  }

  public static void saveResource(File dataFolder, String resourcePath, boolean replace) {
    if (resourcePath == null || resourcePath.isEmpty()) {
      throw new IllegalArgumentException(I18n.tl("null_or_empty", "DesourcePath"));
    }
    if (dataFolder == null || resourcePath.isEmpty()) {
      throw new IllegalArgumentException(I18n.tl("null_or_empty", "DataFolder"));
    }

    resourcePath = resourcePath.replace('\\', '/');
    InputStream in = getResource(resourcePath);
    if (in == null) {
      LOGGER.warn(I18n.tl("embedded_resource_not_found", resourcePath));
      return;
    }
    File outFile = new File(dataFolder, resourcePath);
    int lastIndex = resourcePath.lastIndexOf('/');
    File outDir = new File(dataFolder, resourcePath.substring(0, lastIndex >= 0 ? lastIndex : 0));

    if (!outDir.exists()) {
      outDir.mkdirs();
    }

    try {
      if (!outFile.exists() || replace) {
        try (OutputStream out = new FileOutputStream(outFile)) {
          byte[] buf = new byte[1024];
          int len;
          while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
          }
        }
        in.close();
      } else {
        LOGGER.warn(I18n.tl("Could not save {0} to {1} because {2} already exists.",
                new Object[]{outFile.getName(), outFile, outFile.getName()}));
      }
    } catch (IOException ex) {
      LOGGER.severe(I18n.tl("Could not save {0} to {1}", new Object[]{outFile.getName(), outFile}));
    }
  }

  public static InputStream getResource(String filename) {
    if (filename == null || filename.isEmpty()) {
      throw new IllegalArgumentException(I18n.tl("null_or_empty", "fileName"));
    }
    InputStream input = Main.class.getClassLoader().getResourceAsStream(filename);
    if (input == null) {
      LOGGER.warn(I18n.tl("resource_not_found", filename));
      return null;
    }
    return input;
  }

  public static void notNull(Object o, String message) {
    if (o == null) {
      throw new NullPointerException(message);
    }
  }

  public static void notEmpty(String s, String errorMessage) {
    if (s.isEmpty()) {
      throw new IllegalArgumentException(errorMessage);
    }
  }

  public static void isTrue(boolean expression, String errorMessage) {
    if (!expression) {
      throw new IllegalArgumentException(errorMessage);
    }
  }

  public static boolean moveFile(String sourcePath, String targetPath) {
    boolean fileMoved = true;
    try {
      Files.move(Paths.get(sourcePath), Paths.get(targetPath), StandardCopyOption.REPLACE_EXISTING);
    } catch (IOException e) {
      fileMoved = false;
    }
    return fileMoved;
  }

  public static String formatTodaysDate() {
    Calendar cal = new GregorianCalendar();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
    dateFormat.setTimeZone(cal.getTimeZone());
    return dateFormat.format(cal.getTime());
  }

  public static int getJavaVersion() {
    String version = System.getProperty("java.version");
    if (version.startsWith("1.")) {
      version = version.substring(2);
    }
    int dotPos = version.indexOf('.');
    int dashPos = version.indexOf('-');
    return Integer.parseInt(version.substring(0, dotPos > -1 ? dotPos : dashPos > -1 ? dashPos : 1));
  }

  public static List<String> getAuthors(FileConfiguration config) {
    List<String> authors = new ArrayList<>();
    if (config.isSet("authors")) {
      if (config.isList("authors")) {
        authors.addAll(config.getStringList("authors"));
      } else {
        authors.add(config.getString("authors"));
      }
    }
    if (config.isSet("author")) {
      if (config.isList("author")) {
        authors.addAll(config.getStringList("author"));
      } else {
        authors.add(config.getString("author"));
      }
    }
    return authors;
  }

  public static FileSystem fileSystemForZip(final Path pathToZip) throws IOException {
//    Objects.requireNotNull(pathToZip, "pathToZip is null");
    try {
      return FileSystems.newFileSystem(pathToZip, null);
    } catch (Exception e) {
      try {
        return FileSystems.getFileSystem(URI.create("jar:" + pathToZip.toUri() + "!/"));
      } catch (Exception e2) {
        return FileSystems.newFileSystem(URI.create("jar:" + pathToZip.toUri() + "!/"), new HashMap<>());
      }
    }
  }

}
