package optic_fusion1.mcantimalware.utils.javaagent;

import com.sun.tools.attach.AgentInitializationException;
import com.sun.tools.attach.AgentLoadException;
import com.sun.tools.attach.AttachNotSupportedException;
import com.sun.tools.attach.VirtualMachine;
import com.sun.tools.attach.spi.AttachProvider;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Locale;

/**
 * Agent load for the hotspot virtual machine and virtual machines that provide con.sun.tools.attach.* Don't use this class directly, prefer {@link AgentLoader} instead.
 */
public class AgentLoaderHotSpot {

  /**
   * Dynamically loads a java agent. Deals with the problem of finding the proper jvm classes. Don't call this method directly use {@link AgentLoader#loadAgent} instead
   *
   * @param agentJar the agent jar
   * @param options options that will be passed back to the agent, can be null
   * @see java.lang.instrument.Instrumentation
   */
  public void loadAgent(String agentJar, String options) {

    VirtualMachine vm = getVirtualMachine();
    if (vm == null) {
      throw new RuntimeException("Can't attach to this jvm. Add -javaagent:" + agentJar + " to the commandline");
    }
    try {
      try {
        vm.loadAgent(agentJar, options);
      } finally {
        vm.detach();
      }
    } catch (AgentInitializationException | AgentLoadException | IOException e) {
      throw new RuntimeException("Can't attach to this jvm. Add -javaagent:" + agentJar + " to the commandline", e);
    }
  }

  public static VirtualMachine getVirtualMachine() {
    if (VirtualMachine.list().size() > 0) {
      // tools jar present
      String pid = getPid();
      try {
        return VirtualMachine.attach(pid);
      } catch (AttachNotSupportedException | IOException e) {
        throw new RuntimeException(e);
      }
    }

    String jvm = System.getProperty("java.vm.name").toLowerCase(Locale.ENGLISH);
    if (jvm.contains("hotspot") || jvm.contains("openjdk") || jvm.contains("dynamic code evolution")) {
      // tools jar not present, but it's a sun vm
      Class<VirtualMachine> virtualMachineClass = pickVmImplementation();
      try {
        final AttachProviderPlaceHolder attachProvider = new AttachProviderPlaceHolder();
        Constructor<VirtualMachine> vmConstructor = virtualMachineClass.getDeclaredConstructor(AttachProvider.class, String.class);
        vmConstructor.setAccessible(true);
        VirtualMachine newVM = vmConstructor.newInstance(attachProvider, getPid());
        return newVM;
      } catch (UnsatisfiedLinkError e) {
        throw new RuntimeException("This jre doesn't support the native library for attaching to the jvm", e);
      } catch (IllegalAccessException | IllegalArgumentException | InstantiationException
       | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }

    // not a hotspot based virtual machine
    return null;
  }

  /**
   * Gets the current jvm pid.
   *
   * @return the pid as String
   */
  public static String getPid() {
    String nameOfRunningVM = ManagementFactory.getRuntimeMXBean().getName();
    int p = nameOfRunningVM.indexOf('@');
    return nameOfRunningVM.substring(0, p);
  }

  /**
   * Picks one of the Oracle's implementations of VirtualMachine
   */
  @SuppressWarnings("unchecked")
  private static Class<VirtualMachine> pickVmImplementation() {
    String os = System.getProperty("os.name").toLowerCase(Locale.ENGLISH);
    try {
      if (os.contains("win")) {
        return (Class<VirtualMachine>) AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.WindowsVirtualMachine");
      }
      if (os.contains("nix") || os.contains("nux") || os.indexOf("aix") > 0) {
        return (Class<VirtualMachine>) AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.LinuxVirtualMachine");
      }
      if (os.contains("mac")) {
        return (Class<VirtualMachine>) AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.BsdVirtualMachine");
      }
      if (os.contains("sunos") || os.contains("solaris")) {
        return (Class<VirtualMachine>) AgentLoaderHotSpot.class.getClassLoader().loadClass("sun.tools.attach.SolarisVirtualMachine");
      }
    } catch (ClassNotFoundException ex) {
      throw new RuntimeException(ex);
    }
    throw new RuntimeException("Can't find a vm implementation for the operational system: " + System.getProperty("os.name"));
  }
}
