package optic_fusion1.mcantimalware.transformers;

import java.lang.reflect.InvocationTargetException;
import java.text.MessageFormat;
import java.util.concurrent.Callable;

import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.BindingPriority;
import net.bytebuddy.implementation.bind.annotation.RuntimeType;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;

public class SimplePluginManagerTransformer {

  @BindingPriority(Integer.MAX_VALUE)
  public static void disablePlugin(@SuperCall Callable superCall, @RuntimeType @Argument(0) Object plugin) {
	CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
	if (callerInfo != null) {
	  try {
		if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
		  String message = MessageFormat.format("{0} tried to disable the plugin {1}", callerInfo.getPlugin().getJar(),
			  getPluginName(plugin));
		  Main.getInstance().getLogger().info(message);
		  throw new SecurityException(message);
		}
	  } catch (Exception e) {
		e.printStackTrace();
	  }
	}
	try {
	  superCall.call();
	} catch (Exception e) {
	  e.printStackTrace();
	}
  }

  public static void disablePlugins(@SuperCall Callable superCall) {
	CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
	if (callerInfo != null) {
	  String message = MessageFormat.format("{0} tried to disable all of the servers plugins",
		  callerInfo.getPlugin().getJar());
	  if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
		throw new SecurityException(message);
	  }
	  Main.getInstance().getLogger().info(message);
	}
	try {
	  superCall.call();
	} catch (Exception e) {
	  e.printStackTrace();
	}
  }

  @BindingPriority(Integer.MAX_VALUE)
  public static void enablePlugin(@SuperCall Callable superCall, @RuntimeType @Argument(0) Object plugin) {
	CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
	if (callerInfo != null) {
	  try {
		String message = MessageFormat.format("{0} tried to enable the plugin {1}", callerInfo.getPlugin().getJar(),
			getPluginName(plugin));
		if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
		  throw new SecurityException(message);
		}
		Main.getInstance().getLogger().info(message);
	  } catch (Exception e) {
		e.printStackTrace();
	  }
	}
	try {
	  superCall.call();
	} catch (Exception e) {
	  e.printStackTrace();
	}
  }

  private static String getPluginName(Object plugin) throws IllegalAccessException, IllegalArgumentException,
	  InvocationTargetException, NoSuchMethodException, SecurityException {
	return (String) plugin.getClass().getMethod("getName").invoke(plugin);
  }

}
