package optic_fusion1.mcantimalware.transformers;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Callable;
import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import net.bytebuddy.implementation.bind.annotation.This;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;

public final class PlayerChatEventTransformer {

  private PlayerChatEventTransformer() {
  }

  public static void setMessage(@SuperCall Callable superCall, @Argument(0) String message) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static void setCancelled(@This Object chatEvent, @SuperCall Callable superCall, @Argument(0) boolean cancel) {
    if (cancel) {
      try {
        String message = (String) chatEvent.getClass().getMethod("getMessage").invoke(chatEvent);
        if (Main.getInstance().getDatabase().isStringBlacklisted(message)) {
          CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
          if (callerInfo != null) {
            if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
              throw new FormattedSecurityException("File: {0} Player: {1} said a blacklisted word '{2}'",
                      new Object[]{callerInfo.getPlugin().getJar(), getPlayerName(chatEvent), message});
            }
          }
        }
      } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException e) {
        e.printStackTrace();
      }
    }
    try {
      superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private static String getPlayerName(Object object) throws IllegalAccessException, IllegalArgumentException,
          InvocationTargetException, NoSuchMethodException, SecurityException {
    Object player = object.getClass().getMethod("getPlayer").invoke(object);
    return (String) player.getClass().getMethod("getDisplayName").invoke(player);
  }

}
