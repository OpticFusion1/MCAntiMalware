package optic_fusion1.mcantimalware.transformers;

import java.util.HashMap;
import java.util.concurrent.Callable;
import net.bytebuddy.implementation.bind.annotation.RuntimeType;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;

public final class CraftInventoryTransformer {

  private CraftInventoryTransformer() {
  }

  @RuntimeType
  public static Object[] getContents(@SuperCall Callable<Object[]> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  @RuntimeType
  public static HashMap addItem(@SuperCall Callable<HashMap> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
  }

  public static void setItem(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

  public static void setContents(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

  public static HashMap removeItem(@SuperCall Callable<HashMap> superCall) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (Main.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("File: {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    try {
      return superCall.call();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }

  public static void remove(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

  public static void clear(@SuperCall Callable superCall) {
    Transformers.a(superCall);
  }

}
