package optic_fusion1.mcantimalware.servers.spigot;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.FileSystem;
import java.nio.file.Files;
import java.nio.file.Path;

import com.sun.jna.platform.win32.Ntifs;

import net.bytebuddy.dynamic.ClassFileLocator;

import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.AntiMalwareSecurityManager;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.servers.ServerHandler;
import optic_fusion1.mcantimalware.transformers.Transformers;
import optic_fusion1.mcantimalware.utils.I18n;
import optic_fusion1.mcantimalware.utils.ReflectionUtils;
import optic_fusion1.mcantimalware.utils.Utils;

public class SpigotServerHandler extends ServerHandler {

	private String version;

	@Override
	protected boolean prepareServer() {
		if (!getServerFile().exists()) {
			logger.info(I18n.tl("file_doesn't_exist", getServerFile()));
			return false;
		}
		this.version = ReflectionUtils.getVersion(getServerFile());
		if (version.equals(I18n.tl("version_used_not_found"))) {
			return false;
		}
		return true;
	}

	@Override
	protected void startServer() {
		try {
			URL jarURL = getServerFile().toURI().toURL();
			final ClassLoader parentClassLoader = createClassLoader(jarURL);

			if (commandLineParser.shouldUseTransformers()) {
				applyTransformers(parentClassLoader, getServerFile(), version);
			}

			Thread childProcess = createChildProcess(parentClassLoader, "org.bukkit.craftbukkit.Main", "main",
					new Class[] { String[].class }, new Object[] { getServerArguments() });

			canUseSpigotMethods = true;
			logger.info(I18n.tl("sm_server_hooked", version));
			if (commandLineParser.shouldDumpClasses()) {
				logger.info(I18n.tl("sm_dumping_classes"));
			}
		} catch (IOException e) {
			logger.exception(e);
		}
	}

	@Override
	protected boolean checkServerType(File serverFile) {
		try (FileSystem fs = Utils.fileSystemForZip(serverFile.toPath())) {
			if (Files.exists(fs.getPath("version.json"))) {
				return true;
			}
		} catch (IOException e) {
			logger.exception(e);
		}
		return false;
	}

	@Override
	public String getServerTypeName() {
		return "Spigot";
	}

}
