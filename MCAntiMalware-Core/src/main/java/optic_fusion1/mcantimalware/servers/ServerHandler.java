package optic_fusion1.mcantimalware.servers;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;

import net.bytebuddy.dynamic.ClassFileLocator;

import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.AntiMalwareSecurityManager;
import optic_fusion1.mcantimalware.runtimeprotect.PluginIndex;
import optic_fusion1.mcantimalware.scanner.Scanner;
import optic_fusion1.mcantimalware.servers.paper.PaperServerHandler;
import optic_fusion1.mcantimalware.servers.spigot.SpigotServerHandler;
import optic_fusion1.mcantimalware.transformers.Transformers;
import optic_fusion1.mcantimalware.utils.I18n;

public abstract class ServerHandler {

	private static ArrayList<ServerHandler> handlers = new ArrayList<>();

	static {
		handlers.add(new PaperServerHandler());
		handlers.add(new SpigotServerHandler());
	}

	private PluginIndex pluginIndex;
	protected CustomLogger logger;
	protected CommandLineParser commandLineParser;
	protected boolean canUseSpigotMethods;
	private Scanner scanner;
	private Main main;

	public static ServerHandler identifyServerType(Main main) {
		for (ServerHandler sh : handlers) {
			sh.setMain(main);
			if (sh.checkServerType(main.getCommandLineParser().getServerJar())) {
				return sh;
			}
		}
		return null;
	}

	public abstract String getServerTypeName();

	protected abstract boolean checkServerType(File serverFile);

	protected abstract boolean prepareServer();

	protected abstract void startServer();

	protected String[] getServerArguments() {
		return commandLineParser.getServerArguments();
	}

	protected File getServerFile() {
		return commandLineParser.getServerJar();
	}

	protected ClassLoader createClassLoader(URL... urls) {
		return new URLClassLoader(urls, ClassLoader.getSystemClassLoader());
	}

	protected void applyTransformers(ClassLoader classLoader, File jarFile, String version) {
		logger.info(I18n.tl("start_sm_load_transformers"));
		try {
			Transformers.applyTransformers(classLoader, ClassFileLocator.ForJarFile.of(jarFile), version);
		} catch (IOException e) {
			logger.exception(e);
			System.exit(1);
			return;
		}
		logger.info(I18n.tl("end_sm_load_transformers"));
	}

	protected Thread createChildProcess(ClassLoader classLoader, String className, String methodName,
			Class<?>[] argumentTypes, Object[] args) {
		Thread serverThread = new Thread(() -> {
			try {
				Thread.currentThread().setContextClassLoader(classLoader);
				logger.info(I18n.tl("sm_start_server"));
				classLoader.loadClass(className).getMethod(methodName, argumentTypes).invoke(null, args);
			} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException
					| SecurityException | ClassNotFoundException e) {
				logger.exception(e);
			}
		});
		serverThread.start();
		return serverThread;
	}

	protected boolean setSecurityManager(SecurityManager sm) {
		logger.info(I18n.tl("start_sm_setup"));
		try {
			System.setSecurityManager(sm);
		} catch (SecurityException se) {
			logger.exception(se);
			return false;
		}
		logger.info(I18n.tl("end_sm_setup"));
		return true;
	}

	public void handleServer() {
		if (commandLineParser.shouldRunServerJar()) {
			File serverJar = commandLineParser.getServerJar();
			scanner.addFileToQueue(serverJar.toPath());
			if (!prepareServer()) {
				logger.info(I18n.tl("error_server_startup"));
				System.exit(0);
			}
			if (commandLineParser.shouldRunSecurityManager()) {
				if (!setSecurityManager(new AntiMalwareSecurityManager(main))) {
					logger.info(I18n.tl("error_sm_setup"));
					System.exit(0);
				}
			}
			startServer();
		}
	}

	public void setMain(Main main) {
		logger = main.getLogger();
		commandLineParser = main.getCommandLineParser();
		scanner = main.getScanner();
		this.main = main;
	}

	public PluginIndex getPluginIndex() {
		return pluginIndex;
	}

	public boolean canUseSpigotMethods() {
		return canUseSpigotMethods;
	}
}
