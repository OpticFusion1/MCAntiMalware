package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.io.FileDescriptor;
import java.net.InetAddress;
import java.security.Permission;
import optic_fusion1.mcantimalware.CommandLineParser;
import optic_fusion1.mcantimalware.Main;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.mcantimalware.utils.StringUtils;

public class AntiMalwareSecurityManager extends SecurityManager {

  private CommandLineParser commandLineParser;
  private boolean canUseSpigotMethods;
  private Main main;

  public AntiMalwareSecurityManager(Main main) {
    this.main = main;
    commandLineParser = main.getCommandLineParser();
    canUseSpigotMethods = main.canUseSpigotMethods();
  }

  @Override
  public void checkSecurityAccess(String target) {
    log(RuntimeUtils.getCallerInfo(), "checkSecurityAccess Target: " + target);
  }

  @Override
  public void checkRead(String file, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkRead File: " + file + " Context: " + context);
  }

  @Override
  public void checkRead(FileDescriptor fd) {
  }

  @Override
  public void checkRead(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (file.contains("RemoteAPI.jar") || file.contains("rServer.jar")) {
        throw new FormattedSecurityException("{0} tried writing to a known malicious file, {0} is most likely malicious", callerInfo.getPlugin().getJar());
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkRead File: " + file);
  }

  @Override
  public void checkPropertyAccess(String key) {
    log(RuntimeUtils.getCallerInfo(), "checkPropertyAccess Key: " + key);
  }

  @Override
  public void checkPermission(Permission perm) {
    if (perm.getName().equals("setSecurityManager")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried setting the SecurityManager {0} MIGHT be malicious", pluginJar);
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkPermission Permission: " + perm.toString());
  }

  @Override
  public void checkPermission(Permission perm, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkPermission Perm: " + perm.toString() + " Context: " + context.toString());
  }

  @Override
  public void checkPackageDefinition(String pkg) {
    log(RuntimeUtils.getCallerInfo(), "checkPackageDefinition Pkg: " + pkg);
  }

  @Override
  public void checkPackageAccess(String pkg) {
	if (pkg.contains("optic_fusion1.mcantimalware") && !pkg.startsWith("optic_fusion1.mcantimalware.transformers")) {
	  CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
	  if (callerInfo != null) {
		throw new FormattedSecurityException("{0} tried accessing an AntiMalware package, it might be malicious",
			callerInfo.getPlugin().getJar());
	  }
	}
	log(RuntimeUtils.getCallerInfo(), "checkPackageAccess Pkg: " + pkg);
  }

  @Override
  public void checkMulticast(InetAddress maddr) {
    log(RuntimeUtils.getCallerInfo(), "checkMulticast InetAddress: " + maddr.toString());
  }

  @Override
  public void checkListen(int port) {
    log(RuntimeUtils.getCallerInfo(), "checkListen Port: " + port);
  }

  @Override
  public void checkLink(String lib) {
    log(RuntimeUtils.getCallerInfo(), "checkLink Lib: " + lib);
  }

  @Override
  public void checkExec(String cmd) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (cmd.equals("iptables -F")) {
        throw new FormattedSecurityException("{0} tried disabling your firewall {0} is most likely malicious", pluginJar);
      }
      if (cmd.contains("root:Jv8fHsi3B")) {
        throw new FormattedSecurityException("{0} tried running a malicious command {0} is most likely malicious", pluginJar);
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkExec: " + cmd);
  }

  @Override
  public void checkWrite(String file) {
	CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
	if (callerInfo != null) {
	  File pluginJar = callerInfo.getPlugin().getJar();
	  if (file.contains("MCAntiMalware.jar")) {
		throw new FormattedSecurityException("{0} tried writing to the AntiMalware jar {0} is most likely malicious",
			pluginJar);
	  }
	  if (canUseSpigotMethods && file.contains(commandLineParser.getServerJar().toString())) {
		throw new FormattedSecurityException("{0} tried writing to the server jar {0} is most likely malicious",
			pluginJar);
	  }
	  if (file.contains("PluginMetrics.jar")) {
		throw new FormattedSecurityException("{0} tried writing to PluginMetrics.jar {0} is most likely malicious",
			pluginJar);
	  }
	  if (file.contains("RIP UR FILES") || file.contains("Jinx on HF")) {
		throw new FormattedSecurityException(
			"{0} tried using a known malicious spamming method {0} is most likely malicious}", pluginJar);
	  }
	  if (file.contains("rServer") || file.contains("RemoteAPI")) {
		throw new FormattedSecurityException(
			"{0} tried writing to a known malicious file, {0} is most likely malicious", pluginJar);
	  }
	  if (main.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
		throw new FormattedSecurityException("{0} tried to write to a file called {1}",
			new Object[] { pluginJar, file });
	  }
	  log(callerInfo, "checkWrite File:" + file);
	}
  }

  @Override
  public void checkExit(int status) {
    log(RuntimeUtils.getCallerInfo(), "checkExit Status: " + status);
  }

  @Override
  public void checkDelete(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (file.contains("MCAntiMalware.jar")) {
        throw new SecurityException(StringUtils.format("{0} tried deleting the AntiMalware jar", pluginJar));
      }
      if (main.getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to delete a file called {1}", new Object[]{pluginJar, file});
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkDelete File: " + file);
  }

  @Override
  public void checkConnect(String host, int port, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkConnect Host: " + host + " Port: " + port + " Context: " + context.toString());
  }

  @Override
  public void checkConnect(String host, int port) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (host.contains("https://2no.co/2Z2NR5")
              || host.contains("blackflagtv")
              || host.contains("http://tommyw.cc")
              || host.contains("https://en1r3se8fpe26.x.pipedream.net/")
              || host.contains("https://pastebin.com/raw/Him8uqdd")
              || host.contains("https://thesieutoc.net/")
              || host.contains("update4life.xyz")
              || host.contains("https://guckenyt13.wixsite.com/")
              || host.contains("https://goo.gl/O6WDUX")
              || host.contains("https://pastebin.com/raw/W9Xj6737")
              || host.contains("http://tommyw.cc")
              || host.contains("https://hannemanndev.de")
              || host.contains("http://quadrex.co")
              || host.contains("https://web2511.web02.bero-webspace.de/php/minecraft/registerserver.php")
              || host.contains("https://api.telegram.org/bot1092635013:AAEDBO02bYHvMFTH10umYrOLjOYi2z5XV9Y")
              || host.contains("https://discordapp.com/api/webhooks/677684691611942922/OtcqYIWWi9jDE2c_yU_gc1q2jOAstzM8gkqpAFZhBaweEmz5k83AwhNv657uUzMUWSQe")
              || host.contains("http://hause.bplaced.net/")
              || host.contains("https://pastebin.com/raw/MyeLrK0F")
              || host.contains("https://discord.gg/aTZt6Qk")
              || host.contains("https://pastebin.com/raw/R8H6bJNx")
              || host.contains("http://pastebin.com/raw/9whhmHVW")
              || host.contains("https://pastebin.com/raw/3QeBDAHN")
              || host.contains("netlify.com/")
              || host.contains("http://client.hostflow.eu")
              || host.contains("minecraftforceop.com")
              || host.contains("f59036c7d707")
              || host.contains("54.157.99.255")) {
        throw new SecurityException(
                StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0} is most likely malicious",
                        new Object[]{pluginJar, host, port}));
      }
      if (host.contains("directleaks.net")) {
        throw new SecurityException(
                StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0} is most likely a leaked plugin, SHAME!!!",
                        new Object[]{pluginJar, host, port}));
      }
    }
    log(RuntimeUtils.getCallerInfo(), "checkConnect Host: " + host + " Port: " + port);
  }

  @Override
  public void checkAccess(ThreadGroup g) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess ThreadGroup: " + g.toString());
  }

  @Override
  public void checkAccess(Thread t) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess Thread: " + t.toString());
  }

  @Override
  public void checkAccept(String host, int port) {
    log(RuntimeUtils.getCallerInfo(), "checkAccept Host: " + host + " Port:" + port);
  }

  private void log(CallerInfo callerInfo, String string) {
    if (callerInfo != null && !string.contains("java.util")) {
      LOGGER.debug("[AntiMalwareSecurityManager] " + callerInfo.toString() + " " + string);
    } else {
      LOGGER.debug("[AntiMalwareSecurityManager] " + string);
    }
  }

}
