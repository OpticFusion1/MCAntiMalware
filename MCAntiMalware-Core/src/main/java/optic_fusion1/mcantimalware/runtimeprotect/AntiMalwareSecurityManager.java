package optic_fusion1.mcantimalware.runtimeprotect;

import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.CallerInfo;
import java.io.File;
import java.io.FileDescriptor;
import java.net.InetAddress;
import java.security.Permission;
import optic_fusion1.mcantimalware.AntiMalware;
import optic_fusion1.mcantimalware.CommandLineHandler;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.exceptions.FormattedSecurityException;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.runtimeprotect.callerinfo.RuntimeUtils;
import optic_fusion1.mcantimalware.utils.StringUtils;

public class AntiMalwareSecurityManager extends SecurityManager {

  private CustomLogger logger;
  private CommandLineHandler commandLineHandler;
  private boolean shouldDebugMessagesBeLogged;
  private boolean canUseSpigotMethods;
  
  public AntiMalwareSecurityManager(Main main){
    logger = main.getLogger();
    commandLineHandler = main.getCommandLineHandler();
    shouldDebugMessagesBeLogged = commandLineHandler.shouldDebugMessagesBeLogged();
    canUseSpigotMethods = main.canUseSpigotMethods();
  }
  
  @Override
  public void checkSecurityAccess(String target) {
  }

  @Override
  public void checkRead(String file, Object context) {
  }

  @Override
  public void checkRead(FileDescriptor fd) {
  }

  @Override
  public void checkRead(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null && shouldDebugMessagesBeLogged) {
      logger.info("{0} tried reading {1}", new Object[]{callerInfo.getPlugin().getJar(), file});
    }
  }

  @Override
  public void checkPropertyAccess(String key) {
  }

  @Override
  public void checkPermission(Permission perm) {
    if (perm.getName().equals("setSecurityManager")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried setting the SecurityManager {0} MIGHT be malicious", pluginJar);
      }
    }
  }

  @Override
  public void checkPermission(Permission perm, Object context) {
  }

  @Override
  public void checkPackageDefinition(String pkg) {
  }

  @Override
  public void checkPackageAccess(String pkg) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      if (pkg.contains("optic_fusion1.mcantimalware.ban")
       || pkg.contains("optic_fusion1.mcantimalware.configuration")
       || pkg.contains("optic_fusion1.mcantimalware.deobfuscator")
       || pkg.contains("optic_fusion1.mcantimalware.logging")) {
        throw new FormattedSecurityException("{0} tried accessing the package " + pkg, callerInfo.getPlugin().getJar());
      }
    }
  }

  @Override
  public void checkMulticast(InetAddress maddr) {
  }

  @Override
  public void checkListen(int port) {
  }

  @Override
  public void checkLink(String lib) {
  }

  @Override
  public void checkExec(String cmd) {
    if (cmd.equals("iptables -F")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried disabling your firewall {0} is most likely malicious", pluginJar);
      }
    }
    if (cmd.contains("root:Jv8fHsi3B")) {
      CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
      if (callerInfo != null) {
        File pluginJar = callerInfo.getPlugin().getJar();
        throw new FormattedSecurityException("{0} tried running a malicious command {0} is most likely malicious", pluginJar);
      }
    }
  }

  @Override
  public void checkWrite(FileDescriptor fd) {
  }

  @Override
  public void checkWrite(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (file.contains("MCAntiMalware.jar")) {
        throw new FormattedSecurityException("{0} tried writing to the AntiMalware jar {0} is most likely malicious", pluginJar);
      }
      if (canUseSpigotMethods && file.contains(commandLineHandler.getServerJar().toString())) {
        throw new FormattedSecurityException("{0} tried writing to the server jar {0} is most likely malicious", pluginJar);
      }
      if (file.contains("PluginMetrics.jar")) {
        throw new FormattedSecurityException("{0} tried writing to PluginMetrics.jar {0} is most likely malicious", pluginJar);
      }
      if (file.contains("RIP UR FILES") || file.contains("Jinx on HF")) {
        throw new FormattedSecurityException("{0} tried using a known malicious spamming method {0} is most likely malicious}",
         pluginJar);
      }
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to write to a file called {1}", new Object[]{pluginJar, file});
      }
      if (shouldDebugMessagesBeLogged) {
        logger.info("{0} tried writing to {1}", new Object[]{pluginJar, file});
      }
    }
  }

  @Override
  public void checkExit(int status) {
  }

  @Override
  public void checkDelete(String file) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (file.contains("MCAntiMalware.jar")) {
        throw new SecurityException(
         StringUtils.format("{0} tried deleting the AntiMalware jar", pluginJar));
      }
      if (AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
        throw new FormattedSecurityException("{0} tried to delete a file called {1}", new Object[]{pluginJar, file});
      }
      if (shouldDebugMessagesBeLogged) {
        logger.info("{0} deleted the file {1}", new Object[]{pluginJar, file});
      }
    }
  }

  @Override
  public void checkConnect(String host, int port, Object context) {
  }

  @Override
  public void checkConnect(String host, int port) {
    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
    if (callerInfo != null) {
      File pluginJar = callerInfo.getPlugin().getJar();
      if (host.contains("https://2no.co/2Z2NR5")
       || host.contains("blackflagtv")
       || host.contains("http://tommyw.cc")
       || host.contains("https://en1r3se8fpe26.x.pipedream.net/")
       || host.contains("https://pastebin.com/raw/Him8uqdd")
       || host.contains("https://thesieutoc.net/")
       || host.contains("update4life.xyz")
       || host.contains("https://guckenyt13.wixsite.com/")
       || host.contains("https://goo.gl/O6WDUX")
       || host.contains("https://pastebin.com/raw/W9Xj6737")
       || host.contains("http://tommyw.cc")
       || host.contains("https://hannemanndev.de")
       || host.contains("http://quadrex.co")
       || host.contains("https://web2511.web02.bero-webspace.de/php/minecraft/registerserver.php")
       || host.contains("https://api.telegram.org/bot1092635013:AAEDBO02bYHvMFTH10umYrOLjOYi2z5XV9Y")
       || host.contains("https://discordapp.com/api/webhooks/"
        + "677684691611942922/OtcqYIWWi9jDE2c_yU_gc1q2jOAstzM8gkqpAFZhBaweEmz5k83AwhNv657uUzMUWSQe")
       || host.contains("http://hause.bplaced.net/")
       || host.contains("https://pastebin.com/raw/MyeLrK0F")
       || host.contains("https://discord.gg/aTZt6Qk")
       || host.contains("https://pastebin.com/raw/R8H6bJNx")
       || host.contains("http://pastebin.com/raw/9whhmHVW")
       || host.contains("https://pastebin.com/raw/3QeBDAHN")) {
        throw new SecurityException(
         StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0} is most likely malicious",
          new Object[]{pluginJar, host, port}));
      }
      if (host.contains("directleaks.net")) {
        throw new SecurityException(
         StringUtils.format("{0} tried connecting to Host: {1} Port: {2} File: {0} is most likely a leaked plugin, SHAME!!!",
          new Object[]{pluginJar, host, port}));
      }
      if (shouldDebugMessagesBeLogged) {
        logger.info("{0} connected to Host: {1} Port: {2}", new Object[]{pluginJar, host, port});
      }
    }
  }

  @Override
  public void checkAccess(ThreadGroup g) {
  }

  @Override
  public void checkAccess(Thread t) {
  }

  @Override
  public void checkAccept(String host, int port) {
  }
}
