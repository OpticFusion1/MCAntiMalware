package optic_fusion1.mcantimalware.runtimeprotect;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;

public class PluginIndex {

  private final List<IndexedPlugin> plugins = new ArrayList<>();

  public IndexedPlugin getClassOwner(String className) {
    return plugins.stream().filter(plugin -> plugin.getClasses().contains(className)).findFirst().orElse(null);
  }

  public IndexedPlugin getPlugin(String name) {
    return plugins.stream().filter(plugin -> plugin.getName().equalsIgnoreCase(name)).findFirst().orElse(null);
  }

  public void indexPlugins(File pluginsFolder) {
    if (!pluginsFolder.exists()) {
      if(pluginsFolder.getName().equals("plugins")){
        throw new RuntimeException("The 'plugins' folder doesn't exist, did you start the server?");
      }
      throw new RuntimeException(pluginsFolder + " doesn't exist");
    }
    LOGGER.info("Indexing plugins...");
    File[] files = pluginsFolder.listFiles();
    if (files == null || files.length == 0) {
      LOGGER.info("There are no plugins to index");
      return;
    }
    for (File file : files) {
      if (file.isDirectory() || !file.getName().endsWith(".jar")) {
        continue;
      }
      try {
        List<String> pluginClasses;
        String pluginName;
        String pluginMainClass;
        try (ZipFile zipFile = new ZipFile(file)) {
          Enumeration<? extends ZipEntry> entries = zipFile.entries();
          pluginClasses = new ArrayList<>();
          pluginName = null;
          pluginMainClass = null;
          while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            String entryName = entry.getName();
            if (entryName.equals("plugin.yml")) {
              try {
                FileConfiguration config = YamlConfiguration.loadConfiguration(zipFile.getInputStream(entry));
                if (!config.isSet("name")) {
                  LOGGER.warn("Invalid plugin {0} missing 'name' in plugin.yml (or no plugin.yml)", file.getName());
                  continue;
                }
                pluginName = config.getString("name");
                if (!config.isSet("main")) {
                  LOGGER.warn("Invalid plugin {0} missing 'main' in plugin.yml (or no plugin.yml)", file.getName());
                  continue;
                }
                pluginMainClass = config.getString("main");
              } catch (IOException e) {
                LOGGER.warn("Invalid plugin.yml in " + file.getName());
              }
            } else if (entryName.endsWith(".class")) {
              String className = entryName.replace(".class", "").replace("/", ".");
              if (className.contains("$")) {
                className = className.split(Pattern.quote("$"))[0];
                className = className.split(Pattern.quote("$"))[0];
              }
              if (!pluginClasses.contains(className)) {
                pluginClasses.add(className);
              }
            }
          }
        }
        if (pluginClasses.isEmpty()) {
          LOGGER.warn("Invalid plugin {0} there are no classes", file.getName());
          continue;
        }
        if (pluginMainClass == null) {
          LOGGER.warn("Invalid plugin {0} couldn't get the plugins main class", file.getName());
          continue;
        }
        if (pluginClasses.stream().noneMatch(pluginMainClass::equals)) {
          LOGGER.warn("Invalid plugin {0} class {1} is declared as main in plugin.yml but is missing in the jar",
                  new Object[]{file.getName(), pluginMainClass});
          continue;
        }
        plugins.add(new IndexedPlugin(file, pluginClasses, pluginName, pluginMainClass));
        LOGGER.info("Indexed plugin {0} with name {1} Classes: {2} Main Class {3}",
                new Object[]{file.getName(), pluginName, pluginClasses.size(), pluginMainClass});
      } catch (IOException ex) {
        LOGGER.warn("Failed to index plugin {0}, is it valid?", file.getName());
        LOGGER.exception(ex);
      }
    }
    LOGGER.info("{0} plugins have been indexed successfully.", plugins.size());
  }
}
