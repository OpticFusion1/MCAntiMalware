package optic_fusion1.mcantimalware.spigotmcscanner;

import java.io.File;
import java.nio.file.Path;

import club.minnced.discord.webhook.WebhookClient;
import club.minnced.discord.webhook.send.WebhookEmbed.EmbedTitle;
import club.minnced.discord.webhook.send.WebhookEmbedBuilder;
import club.minnced.discord.webhook.send.WebhookMessageBuilder;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckResult;
import optic_fusion1.mcantimalware.scanner.Scanner;

public class SpigotMCScanner extends Scanner {

	private final SpigotPluginDownloader pluginDownloader;

	private Thread updaterThread;

	private long lastDatabaseUpdate = 0L;

	private WebhookClient webhook;

	public SpigotMCScanner(Main main, File pluginDatabaseDirectory) {
		super(main, pluginDatabaseDirectory);
		pluginDownloader = new SpigotPluginDownloader(pluginDatabaseDirectory);
		if (System.getenv("discord_webhook") != null) {
			webhook = WebhookClient.withUrl(System.getenv("discord_webhook"));
		}
	}

	public void start() {
		updaterThread = new Thread(this::persistentSpigotScan);
		updaterThread.start();
	}

	private void persistentSpigotScan() {
		while (true) {
			if (lastDatabaseUpdate + (1000 * 60 * 60) < System.currentTimeMillis()) {
				main.downloadDatabase(true);
				lastDatabaseUpdate = System.currentTimeMillis();
			}
			logger.info("Updating Plugin Database!");
			spigotScan();
			logger.info("Waiting for 10 minutes!");
			try {
				Thread.sleep(1000 * 60 * 10);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void spigotScan() {
		pluginDownloader.downloadNewPlugins(this::addFileToQueue);
	}

	@Override
	public void notifyDetectedFile(Path path, CheckResult result) {
		if (webhook != null) {
			WebhookMessageBuilder packet = new WebhookMessageBuilder();
			packet.setUsername("AntiMalwareScanner");
			String pluginName = path.getParent().getParent().getFileName().toString().split("\\.")[0];
			String resourceID = path.getParent().getParent().getFileName().toString().split("\\.")[1];
			WebhookEmbedBuilder embed = new WebhookEmbedBuilder();
			embed.setTitle(new EmbedTitle("[DETECTED] " + pluginName, "https://spigotmc.org/resources/" + resourceID + "/"));
			String version = path.getFileName().toString().split("-")[1].split("\\.")[0];
			embed.setDescription("Plugin " + pluginName + " (" + resourceID + ") of Version " + version
					+ String.format(" might be infected with %s.%s.%s.%s Class path: %s ; Line/SourceFile %d/%s",
							result.getPlatform(), result.getType(), result.getFamily(), result.getVariant(),
							result.getClassNodePath(), result.getLine(), result.getSourceFilePath()));
			embed.setColor(16711680);

			packet.addEmbeds(embed.build());
			webhook.send(packet.build());
		}
	}

}
