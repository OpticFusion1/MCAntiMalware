package optic_fusion1.mcantimalware.spigotmcscanner;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.function.Consumer;
import static optic_fusion1.mcantimalware.Main.LOGGER;
import org.apache.commons.io.IOUtils;

public class SpigotPluginDownloader {

	private final File pluginDatabaseDirectory;

	private final String LIST_FREE_RESOURCES = "https://api.spiget.org/v2/resources/free?sort=-updateDate&fields=file,name,version&page={PAGE}";

	private final String DOWNLOAD_RESOURCE = "http://aqua.api.spiget.org/v2/resources/{RESOURCE}/download";

	private final String FOLDER_PATH = "{NAME}.{RESOURCE}/{VERSION}/";

	private final String FILE_PATH = "{NAME}-{VERSION-NAME}{TYPE}";

	public SpigotPluginDownloader(File pluginDatabaseDirectory) {
		this.pluginDatabaseDirectory = pluginDatabaseDirectory;
	}

	private boolean downloadPage(int currentPage, Consumer<Path> downloadedPluginConsumer) {
		String urlString = LIST_FREE_RESOURCES.replace("{PAGE}", String.valueOf(currentPage));
		LOGGER.info("Downloading the current page: " + urlString);
		try {
			boolean downloadedPlugin = false;
			boolean onlyExternal = true;
			JsonArray array = parseJson(new URL(urlString), JsonArray.class);
			if (array.size() == 0) {
				return false;
			}
			for (JsonElement element : array) {
				JsonObject pluginInformation = element.getAsJsonObject();
				if (pluginInformation == null) {
					System.out.println("PLUGIN NULL");
					onlyExternal = false;
					continue;
				}
				int id = pluginInformation.get("id").getAsInt();
				String name = pluginInformation.get("name").getAsString();
				String fileType;
				JsonElement fileJsonObject = pluginInformation.get("file");
				if (fileJsonObject == null) {
					fileType = ".jar";
				} else {
					fileType = fileJsonObject.getAsJsonObject().get("type").getAsString();
				}
				if (!fileType.equals("external")) {
					onlyExternal = false;
					JsonElement versionInformation = pluginInformation.get("version");
					int version;
					if (versionInformation != null) {
						version = versionInformation.getAsJsonObject().get("id").getAsInt();
					} else {
						continue;
					}
					PluginVersionInfo pvi = new PluginVersionInfo(name, id, version, fileType);

					File pluginFolder = createFolderPath(pvi);

					if (!pluginFolder.exists()) {
						try {
							pluginFolder.mkdirs();
							Path filePath = download(pvi);
							downloadedPlugin = true;
							if (filePath != null) {
								downloadedPluginConsumer.accept(filePath);
							}
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
			return downloadedPlugin || onlyExternal;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

	private File createFolderPath(PluginVersionInfo pvi) {
		String replacedPath = FOLDER_PATH.replace("{NAME}", pvi.getName())
				.replace("{RESOURCE}", String.valueOf(pvi.getResource()))
				.replace("{VERSION}", String.valueOf(pvi.getVersion()));
		return new File(pluginDatabaseDirectory, replacedPath);
	}

	private File createFilePath(PluginVersionInfo pvi) {
		String replacedPath = FILE_PATH.replace("{NAME}", pvi.getName()).replace("{VERSION-NAME}", pvi.getVersionName())
				.replace("{TYPE}", pvi.getFileType());
		return new File(createFolderPath(pvi), replacedPath);
	}

	private Path download(PluginVersionInfo pvi) throws IOException {
		URL url = new URL(DOWNLOAD_RESOURCE.replace("{RESOURCE}", String.valueOf(pvi.getResource())));
		Path pluginPath = createFilePath(pvi).toPath();
		if (Files.copy(url.openStream(), pluginPath) < 512) {
			LOGGER.info("Empty Plugin Download! Waiting for 2 Seconds!");
			try {
				Thread.sleep(2000L);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Files.delete(pluginPath);
			return null;
		}
		LOGGER.info("Downloaded plugin " + pvi.getName() + " Version: " + pvi.getVersionName());
		try {
			Thread.sleep(250L);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return pluginPath;
	}

	public void downloadNewPlugins(Consumer<Path> downloadedPluginConsumer) {
		if (!pluginDatabaseDirectory.exists()) {
			pluginDatabaseDirectory.mkdirs();
		}
		int page = 1;
		while (downloadPage(page++, downloadedPluginConsumer)) {
			try {
				Thread.sleep(1000L);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		LOGGER.info("Finished downloading new plugins");
	}

	private static final Gson GSON = new Gson();

	protected static <Element extends JsonElement> Element parseJson(URL url, Class<Element> type)
			throws JsonSyntaxException, IOException {
		return GSON.fromJson(IOUtils.toString(url.openStream(), "UTF-8"), type);
	}

}
