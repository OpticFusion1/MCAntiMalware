package optic_fusion1.antimalware.ui.util;

import javafx.geometry.Side;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.paint.ImagePattern;

import java.net.URL;
import java.text.MessageFormat;

/**
 * A utility class for loading images.
 */
public final class ImageUtil {

    private static final ImageResolution DEFAULT_RESOLUTION = ImageResolution.MEDIUM;

    /**
     * Loads an image from the given path.
     *
     * @apiNote The image is not resized.
     *
     * @param path The path to the image.
     * @return The loaded image.
     */
    public static Image getRawImage(String path) {
        return new Image(path);
    }

    /**
     * Loads an image from the given path with the default resolution.
     *
     * @param path The path to the image.
     * @return The loaded image.
     */
    public static Image getImage(String path) {
        return getImage(path, DEFAULT_RESOLUTION);
    }

    /**
     * Loads an image from the given path with the given resolution.
     *
     * @param path The path to the image.
     * @param resolution The resolution of the image.
     * @return The loaded image.
     */
    public static Image getImage(String path, ImageResolution resolution) {
        return new Image(path, resolution.getWidth(), resolution.getHeight(), true, true);
    }

    /**
     * Loads an image from the given path and wraps it in an ImageView.
     *
     * @see #getRawImage(String)
     *
     * @param path The path to the image.
     * @return The loaded image view.
     */
    public static ImageView getRawImageView(String path) {
        return new ImageView(getRawImage(path));
    }

    /**
     * Loads an image from the given path with the default resolution and wraps it in an ImageView.
     *
     * @see #getImage(String)
     *
     * @param path The path to the image.
     * @return The loaded image view.
     */
    public static ImageView getImageView(String path) {
        return getImageView(path, DEFAULT_RESOLUTION);
    }

    /**
     * Loads an image from the given path with the given resolution and wraps it in an ImageView.
     *
     * @see #getImage(String, ImageResolution)
     *
     * @param path The path to the image.
     * @param resolution The resolution of the image.
     * @return The loaded image view.
     */
    public static ImageView getImageView(String path, ImageResolution resolution) {
        return new ImageView(getImage(path, resolution));
    }

    /**
     * Loads an image from the given path and wraps it in an ImagePattern.
     *
     * @see #getRawImage(String)
     *
     * @param path The path to the image.
     * @return The loaded image pattern.
     */
    public static ImagePattern getRawImagePattern(String path) {
        return new ImagePattern(getRawImage(path));
    }

    /**
     * Loads an image from the given path with the default resolution and wraps it in an ImagePattern.
     *
     * @see #getImage(String)
     *
     * @param path The path to the image.
     * @return The loaded image pattern.
     */
    public static ImagePattern getImagePattern(String path) {
        return getImagePattern(path, DEFAULT_RESOLUTION);
    }

    /**
     * Loads an image from the given path with the given resolution and wraps it in an ImagePattern.
     *
     * @see #getImage(String, ImageResolution)
     *
     * @param path The path to the image.
     * @param resolution The resolution of the image.
     * @return The loaded image pattern.
     */
    public static ImagePattern getImagePattern(String path, ImageResolution resolution) {
        return new ImagePattern(getImage(path, resolution));
    }

    /**
     * Loads an image from the given path and wraps it as a Background.
     *
     * @param path The path to the image.
     * @return The loaded background.
     */
    public static Background getBackground(String path) {
        return new Background(convertPNGToBackgroundImage(path));
    }

    private static BackgroundImage convertPNGToBackgroundImage(String name) {

        Image image = getImageByURL(fetchResourceAsURL(name));

        return new BackgroundImage(
                image,
                BackgroundRepeat.REPEAT, BackgroundRepeat.NO_REPEAT,
                new BackgroundPosition(Side.LEFT, 0, true, Side.BOTTOM, 0, true),
                new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, true, true, false, true)
        );
    }

    private static Image getImageByURL(URL url) {
        return new Image(url.toExternalForm());
    }

    private static URL fetchResourceAsURL(String name) {

        URL url = ImageUtil.class.getClassLoader().getResource(name);
        if(url == null)
            throw new IllegalStateException(MessageFormat.format("A resource with this name could not be found: {0}", name));

        return url;
    }

    private ImageUtil() {
    }

    /**
     * Represents the resolution of an image.
     */
    public enum ImageResolution {

        SMALL(16, 16),
        OKAY(24, 24),
        MEDIUM(32, 32),
        ORIGINAL(64, 64); // large

        private final int width;
        private final int height;

        ImageResolution(int width, int height) {
            this.width = width;
            this.height = height;
        }

        public int getWidth() {
            return width;
        }

        public int getHeight() {
            return height;
        }
    }
}
