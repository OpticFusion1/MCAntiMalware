package optic_fusion1.antimalware.ui.view.views;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressBar;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import optic_fusion1.antimalware.ui.util.CSSUtil;
import optic_fusion1.antimalware.ui.util.ImageUtil;
import optic_fusion1.antimalware.ui.view.View;
import optic_fusion1.antimalware.ui.view.components.FileControlBar;
import optic_fusion1.antimalware.ui.view.components.OverlayControl;
import optic_fusion1.antimalware.ui.view.viewmodels.MCAntiMalwareViewModel;

import java.net.URL;
import java.nio.file.Path;
import java.util.ResourceBundle;

/**
 * Represents the main view of the application.
 */
public class MCAntiMalwareView extends View<MCAntiMalwareViewModel> {

    private final Pane visualizeDropPane = new Pane();

    @FXML
    private VBox root;

    @FXML
    private ListView<Label> fileListView;

    @FXML
    private ListView<FileControlBar> foundListView;

    @FXML
    private ProgressBar progressBar;

    public MCAntiMalwareView(MCAntiMalwareViewModel viewModel) {
        super(viewModel);
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        CSSUtil.applyStyle(root, getClass());

        setupDropOverlay();
        setupBinding();
        setupDragAndDropFunctionality();
    }

    @FXML
    private void onScan(ActionEvent event) {

        fileListView.getItems().clear();

        progressBar.setProgress(1);

        getViewModel().scanFiles();
    }

    private void setupBinding() {

        getViewModel().setOnFound((path, checkResult) -> Platform.runLater(() -> {

            for (FileControlBar fileControlBar : foundListView.getItems())
                if (fileControlBar.getWrappedFile().equals(path))
                    return;

            FileControlBar fileControlBar = new FileControlBar(path, checkResult);
            fileControlBar.deletedProperty().addListener((observableValue, aBoolean, t1) ->
                    foundListView.getItems().remove(fileControlBar));

            foundListView.getItems().add(fileControlBar);
        }));

        getViewModel().filesProperty().addListener((observable, oldValue, newValue) -> {

            fileListView.getItems().clear();

            for(Path newFile : newValue) {

                Label label = new Label(wrapText(newFile.getFileName().toString(), 25));
                label.setGraphic(ImageUtil.getImageView("images/java_icon.png",  ImageUtil.ImageResolution.OKAY));

                fileListView.getItems().add(label);
            }
        });
    }

    private void setupDropOverlay() {

        root.getChildren().add(visualizeDropPane);

        Label dropFilesHereLabel = new Label("Drop files here");
        dropFilesHereLabel.layoutXProperty()
                .bind(visualizeDropPane.widthProperty().subtract(dropFilesHereLabel.widthProperty()).divide(2));
        dropFilesHereLabel.layoutYProperty()
                .bind(visualizeDropPane.heightProperty().subtract(dropFilesHereLabel.heightProperty()).divide(2));
        dropFilesHereLabel.setFont(dropFilesHereLabel.getFont().font(54));

        visualizeDropPane.getChildren().add(dropFilesHereLabel);
        visualizeDropPane.setOpacity(0.8);
        visualizeDropPane.setPrefSize(200, 200);
        visualizeDropPane.setVisible(false);

        OverlayControl overlayControl = new OverlayControl(root);
        overlayControl.addOverlay(visualizeDropPane);
    }

    private void setupDragAndDropFunctionality() {
        Platform.runLater(() -> {

            getScene().setOnDragOver(event -> {

                if(event.getDragboard().hasFiles()) {
                    OverlayControl.show(visualizeDropPane, root);
                    event.acceptTransferModes(TransferMode.COPY);
                }

                event.consume();
            });

            getScene().setOnDragExited(event -> {
                OverlayControl.hide(visualizeDropPane);
                event.consume();
            });

            getScene().setOnDragDropped(event -> {
                if(event.getDragboard().hasFiles()) {
                    event.getDragboard().getFiles().forEach(file -> {
                        if(file.getName().endsWith(".jar")) {
                            progressBar.setProgress(0);
                            getViewModel().registerFile(file.toPath());
                        }
                    });
                }
                event.consume();
            });
        });
    }

    private String wrapText(String text, int length) {
        return text.length() > length ? text.substring(0, length) + "..." : text;
    }
}
